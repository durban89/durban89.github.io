[{"title":"联想thinkpad e430 设置光驱启动","date":"2025-06-12T09:45:26.000Z","path":"2025/06/12/联想thinkpad-e430-设置光驱启动.html","text":"按F1进入BIOS，选择Security ，选择 Secure Boot,进入后关闭 Secure Boot 为Disabled 即可！ 把Startup 的 UEFI&#x2F;LEGACY BOOT 改为Both即可！ 微软公司发布Win8系统以后，现在很多电脑厂商都把Win8系统出厂预装到笔记本当中，联想Thinkpad E430电脑也不例外，由于Win8系统的操作界面发生了很多改变，有很多人还不太喜欢使用电脑出厂预装的Win8系统，所以想要把Thinkpad E430电脑中出厂预装的Win8换成Win7的。 对于笔记本电脑装系统，相信很多人都不陌生，但就有很多朋友问我，为什么我用U盘或是光盘对出厂预装了Win8系统的电脑安装系统，在按F12选择U盘或光盘启动的时候，老是进不去，画面闪动一下，又回到原来的界面，这是什么原因造成了的呢？ 有些人开始怀疑这是U盘或光盘坏了，或者是PE没有做好等原因，但拿到其它电脑上去，又成正常启动，这到底是那里出问题了呢？ 其实这不是你的U盘或PE出问题了，而是笔记本电脑预装Win8系统，采用了UEFI接口的原因，所以才会有一些PE无法兼容导致进不去，如果我们想要把预装的Win8系统换成Win7系统，我们只需要更改一下BIOS即可。 Win8换Win7更改BIOS的方法一： 按开电源键，即可不停地按F1键，进入BIOS操作界面，按向右的方向键，选择“Security”，然后再按向下的方向键，选择最下面的“Secure Boot”，按回车键进入。 把“Secure Boot”中的“Enabled”按回车键更改成“Disabled”。 按Esc键返回上一级菜单，再按向右方向键，选择“Startup”，把“UEFI&#x2F;Legacy Boot”中的“UEFI Only”改成“Both”即可，按“Fn+F10”保存，然后就可以和其它电脑一样正常安装系统了。 Win8换Win7更改BIOS的方法二： 同样是按电源键后，不停地按F1进入BIOS操作界面，按向右方向键选择“Restart”，然后再把“- OS Optimized Defaults”中的“Enabled”改成“Disabled”，在更改过程中，会弹出提示，我们选择YES即可。 然后再按“Fn+F9”重置BIOS设置，重置完成以后，按再“Fn+F10”保存设置即可，这时就同没有预装Win8系统的电脑重装系统的方法是一样的了。 注：你可以根据自己需要，随意选择上面其中一种更改BIOS中UEFI接口的方法，只要执行了上面其中某种方法的操作，即可顺种地通过U盘或光盘启动来更换Win8操作系统。 解决Win8系统换Win7以后，画面卡在“正在启动Windows” 出厂预装Win8系统换成Win7，必须更换BIOS中的UEFI接口，然后再重装系统，但有人问我，系统通过ghost导入到电脑硬盘当中，重启时，画面就一直卡在“正在启动Windows”处，这是什么原因造成的。 其实这主要是因为分区表错误的原因造成的，我们只需要运行PE系统的中DiskGenius分区工具，选择中电脑硬盘，再点文件边上的硬盘，在下拉菜单中点击“重建主引导记录（MBR）”即可，然后再按太阳城娱乐城正常操作对电脑硬盘进行重新分区并重装系统即可。 公司刚买了一台E430，将uefi&#x2F;legacy boot，由默认uefi only 修改为both。不过，需要把security—secure boot中的secure boot 由默认Enables 修改为Disabled.只有这样修改以后，uefi&#x2F;legacy boot才变成可以修改的项目。如果想安XP，config—–serial ata(sata)中sata controller mode option由默认achi修改为compatibility. 来源:http://bbs.diannaodian.com/read-u-tid-161168.html","tags":[{"name":"BIOS","slug":"BIOS","permalink":"https://blog.gowhich.com/tags/BIOS/"},{"name":"笔记本","slug":"笔记本","permalink":"https://blog.gowhich.com/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"}]},{"title":"PHP 中文分词PSCWS4使用说明","date":"2025-06-12T09:45:22.000Z","path":"2025/06/12/PHP-中文分词PSCWS4使用说明.html","text":"分词的这个技术，挺重要的，在有些方面起着非常重要的作用，这里摘自一博友的文章 PSCWS4 类对应的文件为 pscws4.class.php。在 PHP 代码中的调用方法如下： 123456789101112131415161718192021222324252627&lt;?php//加入头文件require &#x27;./pscws4/pscws4.class.php&#x27;;//建立分词类对像,参数为字符集,默认为gbk,//可在后面调用set_charset改变$pscws = new PSCWS4(&#x27;utf8&#x27;);//接下来,设定一些分词参数或选项,set_dict 是必须的,//若想智能识别人名等需要set_rule//包括:set_charset,set_dict,set_rule,//set_ignore,set_multi,set_debug,set_duality...等方法$pscws-&gt;set_dict(&#x27;./pscws4/etc/dict.xdb&#x27;);$pscws-&gt;set_rule(&#x27;./pscws4/etc/rules.ini&#x27;);//分词调用send_text()将待分词的字符串传入,//紧接着循环调用get_result()方法取回一系列分好的词//直到get_result()返回false为止//返回的词是一个关联数组,包含:word词本身,idf逆词率(重),//off在text中的偏移,len长度,attr词性;$pscws-&gt;send_text($text);while($some = $pscws-&gt;get_result()) &#123; foreach($some as $word) &#123; print_r($word); &#125;&#125; — 类方法完全手册 — (注: 构造函数可传入字符集作为参数, 这与另外调用 set_charset 效果是一样的) void set_charset(string charset);说明：设定分词词典、规则集、欲分文本字符串的字符集，系统缺省是 gbk 字集。返回：无。参数：charset 是设定的字符集，目前只支持 utf8 和 gbk。（注：big5 也可作 gbk 处理）注意：输入要切分的文本，词典，规则文件这三者的字符集必须统一为该 charset 值。 bool set_dict(string dict_fpath);说明：设置分词引擎所采用的词典文件。参数：dict_path 是词典的路径，可以是相对路径或完全路径。返回：成功返回 true 失败返回 false。错误：若有错误会给出 WARNING 级的错误提示。 void set_rule(string rule_path);说明：设定分词所用的新词识别规则集（用于人名、地名、数字时间年代等识别）。返回：无。参数：rule_path 是规则集的路径，可以是相对路径或完全路径。 void set_ignore(bool yes)说明：设定分词返回结果时是否去除一些特殊的标点符号之类。返回：无。参数：yes 设定值，如果为 true 则结果中不返回标点符号，如果为 false 则会返回，缺省为 false。 void set_multi(int mode);说明：设定分词返回结果时是否复合分割，如“中国人”返回“中国＋人＋中国人”三个词。返回：无。参数：mode 设定值，1 ~ 15。按位与的 1 | 2 | 4 | 8 分别表示: 短词 | 二元 | 主要单字 | 所有单字 void set_duality(bool yes);说明：设定是否将闲散文字自动以二字分词法聚合。返回：无。参数：yes 设定值，如果为 true 则结果中多个单字会自动按二分法聚分，如果为 false 则不处理，缺省为 false。 void set_debug(bool yes);说明：设置分词过程是否输出N-Path分词过程的调试信息。参数：yes 设定值，如果为 true 则分词过程中对于多路径分法分给出提示信息。返回：无。 void send_text(string text)说明：发送设定分词所要切割的文本。返回：无。参数：text 是文本的内容。注意：执行本函数时，请先加载词典和规则集文件并设好相关选项。 mixed get_result(void)说明：根据 send_text 设定的文本内容，返回一系列切好的词汇。返回：成功返回切好的词汇组成的数组， 若无更多词汇，返回 false。参数：无。注意：每次切割后本函数应该循环调用，直到返回 false 为止，因为程序每次返回的词数是不确定的。返回的词汇包含的键值有：word (string, 词本身) idf (folat, 逆文本词频) off (int, 在文本中的位置) attr(string, 词性) mixed get_tops( [int limit [, string attr]] )说明：根据 send_text 设定的文本内容，返回系统计算出来的最关键词汇列表。返回：成功返回切好的词汇组成的数组， 若无更多词汇，返回 false。参数：limit 可选参数，返回的词的最大数量，缺省是 10；attr 可选参数，是一系列词性组成的字符串，各词性之间以半角的逗号隔开，这表示返回的词性必须在列表中，如果以~开头，则表示取反，词性必须不在列表中，缺省为空，返回全部词性，不过滤。 string version(void);说明：返回本版号。返回：版本号（字符串）。参数：无。 void close(void);说明：关闭释放资源，使用结束后可以手工调用该函数或等系统自动回收。返回：无。参数：无。 以下是相关资源的下载地址：PSCWS4: http://www.ftphp.com/scws/down/pscws4-20081221.tar.bz2规则集: http://www.ftphp.com/scws/down/scws-rules-all.zip词典系列:http://www.ftphp.com/scws/down/scws-dict-chs-gbk.tar.bz2http://www.ftphp.com/scws/down/scws-dict-chs-utf8.tar.bz2","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"自定义UITableViewCell（使用xib文件），处理UITextField的键盘隐藏","date":"2025-06-12T09:45:19.000Z","path":"2025/06/12/自定义UITableViewCell-使用xib文件-处理UITextField的键盘隐藏.html","text":"查找好多了资料，对这个如果将自己定义的cell中的textfield实现，失去焦点触发键盘隐藏的功能，我这里简单的贴出自己的代码 第一部分是我的自定义的cell nameCell.h1234567891011121314151617181920//// nameCell.h// xunYi6//// Created by david on 13-5-20.// Copyright (c) 2013年 david. All rights reserved.//#import &lt;UIKit/UIKit.h&gt;@interface nameCell : UITableViewCell&lt;UITextFieldDelegate&gt;@property (strong, nonatomic) IBOutlet UIImageView *markPic;@property (strong, nonatomic) IBOutlet UILabel *teleplayName;@property (strong, nonatomic) IBOutlet UITextField *teleplayInput;@property (copy, nonatomic) UIImage *teleplayImage;@property (copy, nonatomic) NSString *teleplayTitle;@property (copy, nonatomic) NSString *name;@end nameCell.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263//// nameCell.m// xunYi6//// Created by david on 13-5-20.// Copyright (c) 2013年 david. All rights reserved.//#import &quot;nameCell.h&quot;@implementation nameCell@synthesize teleplayImage = _teleplayImage;@synthesize teleplayTitle = _teleplayTitle;@synthesize name = _name;- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier&#123; self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]; if (self) &#123; // Initialization code self.teleplayInput.delegate = self; &#125; return self;&#125;- (void)setSelected:(BOOL)selected animated:(BOOL)animated&#123; [super setSelected:selected animated:animated]; // Configure the view for the selected state&#125;-(void) setTeleplayImage:(UIImage *)value&#123; if(![value isEqual:_teleplayImage]) &#123; _teleplayImage = [value copy]; self.markPic.image = _teleplayImage; &#125;&#125;-(void) setTeleplayTitle:(NSString *)value&#123; if(![value isEqualToString:_teleplayTitle]) &#123; _teleplayTitle = [value copy]; self.teleplayName.text = _teleplayTitle; &#125;&#125;-(void) setName:(NSString *)value&#123; if(![value isEqualToString:_name]) &#123; _name = [value copy]; self.teleplayInput.text = _name; &#125;&#125;@end 实现的方法我实在-(NSInteger) tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section这个方法中实现的，代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445-(NSInteger) tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; return [self.dataDic count];&#125;-(UITableViewCell *) tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; NSUInteger row = [indexPath row]; if(row == 0) &#123; static NSString *nameCellIdentifier = @&quot;nameCell&quot;; UINib *nib = [UINib nibWithNibName:@&quot;nameCell&quot; bundle:nil]; [self.publicChanceTable registerNib:nib forCellReuseIdentifier:nameCellIdentifier]; nameCell *cell = [self.publicChanceTable dequeueReusableCellWithIdentifier:nameCellIdentifier]; if(cell == nil) &#123; cell = [[nameCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nameCellIdentifier]; &#125; cell.teleplayInput.delegate = self; cell.accessoryType = UITableViewCellAccessoryNone; cell.selectionStyle = UITableViewCellSelectionStyleNone; return cell; &#125; static NSString *cellIdentifier = @&quot;cellIdentifier&quot;; UITableViewCell *cell = [self.publicChanceTable dequeueReusableCellWithIdentifier:cellIdentifier]; if(cell == nil) &#123; cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier]; &#125; NSDictionary *dic = [self.dataDic objectForKey:[NSString stringWithFormat:@&quot;%d&quot;,row]]; cell.textLabel.text = [dic valueForKey:@&quot;detail&quot;]; return cell;&#125; 重要的一点是我加入了这条语句 1cell.teleplayInput.delegate = self; 同时在你的.h文件中要做的是： 1@interface chancePublicViewController : UIViewController&lt;UITableViewDataSource, UITableViewDelegate, UITextFieldDelegate&gt; 没错要引入UITextFieldDelegate协议","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"解决Lost connection to MySQL server at 'reading错误","date":"2025-06-12T09:45:14.000Z","path":"2025/06/12/解决Lost-connection-to-MySQL-server-at-reading错误.html","text":"当通过 TCP&#x2F;IP 连接 MySQL 远程主机时，出现 ERROR 2013 (HY000): Lost connection to MySQL server at &#39;reading initial communication packet&#39;, system error: 104 。 如果是在linux shell命令行中直接打 mysql 命令，能够顺利连上 MySQL，执行查询语句也比较正常，但如果执行 STOP SLAVE; 命令时就随机出现 ERROR 2013 (HY000): Lost connection to MySQL server during query 问题。而如果把操作命令写到脚本文件再去执行该脚本文件的话，则必然出现 Lost connection to MySQL server at &#39;reading initial communication packet&#39;, system error: 111 要是无论通过什么途径远程访问都出现错误可以认为是系统有防火墙之类的限制，但现在这种奇怪的抽筋现象让人百思不得其解。最后找到的解决方法是在 my.cnf 里面的 [mysqld] 段增加一个启动参数skip-name-resolve 问题消失。但原因还是想不出所以然。 产生的原因是 my.cnf 中我设置了 skip-name-resolve，skip-name-resolve是禁用dns解析，所以在mysql的授权表中就不能使用主机名了，只能使用IP 。","tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://blog.gowhich.com/tags/MySQL/"}]},{"title":"Qeephp实现切库","date":"2025-06-12T09:45:10.000Z","path":"2025/06/12/Qeephp实现切库.html","text":"基于要实现切库，而且又要使用Qeephp这个框架，之前一直没有用过，这里最近师兄在搞这一块，他的实现过程是这样的。详见以下代码： 12345678&lt;?phpQ::register(QDB::getConn(&#x27;xxxxx&#x27;), &#x27;dbo_default&#x27;);$select = XXXXX::find($sql)-&gt;order(&#x27;id DESC&#x27;)-&gt;all()-&gt;asArray()-&gt;limit(0, 10);$this-&gt;_view[&#x27;pager&#x27;] = $select-&gt;getPagination();$this-&gt;_view[&#x27;rowset&#x27;] = $select-&gt;getAll();$model = Q::ini(&#x27;app_config/RUN_MODE&#x27;);Q::register(QDB::getConn($model, &#x27;dbo_default&#x27;));","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"iPhone 自定义 UITableViewCell 行缩进（修正版）","date":"2025-06-12T09:45:06.000Z","path":"2025/06/12/iPhone-自定义-UITableViewCell-行缩进（修正版）.html","text":"这篇文章跟我之前讲的一篇文章是一样的，唯独不同的一点是，在编辑的状态进行拖动的时候，cell有重载的现象，这样导致的结果是，编辑状态缩进的cell又回复了原来的状态，使得原来的效果又回复了，这次，经过资料的查找，找打解决的办法，代码贴到下面了。至于自定的cell的话，大家可以自己去模仿制作一个，应该是没什么区别的。 attentionListCell.h123456789101112131415161718192021222324252627//// attentionListCell.h// xunYi6//// Created by david on 13-5-16.// Copyright (c) 2013年 david. All rights reserved.//#import &lt;UIKit/UIKit.h&gt;@interface attentionListCell : UITableViewCell@property (strong, nonatomic) IBOutlet UIImageView *imageViewPic;@property (strong, nonatomic) IBOutlet UILabel *name;@property (strong, nonatomic) IBOutlet UILabel *index;@property (strong, nonatomic) IBOutlet UILabel *rank;@property (copy, nonatomic) UIImage *listImage;@property (copy, nonatomic) NSString *listName;@property (copy, nonatomic) NSString *listIndex;@property (copy, nonatomic) NSString *listRank;//--------------------------//编辑操作//--------------------------@property (strong, nonatomic) UIImageView *checkImageView;@property (nonatomic) BOOL checked;- (void) setChecked:(BOOL)checked;@end attentionListCell.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242//// attentionListCell.m// xunYi6//// Created by david on 13-5-16.// Copyright (c) 2013年 david. All rights reserved.//#import &quot;attentionListCell.h&quot;@implementation attentionListCell@synthesize listImage = _listImage;@synthesize listName = _listName;@synthesize listIndex = _listIndex;@synthesize listRank = _listRank;@synthesize checkImageView = _checkImageView;@synthesize checked = _checked;- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier&#123; self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]; if (self) &#123; // Initialization code &#125; return self;&#125;- (void)setSelected:(BOOL)selected animated:(BOOL)animated&#123; [super setSelected:selected animated:animated]; // Configure the view for the selected state&#125;-(void) setListImage:(UIImage *)value&#123; if(![value isEqual:_listImage]) &#123; _listImage = [value copy]; self.imageViewPic.image = _listImage; &#125;&#125;-(void) setListName:(NSString *)value&#123; if(![value isEqualToString:_listName]) &#123; _listName = [value copy]; self.name.text = _listName; &#125;&#125;-(void) setListIndex:(NSString *)value&#123; if(![value isEqualToString:_listIndex]) &#123; _listIndex = [value copy]; self.index.text = _listIndex; &#125;&#125;-(void) setListRank:(NSString *)value&#123; if(![value isEqualToString:_listRank]) &#123; _listRank = [value copy]; self.rank.text = _listRank; &#125;&#125;-(void) willTransitionToState:(UITableViewCellStateMask)state&#123; [UIView beginAnimations:@&quot;ResetFrame&quot; context:nil]; [UIView setAnimationDuration:0.7]; [UIView setAnimationTransition:UIViewAnimationTransitionNone forView:self cache:NO]; if(state == UITableViewCellStateDefaultMask) &#123; [self setSubViewsFrameNormal]; &#125; else if(state == UITableViewCellStateShowingEditControlMask) &#123; [self setSubViewsFrameEdit]; &#125; else if(state == UITableViewCellStateShowingDeleteConfirmationMask) &#123; [self setSubViewsFrameEdit]; &#125; [UIView commitAnimations]; &#125;-(void) setSubViewsFrameEdit&#123; CGFloat offset = 10.0; CGFloat imageX = 5.0 + offset; CGFloat imageY = 5.0; CGFloat imageWidth = 60.0; CGFloat imageHeight = 60.0; CGFloat nameX = 70.0 + offset; CGFloat nameY = 5.0; CGFloat nameWidth = 240.0 - offset; CGFloat nameHeight = 15.0; CGFloat indexX = 70.0 + offset; CGFloat indexY = 25.0; CGFloat indexWidth = 240.0 - offset; CGFloat indexHeight = 15.0; CGFloat rankX = 70.0 + offset; CGFloat rankY = 45.0; CGFloat rankWidth = 240.0 - offset; CGFloat rankHeight = 15.0; [self.imageViewPic setFrame:CGRectMake(imageX, imageY, imageWidth, imageHeight)]; [self.name setFrame:CGRectMake(nameX, nameY, nameWidth, nameHeight)]; [self.index setFrame:CGRectMake(indexX, indexY, indexWidth, indexHeight)]; [self.rank setFrame:CGRectMake(rankX, rankY, rankWidth, rankHeight)];&#125;-(void) setSubViewsFrameNormal&#123; CGFloat offset = 0.0; CGFloat imageX = 5.0 + offset; CGFloat imageY = 5.0; CGFloat imageWidth = 60.0; CGFloat imageHeight = 60.0; CGFloat nameX = 70.0 + offset; CGFloat nameY = 30.0; CGFloat nameWidth = 240.0 - offset; CGFloat nameHeight = 15.0; CGFloat indexX = 70.0 + offset; CGFloat indexY = 25.0; CGFloat indexWidth = 240.0 - offset; CGFloat indexHeight = 15.0; CGFloat rankX = 70.0 + offset; CGFloat rankY = 45.0; CGFloat rankWidth = 240.0 - offset; CGFloat rankHeight = 15.0; [self.imageViewPic setFrame:CGRectMake(imageX, imageY, imageWidth, imageHeight)]; [self.name setFrame:CGRectMake(nameX, nameY, nameWidth, nameHeight)]; [self.index setFrame:CGRectMake(indexX, indexY, indexWidth, indexHeight)]; [self.rank setFrame:CGRectMake(rankX, rankY, rankWidth, rankHeight)];&#125;//-------------------------------// 重新定义editing的设置//--------------------------------(void) setEditing:(BOOL)editing animated:(BOOL)animated&#123; if (self.editing == editing) &#123; return; &#125; [super setEditing:editing animated:animated]; if (editing) &#123; CGFloat offset = 10.0; CGFloat imageX = 5.0 + offset; CGFloat imageY = 5.0; CGFloat imageWidth = 60.0; CGFloat imageHeight = 60.0; CGFloat nameX = 70.0 + offset; CGFloat nameY = 5.0; CGFloat nameWidth = 240.0 - offset; CGFloat nameHeight = 15.0; CGFloat indexX = 70.0 + offset; CGFloat indexY = 25.0; CGFloat indexWidth = 240.0 - offset; CGFloat indexHeight = 15.0; CGFloat rankX = 70.0 + offset; CGFloat rankY = 45.0; CGFloat rankWidth = 240.0 - offset; CGFloat rankHeight = 15.0; [self.imageViewPic setFrame:CGRectMake(imageX, imageY, imageWidth, imageHeight)]; [self.name setFrame:CGRectMake(nameX, nameY, nameWidth, nameHeight)]; [self.index setFrame:CGRectMake(indexX, indexY, indexWidth, indexHeight)]; [self.rank setFrame:CGRectMake(rankX, rankY, rankWidth, rankHeight)]; if(_checkImageView == nil)&#123; _checkImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&quot;Unselected.png&quot;]]; [self addSubview:_checkImageView]; [_checkImageView setFrame:CGRectMake(5.0, self.index.frame.origin.y, 30.0, 30.0)]; &#125; [self setChecked:_checked]; &#125; else &#123; _checked = NO; if(_checkImageView == nil)&#123; _checkImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&quot;Selected.png&quot;]]; [self addSubview:_checkImageView]; [_checkImageView setFrame:CGRectMake(5.0, self.index.frame.origin.y, 30.0, 30.0)]; &#125; &#125; &#125;- (void) setChecked:(BOOL)checked&#123; if (checked) &#123; _checkImageView.image = [UIImage imageNamed:@&quot;Selected.png&quot;]; self.backgroundView.backgroundColor = [UIColor colorWithRed:223.0/255.0 green:230.0/255.0 blue:250.0/255.0 alpha:1.0]; &#125; else &#123; _checkImageView.image = [UIImage imageNamed:@&quot;Unselected.png&quot;]; self.backgroundView.backgroundColor = [UIColor whiteColor]; &#125; _checked = checked;&#125;@end","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"使用for...in...输出NSMutableArray内容和输入NSMutableDictionary","date":"2025-06-12T09:45:02.000Z","path":"2025/06/12/使用for-in-输出NSMutableArray内容和输入NSMutableDictionary.html","text":"for…in…输出NSMutableDictionary（代码片段摘录如下）123456789NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;attention&quot; ofType:@&quot;plist&quot;];self.dataDic = [NSDictionary dictionaryWithContentsOfFile:path];self.items = [NSMutableArray arrayWithCapacity:0];for (id section in self.dataDic) &#123; Item *item = [[Item alloc] init]; item.title = [[self.dataDic objectForKey:section] valueForKey:@&quot;title&quot;]; item.isChecked = NO; [_items addObject:item];&#125; for…in…输出NSMutableArray（代码片段摘录如下）1234for (NSDictionary *item in _items) &#123; NSLog(@&quot;item.title = %@&quot;,[item valueForKey:@&quot;title&quot;]); NSLog(@&quot;item.isChecked = %@&quot;,[item valueForKey:@&quot;isChecked&quot;]);&#125;","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iPhone 自定义 UITableViewCell 行缩进","date":"2025-06-12T09:44:58.000Z","path":"2025/06/12/iPhone-自定义-UITableViewCell-行缩进.html","text":"网上搜索了很多，不知道是我搜索技术问题还是怎么着，就是没有找到，不过经过自己的努力，还是发现了解决的办法，因为这种情况大多数是自定的UITableviewCell,那么肯定知道如何自己的自定的cell里面如何修改cell上面的元素，其实原理很简单，就是重新设置一下元素的frame大小就好了，我讲自己的代码贴到下面希望能够给大家一个指引。如果问题，可以联系我跟我继续探讨。 attentionListCell.h123456789101112131415161718192021222324252627//// attentionListCell.h// xunYi6//// Created by david on 13-5-16.// Copyright (c) 2013年 david. All rights reserved.//#import &lt;UIKit/UIKit.h&gt;@interface attentionListCell : UITableViewCell@property (strong, nonatomic) IBOutlet UIImageView *imageViewPic;@property (strong, nonatomic) IBOutlet UILabel *name;@property (strong, nonatomic) IBOutlet UILabel *index;@property (strong, nonatomic) IBOutlet UILabel *rank;@property (copy, nonatomic) UIImage *listImage;@property (copy, nonatomic) NSString *listName;@property (copy, nonatomic) NSString *listIndex;@property (copy, nonatomic) NSString *listRank;//--------------------------//编辑操作//--------------------------@property (strong, nonatomic) UIImageView *checkImageView;@property (nonatomic) BOOL checked;- (void) setChecked:(BOOL)checked;@end attentionListCell.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173//// attentionListCell.m// xunYi6//// Created by david on 13-5-16.// Copyright (c) 2013年 david. All rights reserved.//#import &quot;attentionListCell.h&quot;@implementation attentionListCell@synthesize listImage = _listImage;@synthesize listName = _listName;@synthesize listIndex = _listIndex;@synthesize listRank = _listRank;@synthesize checkImageView = _checkImageView;@synthesize checked = _checked;- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier&#123; self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]; if (self) &#123; // Initialization code &#125; return self;&#125;- (void)setSelected:(BOOL)selected animated:(BOOL)animated&#123; [super setSelected:selected animated:animated]; // Configure the view for the selected state&#125;-(void) setListImage:(UIImage *)value&#123; if(![value isEqual:_listImage]) &#123; _listImage = [value copy]; self.imageViewPic.image = _listImage; &#125;&#125;-(void) setListName:(NSString *)value&#123; if(![value isEqualToString:_listName]) &#123; _listName = [value copy]; self.name.text = _listName; &#125;&#125;-(void) setListIndex:(NSString *)value&#123; if(![value isEqualToString:_listIndex]) &#123; _listIndex = [value copy]; self.index.text = _listIndex; &#125;&#125;-(void) setListRank:(NSString *)value&#123; if(![value isEqualToString:_listRank]) &#123; _listRank = [value copy]; self.rank.text = _listRank; &#125;&#125;- (void) setCheckImageViewCenter:(CGPoint)pt alpha:(CGFloat)alpha animated:(BOOL)animated&#123; if (animated) &#123; [UIView beginAnimations:nil context:nil]; [UIView setAnimationBeginsFromCurrentState:YES]; [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut]; [UIView setAnimationDuration:0.3]; _checkImageView.center = pt; _checkImageView.alpha = alpha; [UIView commitAnimations]; &#125; else &#123; _checkImageView.center = pt; _checkImageView.alpha = alpha; &#125;&#125;//-------------------------------// 重新定义editing的设置//--------------------------------(void) setEditing:(BOOL)editing animated:(BOOL)animated&#123; if (self.editing == editing) &#123; return; &#125; [super setEditing:editing animated:animated]; if (editing) &#123;// CGRect *imageFrame = self.imageViewPic.frame; [self.imageViewPic setFrame:CGRectMake(self.imageViewPic.frame.origin.x + 30, self.imageViewPic.frame.origin.y, self.imageViewPic.frame.size.width, self.imageViewPic.frame.size.height)]; [self.name setFrame:CGRectMake(self.name.frame.origin.x + 30, self.name.frame.origin.y, self.name.frame.size.width, self.name.frame.size.height)]; [self.index setFrame:CGRectMake(self.index.frame.origin.x + 30, self.index.frame.origin.y, self.index.frame.size.width, self.index.frame.size.height)]; [self.rank setFrame:CGRectMake(self.rank.frame.origin.x + 30, self.rank.frame.origin.y, self.rank.frame.size.width, self.rank.frame.size.height)]; // [self.imageViewPic setFrame:CGRectMake(&lt;#CGFloat x#&gt;, &lt;#CGFloat y#&gt;, &lt;#CGFloat width#&gt;, &lt;#CGFloat height#&gt;)] // self.selectionStyle = UITableViewCellSelectionStyleNone;// self.backgroundView = [[UIView alloc] init];// self.backgroundView.backgroundColor = [UIColor redColor];// self.textLabel.backgroundColor = [UIColor clearColor];// self.detailTextLabel.backgroundColor = [UIColor clearColor];// // if (_checkImageView == nil)// &#123;// _checkImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&quot;Unselected.png&quot;]];// [self addSubview:_checkImageView];// &#125;// // [self setChecked:_checked];// _checkImageView.center = CGPointMake(-CGRectGetWidth(_checkImageView.frame) * 0.5,// CGRectGetHeight(self.bounds) * 0.5);// _checkImageView.alpha = 0.0;// [self setCheckImageViewCenter:CGPointMake(20.5, CGRectGetHeight(self.bounds) * 0.5)// alpha:1.0 animated:animated]; &#125; else &#123;// _checked = NO;// self.selectionStyle = UITableViewCellSelectionStyleBlue;// self.backgroundView = nil;// // if (_checkImageView)// &#123;// [self setCheckImageViewCenter:CGPointMake(-CGRectGetWidth(_checkImageView.frame) * 0.5,// CGRectGetHeight(self.bounds) * 0.5)// alpha:0.0// animated:animated];// &#125; &#125; &#125;- (void) setChecked:(BOOL)checked&#123; if (checked) &#123; _checkImageView.image = [UIImage imageNamed:@&quot;Selected.png&quot;]; self.backgroundView.backgroundColor = [UIColor colorWithRed:223.0/255.0 green:230.0/255.0 blue:250.0/255.0 alpha:1.0]; &#125; else &#123; _checkImageView.image = [UIImage imageNamed:@&quot;Unselected.png&quot;]; self.backgroundView.backgroundColor = [UIColor whiteColor]; &#125; _checked = checked;&#125;@end","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS UIProgressView 用法","date":"2025-06-12T09:44:54.000Z","path":"2025/06/12/iOS-UIProgressView-用法.html","text":"iOS实例-UIProgressView的简单实用方法 代码如下： ProgressViewViewController.h12345678910111213141516#import &lt;UIKit/UIKit.h&gt;@interface ProgressViewViewController : UIViewController&#123; UIProgressView *progressview; UIProgressView *barprogressview; NSTimer *timer; IBOutlet UIButton *startButton; IBOutlet UIButton *stopButton; &#125;@property (nonatomic,retain) IBOutlet UIProgressView *progressview;@property (nonatomic,retain) IBOutlet UIProgressView *barprogressview;-(IBAction) startProgress:(id)sender;-(IBAction) stopProgress:(id)sender;@end ProgressViewViewController.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263@implementation ProgressViewViewController@synthesize progressview;@synthesize barprogressview;- (void)viewDidLoad&#123; self.progressview=nil; self.barprogressview=nil; [super viewDidLoad]; // Do any additional setup after loading the view, typically from a nib. stopButton.enabled = NO; startButton.enabled = YES; &#125;-(void) dealloc&#123; self.progressview=nil; self.barprogressview=nil; [super dealloc];&#125;- (void)viewDidUnload&#123; self.progressview=nil; self.barprogressview=nil; [super viewDidUnload]; // Release any retained subviews of the main view.&#125;/*进度条每次加0.01 */-(void) timerChanged:(id)sender&#123; self.progressview.progress +=0.01f; self.barprogressview.progress +=0.01f;&#125;-(IBAction) startProgress:(id)sender&#123; timer=[NSTimer scheduledTimerWithTimeInterval:0.03f target:self selector:@selector(timerChanged:) userInfo:nil repeats:YES]; //[timer retain]; startButton.enabled = NO; stopButton.enabled = YES;&#125;-(IBAction) stopProgress:(id)sender&#123; [timer invalidate]; //[timer release]; //timer =nil; self.progressview.progress=0.0f; self.barprogressview.progress=0.0f; startButton.enabled = YES; stopButton.enabled = NO;&#125; 这里提示一点是progress的最大值为1，最小值为0","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"Objective-c中NSString与int和float的相互转换.md","date":"2025-06-12T09:44:47.000Z","path":"2025/06/12/Objective-c中NSString与int和float的相互转换.html","text":"12NSString *tempA = @&quot;123&quot;;NSString *tempB = @&quot;456&quot;; 字符串拼接1NSString *newString = [NSString stringWithFormat:@&quot;%@%@&quot;,tempA,tempB]; 字符转int1int intString = [newString intValue]; int转字符1NSString *stringInt = [NSString stringWithFormat:@&quot;%d&quot;,intString]; 字符转float1float floatString = [newString floatValue]; float转字符1NSString *stringFloat = [NSString stringWithFormat:@&quot;%f&quot;,intString];","tags":[{"name":"Objective-c","slug":"Objective-c","permalink":"https://blog.gowhich.com/tags/Objective-c/"}]},{"title":"去掉UITableViewCell边框样式","date":"2025-06-12T09:19:10.000Z","path":"2025/06/12/去掉UITableViewCell边框样式.html","text":"方法 1:如果，UITableView的类型为UITableViewStyleGrounped，发现使用_tableView.backgroundColor = [UIColor clearColor]后，tableView的背景色仍然是默认的色，上网查了下：_tableView.backgroundView = nil;可以搞定。测试下发现确实可以，但是不知道以前的版本不确定有没有backgroundView的，所以最好加个判断吧： 1234if (mainTableView.backgroundView)&#123; mainTableView.backgroundView =nil;&#125; 如果类型为UITableViewStylePlain，[UIColor clearColor]仍然有效，怪哉！正常情况下grouped样式（UITableViewStyleGrouped）UITableViewCell都是有边框的，如果要去掉边框可以用： 123UIView *tempView = [[[UIView alloc] init] autorelease];[cell setBackgroundView:tempView];[cell setBackgroundColor:[UIColor clearColor]]; 其实很简单，把backgroundView设置为一个空的View，然后就干净了。看了下UITableViewCell的文档，backgroundView在plain-style的TableView里面是nil，在grouped-style的TableView里面并不是空的，所以这里设置空就ok了，这是目前为止我见到的最完美的解决方案。 方法 2:1[tableView setSeparatorColor:[UIColor clearColor]]; 方法 3:1cell.backgroundView = [[[UIView alloc] initWithFrame:CGRectZero] autorelease];","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"JavaScript使用console.log输出当前的行号","date":"2025-06-12T09:19:01.000Z","path":"2025/06/12/JavaScript使用console.log输出当前的行号.html","text":"看到一篇帖子，感觉写的很牛，摘抄在这里了：（代码如下） 123456789101112131415161718192021222324252627282930313233343536373839(function () &#123; if (Error.captureStackTrace &amp;&amp; Object.defineProperty) &#123; var global = window; Object.defineProperty(global, &#x27;__STACK__&#x27;, &#123; get: function () &#123; var old = Error.prepareStackTrace; Error.prepareStackTrace = function (error, stack) &#123; return stack; &#125;; var err = new Error(); Error.captureStackTrace(err, arguments.callee); Error.prepareStackTrace = old; return err.stack; &#125; &#125;); Object.defineProperty(global, &#x27;__LINE__&#x27;, &#123; get: function () &#123; return __STACK__[1].getLineNumber(); &#125; &#125;); Object.defineProperty(global, &#x27;__FILE__&#x27;, &#123; get: function () &#123; return __STACK__[1].getFileName(); &#125; &#125;); &#125;&#125;)();var test = function () &#123; console.log(__LINE__,__FILE__);&#125;;test();","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.gowhich.com/tags/JavaScript/"}]},{"title":"自定义UITableViewCell","date":"2025-06-12T09:18:57.000Z","path":"2025/06/12/自定义UITableViewCell.html","text":"自己的应用中需要一种非普通格式的cell，于是自己就定义了一下；基本上的代码类似如下： 12345678910111213141516171819202122232425static NSString *captionCellWithIdentifier = @&quot;captionCell&quot;;//使用自定义的cell模板static BOOL nibRegistered = NO;if(!nibRegistered)&#123; UINib *nib = [UINib nibWithNibName:@&quot;captionCell&quot; bundle:nil]; [self.personTable registerNib:nib forCellReuseIdentifier:captionCellWithIdentifier]; nibRegistered = YES;&#125;captionCell *cell = [self.personTable dequeueReusableCellWithIdentifier:captionCellWithIdentifier];if(cell == nil)&#123; cell = [[captionCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:captionCellWithIdentifier];&#125;cell.contentView.backgroundColor = [UIColor grayColor];cell.firstTitle.text = @&quot;3月4日 艺人新媒体指数&quot;;cell.firstTitle.textColor = [UIColor whiteColor];cell.secondTitle.text = @&quot;www.vlinkage.com&quot;;cell.secondTitle.textColor = [UIColor whiteColor];cell.selectionStyle=UITableViewCellSelectionStyleNone;return cell;","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"自定义UIBarButtonItem","date":"2025-06-12T09:18:50.000Z","path":"2025/06/12/自定义UIBarButtonItem.html","text":"因为按钮的要求，好友导航的限制，想着自己自定义一个barbuttonitem，如下 12345678910111213141516self.leftBtn = [UIButton buttonWithType:UIButtonTypeCustom];[self.leftBtn setFrame:CGRectMake(10.0, 5.0, 70.0, 30.0)];[self.leftBtn setContentHorizontalAlignment:UIControlContentHorizontalAlignmentCenter];[self.leftBtn setTitle:@&quot;返回&quot; forState:UIControlStateNormal];[self.leftBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];[self.leftBtn setTintColor:[UIColor redColor]];// [self.leftBtn setImage:[UIImage imageNamed:@&quot;back_60_30&quot;] forState:UIControlStateNormal];self.leftBtn.layer.cornerRadius = 10.0;self.leftBtn.layer.borderWidth = 1.0;[self.leftBtn addTarget:self action:@selector(returnToPrev) forControlEvents:UIControlEventTouchUpInside];[self.leftBtn setTag:1];[self.navigationBar addSubview:self.leftBtn];","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"自定义NavigationBar","date":"2025-06-12T09:18:45.000Z","path":"2025/06/12/自定义NavigationBar.html","text":"最近写app，在一个部分想自定义一下NavigationBar： 123456789self.navigationBar = [[UINavigationBar alloc] initWithFrame:CGRectMake(0.0, 0.0, width, 40.0)];[self.navigationBar setBackgroundColor:[UIColor redColor]]; self.navigationBar.tintColor = [UIColor redColor];[self.view addSubview:self.navigationBar]; UINavigationItem *navigationTitle = [[UINavigationItem alloc] initWithTitle:@&quot;艺人指数排行榜&quot;];[self.navigationBar pushNavigationItem:navigationTitle animated:NO]; 别忘记一个操作就是隐藏掉默认的navigationBar: 代码如下： 1[self.navigationController setNavigationBarHidden:YES]; 这行代码可以加到didFinishLaunchingWithOptions中，也可以加到viewDidLoad中","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"获取iphone系统版本号","date":"2025-06-12T09:18:38.000Z","path":"2025/06/12/获取iphone系统版本号.html","text":"为了使用版本号的问题，我搜了点资料，做点记录 1234567891011NSLog([[UIDevice currentDevice] name]); // Name of the phone as named by userNSLog([[UIDevice currentDevice] uniqueIdentifier]); // A GUID like stringNSLog([[UIDevice currentDevice] systemName]); // &quot;iPhone OS&quot;NSLog([[UIDevice currentDevice] systemVersion]); // &quot;2.2.1&quot;NSLog([[UIDevice currentDevice] model]); // &quot;iPhone&quot; on both devicesNSLog([[UIDevice currentDevice] localizedModel]); // &quot;iPhone&quot; on both devicesfloat version = [[[UIDevice currentDevice] systemVersion] floatValue];if (version &gt;= 4.0)&#123;// iPhone 4.0 code here&#125;","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"Finishing up a navigation transition in an unexpected state","date":"2025-06-12T09:18:35.000Z","path":"2025/06/12/Finishing-up-a-navigation-transition-in-an-unexpected-state.html","text":"我在做我的iOS应用中，遇到了这样的情况：错误代码如下： 1232013-05-13 21:46:47.985 xunYi4[31694:c07] nested pop animation can result in corrupted navigation bar2013-05-13 21:46:48.336 xunYi4[31694:c07] Finishing up a navigation transition in an unexpected state. Navigation Bar subview tree might get corrupted.2013-05-13 21:46:48.337 xunYi4[31694:c07] Unbalanced calls to begin/end appearance transitions for &lt;personViewController: 0x75a01b0&gt;. 使得我的运行的结果是，在调用pushViewConroller的时候出现了两次push，导致程序不能达到自己想要的效果，于是查找资料，最终我的解决方案是：如下： 1234personViewController *person = [[personViewController alloc] initWithNibName:@&quot;personViewController&quot; bundle:nil];[self.navigationController popToRootViewControllerAnimated:NO];person.navigationItem.title = button.titleLabel.text;[self.navigationController pushViewController:person animated:YES]; 达到了我要的效果，但是问题是这个报错的信息还是存在，请求高手给予指点","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS 将程序打包成ipa文件","date":"2025-06-12T09:18:29.000Z","path":"2025/06/12/iOS-将程序打包成ipa文件.html","text":"第一步这里需要注意，要选择真机，否则Archive 会是灰色的。点击后，系统会自动编译一次： 第二步：在你刚刚生成的程序上点击右键，并且点击Show in Finder。 第三步：在打开的窗口中选择 生成的文件 右键点击，显示包内容。 第四步：你会看到一个上面有圆圈禁止符号的图标，这是一个重要的文件，不要关闭窗口，我们一会儿的操作需要用到它。 第五步：打开iTunes 把上面一步的文件 拖拽至 iTunes 中。 第六步：右键点击iTunes中生成的文件，点击Show in Finder。 第七步，也是最后一步。现在显示的这个ipa 文件就是可以给其他机器安装的了。 如果，你安装的机器，没有在你程序的测试证书中，是不能够安装的。除非你的机器是越狱机，越狱机可以安装。","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS 改变导航栏返回按钮的标题","date":"2025-06-12T09:18:22.000Z","path":"2025/06/12/iOS-改变导航栏返回按钮的标题.html","text":"新写的App中需要使用UINavigationController对各个页面进行导航，但由于第一级页面的title较长，在进入第二级页面后返回按钮leftButtonItem的title就会变得很长，对NavigationBar空间占用很大，而且不美观，于是使用代码对leftButtonItem的title文本进行修改，无论是设置self.navigationItem.leftBarButtonItem.title = @&quot;返回&quot;;还是self.navigationItem.backBarButtonItem.title = @&quot;返回&quot;;都没有效果，title文本始终不会发生变化。到网上乱搜一通后，得到了以下解决方法，相对来说比较简单，特记录如下： 在第一级页面的viewDidLoad方法中加入以下代码： 123UIBarButtonItem *backButtonItem = [[UIBarButtonItem alloc] init];backButtonItem.title = @&quot;返回&quot;;self.navigationItem.backBarButtonItem = backButtonItem; 也就是用一个新的按钮在进行导航前将原来的返回按钮替换掉就可以了。可以如下设置 但是这样的缺点是那个按键会变成方形 可以添加图片来进行修改。 1234567891011UIBarButtonItem *backButton = [[UIBarButtonItem alloc] initWithTitle:@&quot;Back&quot; style:UIBarButtonItemStyleBordered target:self action:@selector(backToPrevious)]; self.navigationItem.leftBarButtonItem = backButton;- (void)backToPrevious&#123; [self.navigationController popViewControllerAnimated:YES];&#125; 添加图片的相关代码如下 12345678UIButton *leftButton = [[UIButtonalloc] initWithFrame:CGRectMake(0, 0, 60, 40)];[leftButton setTitle:@&quot;返回&quot;forState:UIControlStateNormal];[leftButton setImage:[UIImageimageNamed:@&quot;UINavigationBar.png&quot;] forState:UIControlStateNormal];[leftButton setImage:[UIImageimageNamed:@&quot;UINavigationBar.png&quot;] forState:UIControlStateHighlighted];[leftButton addTarget:selfaction:@selector(leftAction:) forControlEvents:UIControlEventTouchUpInside];UIBarButtonItem *leftItem = [[UIBarButtonItemalloc] initWithCustomView:leftButton];[leftButton release];self.navigationItem.leftBarButtonItem = leftItem;","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS iPhone开发中经常用到的控件尺寸大集合","date":"2025-06-12T06:39:27.000Z","path":"2025/06/12/iOS-iPhone开发中经常用到的控件尺寸大集合.html","text":"网站上搜集了一些，关于iphone的尺寸方面的资料：简单的贴到下面，喜欢的朋友可以自己查看一下： Element Size (in points) Window (including status bar) 320 x 480 pts Status Bar (How to hide the status bar) 20 pts View inside window (visible status bar) 320 x 460 Navigation Bar 44 pts Nav Bar Image&#x2F;Toolbar Image up to 20 x 20 pts (transparent PNG) Tab Bar 49 pts Tab Bar Icon up to 30 x 30 pts (transparent PNGs) Text Field 31 pts Height of a view inside a navigation bar 416 pts Height of a view inside a tab bar 411 pts Height of a view inside a navbar and a tab bar 367 pts Portrait Keyboard height 216 pts Landscape Keyboard height 140 pts Points vs. PixelsThe iPhone 4 introduced a high resolution display with twice the pixels of previous iPhones. However you don’t have to modify your code to support high-res displays; the coordinate system goes by points rather than pixels, and the dimensions in points of the screen and all UI elements remain the same.iOS 4 supports high resolution displays (like the iPhone 4 display) via the scale property on UIScreen, UIView, UIImage, and CALayer classes. If the object is displaying high-res content, its scale property is set to 2.0. Otherwise it defaults to 1.0.All you need to do to support high-res displays is to provide @2x versions of the images in your project. See the checklist for updating to iOS4 or Apple documentation for Supporting High Resolution Screens for more info.Adjusting SizesClick here to see how to adjust View Frames and Bounds.Additional References Apple Documentation: Points vs. Pixels Apple Documentation: UIBarButtonItem Class Reference says “Typically, the size of a toolbar and navigation bar image is 20 x 20 points.” Apple Documentation: UITabBarItem Class Reference says “The size of an tab bar image is typically 30 x 30 points.”","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"RDF Site Summary 1.0 Modules: Syndication（RSS联合模块）","date":"2025-06-12T03:49:47.000Z","path":"2025/06/12/RDF-Site-Summary-1.0-Modules-Syndication.html","text":"RDF Site Summary 1.0 Modules: Syndication 举个例子: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;rdf:RDF xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot; xmlns:sy=&quot;http://purl.org/rss/1.0/modules/syndication/&quot; xmlns=&quot;http://purl.org/rss/1.0/&quot;&gt; &lt;channel rdf:about=&quot;http://meerkat.oreillynet.com/?_fl=rss1.0&quot;&gt; &lt;title&gt;Meerkat&lt;/title&gt; &lt;link&gt;http://meerkat.oreillynet.com&lt;/link&gt; &lt;description&gt;Meerkat: An Open Wire Service&lt;/description&gt; &lt;sy:updatePeriod&gt;hourly&lt;/sy:updatePeriod&gt; &lt;sy:updateFrequency&gt;2&lt;/sy:updateFrequency&gt; &lt;sy:updateBase&gt;2000-01-01T12:00+00:00&lt;/sy:updateBase&gt; &lt;image rdf:resource=&quot;http://meerkat.oreillynet.com/icons/meerkat-powered.jpg&quot; /&gt; &lt;items&gt; &lt;rdf:Seq&gt; &lt;rdf:li resource=&quot;http://c.moreover.com/click/here.pl?r123&quot; /&gt; &lt;/rdf:Seq&gt; &lt;/items&gt; &lt;textinput rdf:resource=&quot;http://meerkat.oreillynet.com&quot; /&gt; &lt;/channel&gt; &lt;image rdf:about=&quot;http://meerkat.oreillynet.com/icons/meerkat-powered.jpg&quot;&gt; &lt;title&gt;Meerkat Powered!&lt;/title&gt; &lt;url&gt;http://meerkat.oreillynet.com/icons/meerkat-powered.jpg&lt;/url&gt; &lt;link&gt;http://meerkat.oreillynet.com&lt;/link&gt; &lt;/image&gt; &lt;item rdf:about=&quot;http://c.moreover.com/click/here.pl?r123&quot;&gt; &lt;title&gt;XML: A Disruptive Technology&lt;/title&gt; &lt;link&gt;http://c.moreover.com/click/here.pl?r123&lt;/link&gt; &lt;description&gt; XML is placing increasingly heavy loads on the existing technical infrastructure of the Internet. &lt;/description&gt; &lt;/item&gt; &lt;textinput rdf:about=&quot;http://meerkat.oreillynet.com&quot;&gt; &lt;title&gt;Search Meerkat&lt;/title&gt; &lt;description&gt;Search Meerkat&#x27;s RSS Database...&lt;/description&gt; &lt;name&gt;s&lt;/name&gt; &lt;link&gt;http://meerkat.oreillynet.com/&lt;/link&gt; &lt;/textinput&gt;&lt;/rdf:RDF&gt;","tags":[{"name":"RSS","slug":"RSS","permalink":"https://blog.gowhich.com/tags/RSS/"}]},{"title":"改变UITableViewCell的背景颜色","date":"2025-06-12T03:49:43.000Z","path":"2025/06/12/改变UITableViewCell的背景颜色.html","text":"最有效的解决方式是: 使用 1- (void) tableView: (UITableView *) tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath 托管函数中定义Cell的背景颜色值。(注意：cell.textLabel的背景颜色默认为white, 如有要自定义还是需另用代码来控制实现) 123- (UITableViewCell *) tableView: (UITableView *) tableView cellForRowAtIndexPath: (NSIndexPath *) indexPath &#123; [cell.contentView setBackgroundColor: [UIColor redColor] ];&#125;","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"在popViewControllerAnimated后调用函数","date":"2025-06-12T03:49:38.000Z","path":"2025/06/12/在popViewControllerAnimated后调用函数.html","text":"当你在A视图调用pushViewController:animated:，并且从B视图返回A视图的时候需要做一些操作，比如刷新数据，或者做个浏览记录的操作的时候，可以调用这个函数viewWillAppear，就可以解决问题了。 在我的实例中，我在A视图做了这个操作： 1self.navigationController.navigationBarHidden = YES; 但是在B视图我要做相反的操作 1self.navigationController.navigationBarHidden = NO; 但是在返回来的时候，问题出现了，A视图达不到我想要的效果了，似乎也继承了B视图的navigationBar不隐藏的操作，但是我需要隐藏，那么结果做这个操作就好 了： 123-(void) viewWillAppear:(BOOL)animated&#123; self.navigationController.navigationBarHidden = YES;&#125;","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"Django模板中使用CSS, JavaScript","date":"2025-06-12T03:49:32.000Z","path":"2025/06/12/Django模板中使用CSS-JavaScript.html","text":"测试环境123(r&#x27;^css/(?P&lt;path&gt;.*)$&#x27;, &#x27;django.views.static.serve&#x27;, &#123;&#x27;document_root&#x27;: &#x27;/var/www/django-demo/css&#x27;&#125;),(r&#x27;^js/(?P&lt;/path&gt;&lt;path&gt;.*)$&#x27;, &#x27;django.views.static.serve&#x27;, &#123;&#x27;document_root&#x27;: &#x27;/var/www/django-demo/js&#x27;&#125;),(r&#x27;^images/(?P&lt;/path&gt;&lt;path&gt;.*)$&#x27;, &#x27;django.views.static.serve&#x27;, &#123;&#x27;document_root&#x27;: &#x27;/var/www/django-demo/images&#x27;&#125;), 模板中使用下述方式即可： 1&lt;link href=&quot;/css/demo.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt; 注：可采用os.path.dirname(globals()[&quot;__file__&quot;])来获得当前文件所在路径，比如 1(r&#x27;^css/(?P&lt;path&gt;.*)$&#x27;, &#x27;django.views.static.serve&#x27;, &#123;&#x27;document_root&#x27;: os.path.dirname(globals()[&quot;__file__&quot;])+&#x27;/css&#x27;&#125;), 可以使用os.path.abspath()函数返回此路径的绝对路径。=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;要在django的tempalte file中引用css、js、gif等静态文件，首先一条setting.py中DEBUG开关打开。 1、在project目录下建立一个存放静态文件的目录，如：medias 2、在url.py patterns中增加一行： 1(r&#x27;^site_media/(?P&lt;path&gt;.*)$&#x27;,&#x27;django.views.static.serve&#x27;,&#123;&#x27;document_root&#x27;:settings.STATIC_PATH&#125;), 还要from django.conf import setting 3、在setting.py中加入一行： 1STATIC_PATH=&#x27;./medias&#x27; 如此设置后，就可以在template file 中引用media中存放的静态文件了，如： 1&lt;img src=&#x27;/site_media/django.gif&#x27;&gt; 线上环境在使用Django开发的Web项目中是避免不了使用css、javascript、js等静态文件的，而对于这些静态文件的处理，django官 网这样写：Django itself doesn’t serve static (media) files, such as images, style sheets, or video. It leaves that job to whichever Web server you choose.就是说django本身不处理类似于图片、样式表、视频等静态文件，它将此项工作交给了你选择的Web服务器。在网上搜索到的django项目处理静态文件的示例中，大家似乎都在使用如下的方法让django处理静态文件： 1urlpatterns += patterns(&#x27;&#x27;, (r&#x27;^static/(?P.*)$&#x27;, &#x27;django.views.static.serve&#x27;, &#123;&#x27;document_root&#x27;: settings.MEDIA_ROOT&#125;), ) 而对于django.views.static.serve方法，django官网说得很清楚：Using this method is inefficient and insecure. Do not use this in a production setting. Use this only for development.就是说这种方法是低效且不安全的，不要在生产环境使用此方法，只在开发环境使用。这时对于静态文件的处理，我们只能使用我们选择的Web服务器来处理了。比如使用nginx服务器的话，可以如下设置： 123456789101112131415161718192021222324252627282930server &#123; listen 80; ## listen for ipv4; this line is default and implied root /home/davidzhang/pythonweb/mysite/mysite; index index.html index.htm; # Make site accessible from http://localhost/ server_name local.ubuntu.python.blog.com; access_log /var/log/uwsgi/local.ubuntu.python.blog.access.log; error_log /var/log/uwsgi/local.ubuntu.python.blog.error.log; location / &#123; include uwsgi_params; uwsgi_pass unix:///tmp/mysite.socket; #uwsgi_pass 127.0.0.1:9090; &#125; location ^~ /static &#123; #^~ 与 /static之间有空格 alias /usr/local/lib/python2.7/dist-packages/Django-1.4.2-py2.7.egg/django/contrib/admin/static; &#125; location ~* ^/(css|img|js)/.*$ &#123; root /home/davidzhang/pythonweb/mysite/media; expires 12h; break; &#125; location ~ ^.+\\.(gif|jpg|png|ico|jpeg)$ &#123; expires 3d; &#125;&#125;","tags":[{"name":"CSS","slug":"CSS","permalink":"https://blog.gowhich.com/tags/CSS/"},{"name":"Django","slug":"Django","permalink":"https://blog.gowhich.com/tags/Django/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.gowhich.com/tags/JavaScript/"}]},{"title":"uWSGI启动和停止脚本","date":"2025-06-12T03:46:37.000Z","path":"2025/06/12/uwsgi启动和停止脚本.html","text":"一晚上写的shell的脚本 uwsgi启动和停止脚本（代码如下）： 12345678910111213141516171819202122232425262728293031#!/bin/bashif [ ! -n &quot;$1&quot; ]then echo &quot;Usages: sh uwsgiserver.sh [start|stop|restart]&quot; exit 0fiif [ $1 = start ]then psid=`ps aux | grep &quot;uwsgi&quot; | grep -v &quot;grep&quot; | wc -l` if [ $psid -gt 4 ] then echo &quot;uwsgi is running!&quot; exit 0 else uwsgi /etc/uwsgi.ini echo &quot;Start uwsgi service [OK]&quot; fi elif [ $1 = stop ];then killall -9 uwsgi echo &quot;Stop uwsgi service [OK]&quot;elif [ $1 = restart ];then killall -9 uwsgi /usr/bin/uwsgi --ini /etc/uwsgi.ini echo &quot;Restart uwsgi service [OK]&quot;else echo &quot;Usages: sh uwsgiserver.sh [start|stop|restart]&quot;fi","tags":[{"name":"uWSGI","slug":"uWSGI","permalink":"https://blog.gowhich.com/tags/uWSGI/"}]},{"title":"让UISearchBar上英文Cancel变成中文的正确方法(改变搜索按钮文字)","date":"2025-06-12T01:56:51.000Z","path":"2025/06/12/让UISearchBar上英文Cancel变成中文的正确方法(改变搜索按钮文字).html","text":"UISearchBar 在Xcode默认环境的工程中, 所有文字显示的是英文, 这让大家很不爽, 网上有修改Cancel键的上文字的办法, 就是取UISearchBar的子视图上的控件, 进行遍历, 个人认为这个办法不可取, 因为除了取消按钮外, 还有全选,粘贴显示的还是英文, 你是不是也要遍历一下呢? 我也做了这个操作，但是结果没有达到想要的。 正确的处理方法:点击工程名, 打开如下图界面在Localizations默认只有English这一项, 我们只需在Localizations上添加Chinese就可以了, 你还可以根据你的需要添加其他的语言. 如果用户把手机语言设成英文, 那么显示的就是英文, 设置成中文,那么显示的就是中文. 正确的解决的方法, 可以让我们节省很多事情, 不是么?","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"loaded the \"BlueView\" nib but the view outlet was not set 错误的解决办法","date":"2025-06-12T01:56:48.000Z","path":"2025/06/12/loaded-the-BlueView-nib-but-the-view-outlet-was-not-set-错误的解决办法.html","text":"解决办法： 创建控制器. File-&gt;New File-&gt;Iphone OS-&gt;Cocoa Touch Class-&gt;UIViewController subclass; 创建xib. File-&gt;New File-&gt;Iphone OS-&gt;User Interface-&gt;View XIB 绑定controller和view. 用Interface Builder打开xxx.xib, 点击Files’ Owner, 在Identity Inspector里面的Class Identity, 选择Step 1创建的控制器类, 接着拖拽File’s Owner到View中, 选择Outlets-&gt;view.先选中file’s owner(这个很重要) 来源:http://blog.csdn.net/thebesttome/article/details/7799893","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"CodeSign error: code signing is required for product type 'Application' in SDK 'iOS 5.0'","date":"2025-06-12T01:56:44.000Z","path":"2025/06/12/CodeSign-error-code-signing-is-required-for-product-type-Application-in-SDK-iOS-5.0.html","text":"解决方法如下: 选择工程－&gt;Build Settings -&gt; Code Signing -&gt; Code Signing Identity -&gt; Debug -&gt; Any ios SDK 将选项改为：iPhone Developer","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"CSS3 Gradient 学习","date":"2025-06-12T01:56:40.000Z","path":"2025/06/12/CSS3-Gradient-学习.html","text":"CSS3发布很久了，现在在国外的一些页面上常能看到他的身影，这让我羡慕已久，只可惜在国内为了兼容IE，让这一项技术受到很大的限制，很多Web前端人员都望而止步。虽然如此但还是有很多朋友在钻研CSS3在web中的应用，为了不被淘汰，我也开始向CSS3进发，争取跟上技术的前沿。从现在开始我会不断的发布一些CSS3的应用，和大家一起分享，今天我们首先要看的就是:CSS3： Gradient─CSS3渐变。 CSS3 Gradient分为linear-gradient(线性渐变)和radial-gradient(径向渐变)。而我们今天主要是针对线性渐变来剖析其具体的用法。为了更好的应用CSS3 Gradient,我们需要先了解一下目前的几种现代浏览器的内核，主流内容主要有Mozilla（熟悉的有Firefox，Flock等浏览器）、WebKit（熟悉的有Safari、Chrome等浏览器）、Opera（Opera浏览器）、Trident（讨厌的IE浏览器）。本文照常忽略IE不管，我们主要看看在Mozilla、Webkit、Opera下的应用，当然在IE下也可以实现，他需要通过IE特有的滤镜来实现，在后面会列出滤镜的使用语法，但不会具体介绍如何实用，感兴趣的可以搜索相关技术文档。那我们了解了这些，现在就开始今天的主题吧。 节选如下： CSS3的线性渐变一、线性渐变在Mozilla下的应用语法：-moz-linear-gradient( [&lt;point&gt; || &lt;angle&gt;,]? &lt;stop&gt;, &lt;stop&gt; [, &lt;stop&gt;]* )参数：其共有三个参数，第一个参数表示线性渐变的方向，top是从上到下、left是从左到右，如果定义成left top，那就是从左上角到右下角。第二个和第三个参数分别是起点颜色和终点颜色。你还可以在它们之间插入更多的参数，表示多种颜色的渐变。注：这个效果暂时只有在Mozilla内核的浏览器下才能正常显示。二、线性渐变在Webkit下的应用语法：-webkit-linear-gradient( [&lt;point&gt; || &lt;angle&gt;,]? &lt;stop&gt;, &lt;stop&gt; [, &lt;stop&gt;]* )//最新发布书写语法-webkit-gradient(&lt;type&gt;, &lt;point&gt; [, &lt;radius&gt;]?, &lt;point&gt; [, &lt;radius&gt;]? [, &lt;stop&gt;]*) //老式语法书写规则参数：-webkit-gradient是webkit引擎对渐变的实现参数，一共有五个。第一个参数表示渐变类型（type），可以是linear（线性渐变）或者radial（径向渐变）。第二个参数和第三个参数，都是一对值，分别表示渐变起点和终点。这对值可以用坐标形式表示，也可以用关键值表示，比如 left top（左上角）和left bottom（左下角）。第四个和第五个参数，分别是两个color-stop函数。color-stop函数接受两个参数，第一个表示渐变的位置，0为起点，0.5为中点，1为结束点；第二个表示该点的颜色。三、线性渐变在Opera下的应用语法：-o-linear-gradient([&lt;point&gt; || &lt;angle&gt;,]? &lt;stop&gt;, &lt;stop&gt; [, &lt;stop&gt;]); /* Opera 11.10+ */参数：-o-linear-gradient有三个参数。第一个参数表示线性渐变的方向，top是从上到下、left是从左到右，如果定义成left top，那就是从左上角到右下角。第二个和第三个参数分别是起点颜色和终点颜色。你还可以在它们之间插入更多的参数，表示多种颜色的渐变。（注：Opera支持的版本有限，本例测试都是在Opera11.1版本下，后面不在提示）。四、线性渐变在Trident (IE)下的应用语法：filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr=#1471da, endColorstr=#1C85FB);/*IE&lt;9&gt;*/ -ms-filter: &quot;progid:DXImageTransform.Microsoft.gradient (GradientType=0, startColorstr=#1471da, endColorstr=#1C85FB)&quot;;/*IE8+*/IE依靠滤镜实现渐变。startColorstr表示起点的颜色，endColorstr表示终点颜色。GradientType表示渐变类型，0为缺省值，表示垂直渐变，1表示水平渐变。 详细的自己去参考吧。 来源：http://www.w3cplus.com/content/css3-gradient","tags":[{"name":"CSS","slug":"CSS","permalink":"https://blog.gowhich.com/tags/CSS/"}]},{"title":"UINavigationController pop的三个方法","date":"2025-06-12T01:56:37.000Z","path":"2025/06/12/UINavigationController-pop的三个方法.html","text":"当我们在视图里面调用pushViewController的时候，有时间不想要这种默认的返回方式，或者也会用，但是有时候会遇到奇怪的问题，比如我就遇到了push之后没有返回按钮，或者说返回按钮消失了，不见了，因为我在rootViewController里面将navigationBar隐藏掉了，因为我想要我自己定义的navigationBar，之后在切换的视图里面就要自己定义这个但会按钮，然后给予他一个响应事件，来调用下面的类似代码，但是往往不知道返回到哪里 123[self.navigationController popToRootViewControllerAnimated:&lt;#(BOOL)#&gt;][self.navigationController popToViewController:&lt;#(UIViewController *)#&gt; animated:&lt;#(BOOL)#&gt;][self.navigationController popViewControllerAnimated:&lt;#(BOOL)#&gt;] 在我的代码中，我是希望返回到到rootViewController这个视图中，那就只有调用[self.navigationController popToRootViewControllerAnimated:&lt;#(BOOL)#&gt;] 这个方法最适合了。结果达到了我想要的效果","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"error: failed to attach to process","date":"2025-06-12T01:40:52.000Z","path":"2025/06/12/error-failed-to-attach-to-process.html","text":"解决办法的流程是： Open only XCode without opening project -&gt; Go to Window -&gt; Organizer -&gt; [ProjectName] and delete it completely -&gt; Quit XCode -&gt; Open iPhone simulator and reset settings -&gt; Quit iPhone simulator -&gt; reboot Mac -&gt; reopen XCode and run application","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"unbalanced calls to begin/end appearance transitions for uiviewcontroller的解决方法","date":"2025-06-12T01:40:47.000Z","path":"2025/06/12/unbalanced-calls-to-begin-end-appearance-transitions-for-uiviewcontroller的解决方法.html","text":"由于上个uivewcontroller的动画没做完，导致下一个的页面无法顺利压栈，这个只需要上一个页面返回的时候不要做动画就可以了。（这是其中的一种情况）， 如果不想去掉这个动画，需要做动画的操作，该怎么办呢，我这里给出一篇文章的做法，基本上都是类似的，我这里贴出地址： http://www.cfanz.cn/?c=article&amp;a=read&amp;id=23441","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"clang: error: unable to execute command: posix_spawn failed: Resource temporarily unavailable","date":"2025-06-12T01:40:43.000Z","path":"2025/06/12/clang-error-unable-to-execute-command-posix_spawn-failed-Resource-temporarily-unavailable.html","text":"Xcode下创建一个项目，但是运行的时候出现了如下的错误： 12clang: error: unable to execute command: posix_spawn failed: Resource temporarily unavailableclang: error: clang frontend command failed due to signal (use -v to see invocation) 经过查找资料，有个说明是这样的，如下： you may be running into too-low limits on the number of concurrent processes allowed on the machine. Check: 12sysctl kern.maxprocsysctl kern.maxprocperuid You can increase them with e.g.: 12sudo sysctl -w kern.maxproc=2500sudo sysctl -w kern.maxprocperuid=2500 But normally this shouldn’t be necessary if you’re building on 10.7 or higher. If you see this, check if some rogue program spawned hundreds of processes and kill them first. 我按照上面的流程执行了操作： 123456789davidzhang@davidzhang:~/command$ sysctl kern.maxprockern.maxproc: 1064davidzhang@davidzhang:~/command$ sysctl kern.maxprocperuidkern.maxprocperuid: 709davidzhang@davidzhang:~/command$ sudo sysctl -w kern.maxproc=2500Password:kern.maxproc: 1064 -&gt; 2500davidzhang@davidzhang:~/command$ sudo sysctl -w kern.maxprocperuid=2500kern.maxprocperuid: 709 -&gt; 2500 最后运行我的项目的时候，问题就解决了 查询参考资料:http://code.google.com/p/chromium/wiki/MacBuildInstructions","tags":[{"name":"Xcode","slug":"Xcode","permalink":"https://blog.gowhich.com/tags/Xcode/"}]},{"title":"ubuntu下添加开机启动项","date":"2025-06-12T01:40:39.000Z","path":"2025/06/12/Ubuntu下添加开机启动项.html","text":"这里说明，Ubuntu 中系统没有了RH系统中的 chkconfig 命令 ！可用一些小工具来管理 Ubuntu 的启动选项： 小工具 rcconf： 12#sudo apt-get rcconf#sudo apt-get install rcconf root 下运行: 1#sudo rcconf 功能更全的工具： sysv-rc-conf 12#sudo apt-get update#sudo apt-get install sysv-rc-conf 运行： 1#sudo sysv-rc-conf 也可以直接加入启动程序，例如把 /etc/init.d/red5 加入到系统自动启动列表中： 1#sudo sysv-rc-conf red5 on 其他使用方法见: google::Ubuntu::sysv-rc-conf 命令用法也可以直接修改直接改 /etc/rc0.d ~/etc/rc6.d 和 /etc/rcS.d 下的东西，S开头的表示启动，K开头的表示不启动，例如：想关闭 Red5 的开机自动启动，只需 #sudo mv /etc/rc2.d/S20red5 /etc/rc2.d/K20red5 就可以了。 Ubuntu自动启动程序首先，linux随机启动的服务程序都在&#x2F;etc&#x2F;init.d这个文件夹里，里面的文件全部都是脚本文件（脚本程序简单的说就是把要运行的程序写 到一个 文件里让系统能够按顺序执行，类似windows下的autorun.dat文件），另外在&#x2F;etc这个文件夹里还有诸如名为rc1.d, rc2.d一直到rc6.d的文件夹，这些都是linux不同的runlevel，我们一般进入的X windows多用户的运行级别是第5级，也就是rc5.d，在这个文件夹下的脚本文件就是运行第5级时要随机启动的服务程序。需要注意的是，在每个rc (1-6).d文件夹下的文件其实都是&#x2F;etc&#x2F;init.d文件夹下的文件的一个软连接（类似windows中的快捷方式），也就是说，在 &#x2F;etc&#x2F;init.d文件夹下是全部的服务程序，而每个rc(1-6).d只链接它自己启动需要的相应的服务程序！ 要启动scim (某一程序)，我们首先要知道scim程序在哪里，用locate命令可以找到，scim在&#x2F;usr&#x2F;bin&#x2F;scim这里，其中usr表 示是 属于用户的，bin在linux里表示可以执行的程序。这样，我就可以编写一个脚本程序，把它放到&#x2F;etc&#x2F;init.d里，然后在rc5.d里做一个相 应的软链接就可以了。这个脚本其实很简单，就两行： 12#!/bin/bash/usr/bin/scim 第一行是声明用什么终端运行这个脚本，第二行就是要运行的命令。还 需要注意的一点是，在rc5.d里，每个链接的名字都是以S或者K开头的，S开头的表示是系统启动是要随机启动的，K开头的是不随机启动的。这 样，你就可以知道，如果我要哪个服务随机启动，就把它名字第一个字母K改成S就可以了，当然，把S改成K后，这个服务就不能随机启动了。因此，我这个链接 还要起名为SXXX，这样系统才能让它随机启动。在RH下，rc.local是默认启动的最后一个脚本文件，所以，如果你想要随机启动，还有一种方法就是在rc.local的尾部加入&#x2F;usr&#x2F;bin&#x2F;scim，这样就可以了。 Linux 自动启动程序1．开机启动时自动运行程序Linux 加载后, 它将初始化硬件和设备驱动, 然后运行第一个进程init。init根据配置文件继续引导过程，启动其它进程。通常情况下，修改放置在 /etc/rc或 /etc/rc.d 或 /etc/rc?.d 目录下的脚本文件，可以使init自动启动其它程序。例如：编辑 /etc/rc.d/rc.local 文件(该文件通常是系统最后启动的脚本)，在文件最末加上一行“xinit”或“startx”，可以在开机启动后直接进入X－Window。2．登录时自动运行程序用 户登录时，bash首先自动执行系统管理员建立的全局登录script ：/ect/profile。然后bash在用户起始目录下按顺序查找三个特殊文件中的一个：.bash_profile、.bash_login、 .profile，但只执行最先找到的一个。因此，只需根据实际需要在上述文件中加入命令就可以实现用户登录时自动运行某些程序（类似于DOS下的Autoexec.bat）。3．退出登录时自动运行程序退出登录时，bash自动执行个人的退出登录脚本.bash_logout。例如，在.bash_logout中加入命令“tar －cvzf c.source.tgz ＊.c”，则在每次退出登录时自动执行 “tar” 命令备份 ＊.c 文件。4．定期自动运行程序Linux有一个称为crond的守护程序，主要功能是周期性地检查 /var/spool/cron目录下的一组命令文件的内容，并在设定的时间执行这些文件中的命令。用户可以通过crontab 命令来建立、修改、删除这些命令文件。例如，建立文件crondFile，内容为“00 9 23 Jan ＊ HappyBirthday”，运行“crontab cronFile”命令后，每当元月23日上午9:00系统自动执行“HappyBirthday”的程序（“＊”表示不管当天是星期几）。5．定时自动运行程序一次定时执行命令at 与crond 类似（但它只执行一次）：命令在给定的时间执行，但不自动重复。at命令的一般格式为：at [ －f file ] time ，在指定的时间执行file文件中所给出的所有命令。也可直接从键盘输入命令： 123456＄ at 12:00 at&gt;mailto Roger －s ″Have a lunch″ &lt; plan.txt at&gt;Ctr－D Job 1 at 2000－11－09 12:00 2000－11－09 12:00时候自动发一标题为“Have a lunch”，内容为plan.txt文件内容的邮件给Roger。?9 12:00 2000－11－09 12:00时候自动发一标题为“Have a lunch”，内容为plan.txt文件内容的邮件给Roger。er。ger。er。 Ubuntu 开机自动挂载windows分区要挂载NTFS格式分区，需要NTFS-3g这个软件。它短小精悍，而且功能强大。NTFS-3g是一个开源软件，它支持在Windows下面读写NTFS格式的分区。它非常的快速，同时也很安全。它支持Windows 2000、XP和2003，并且支持所有的符合POSIX标准的磁盘操作。首先要编辑sources.list 1#sudo gedit /etc/apt/sources.list Ubuntu Drapper添加： 123deb http://givre.cabspace.com/ubuntu/ dapper main main-alldeb http://ntfs-3g.sitesweetsite.info/ubuntu/ dapper main main-alldeb http://flomertens.keo.in/ubuntu/ dapper main main-all Ubuntu Edgy添加： 123deb http://givre.cabspace.com/ubuntu/ edgy maindeb http://ntfs-3g.sitesweetsite.info/ubuntu/ edgy maindeb http://flomertens.keo.in/ubuntu/ edgy main 同时必须导入GPG-Key，可以这样： 12#wget http://flomertens.keo.in/ubuntu/givre_key.asc -O- | sudo apt-key add -#wget http://givre.cabspace.com/ubuntu/givre_key.asc -O- | sudo apt-key add - 现在更新一下源： 1#sudo aptitude update 正式安装在“终端”下面运行： 1#sudo apt-get install ntfs-3g 配置NTFS-3g首先看一些硬盘分区的分区类型 1#sudo fdisk -l 现在就可以修改 /etc/fstab，来让Ubuntu启动的时候自动挂载NTFS分区了。但是首先请备份一下这个文件： 1#sudo cp /etc/fstab /etc/fstab.bak 建立挂载点，譬如挂载在 /media/windows 下面 1#sudo mkdir /media/windows 现在可以在 /etc/fstab 的后面添加 1/dev/hda1 /media/ ntfs-3g defaults,locale=zh_CN.utf8 0 0 根据自己的情况进行修改。一些示例 挂载 &#x2F;dev&#x2F;hda3添加 &#x2F;dev&#x2F;hda3 &#x2F;media&#x2F;windows ntfs-3g ro,locale&#x3D;zh_CN.utf8,uid&#x3D;1000 0 0关于自己的locale可以用下面的命令查看所有的locale#locale -a如果不想重新启动，就可以 12#sudo umount -a#sudo mount -a 最后一个挂载FAT分区的命令 1#sudo mount /dev/hda3 /media/windows/ -t vfat -o iocharset=utf8,umask=000 当然可以在&#x2F;etc&#x2F;fstab里面添加 1/dev/hda3 /media/windows vfat iocharset=utf8,umask=000 0 0 Openfire随着Ubuntu自动启动openfire缺省情况下，是不随机启动的。为了解决每次都要手工启动的麻烦，我编写了一个脚本，放在/etc/init.d目录里面 1#sudo vim /etc/init.d/openfire 内容如下： 123456789101112131415161718#!/bin/shopenfire_start()&#123;/etc/openfire/bin/openfire start&#125;openfire_stop()&#123;/etc/openfire/bin/openfire stop&#125;case $1 instart)openfire_start;;stop)openfrie_stop;;*)echo ‘Usage:openfire start|stop’;;esac 我的开机启动项设置为： 在&#x2F;etc&#x2F;rc.local中添加自己要执行的代码，如下： 1234567891011121314151617181920#!/bin/sh -e## rc.local## This script is executed at the end of each multiuser runlevel.# Make sure that the script will &quot;exit 0&quot; on success or any other# value on error.## In order to enable or disable this script just change the execution# bits.## By default this script does nothing.#启动redis服务/usr/local/bin/redis-server /etc/redis.conf#启动uwsgi/usr/local/bin/uwsgi --ini /etc/uwsgi.ini#启动tomcat/usr/tomcat/apache-tomcat-7.0.35/bin/startup.shexit 0 参考资料:http://www.cnblogs.com/ainiaa/archive/2011/12/05/2276989.html","tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://blog.gowhich.com/tags/Ubuntu/"}]},{"title":"Eclipse配置PyDev插件","date":"2025-06-12T01:40:36.000Z","path":"2025/06/12/Eclipse配置PyDev插件.html","text":"安装python解释器(略)安装PyDev首先需要去Eclipse官网下载：http://www.eclipse.org/ ，Eclipse需要JDK支持，如果Eclipse无法正常运行，请到Java官网下载JDK安装：http://www.oracle.com/technetwork/java/javase/downloads。打开Eclipse，找到Help菜单栏，进入Install New Software…选项。点击work with:输入框的旁边点击Add…，Name可以随便是什么，我输入的是PyDev，Location是 http://pydev.org/updates 点击OK。等待一下，便可以在选择栏里看到各个选项。选择PyDev，然后一路Next，进入安装路径选择界面，使用默认设置，然后 Finish。Eclipse将下载 PyDev，可以从 Eclipse任务栏中看到下载的进度。PyDev安装好后，需要重启Eclipse。 配置PyDevPyDev安装好之后，需要配置解释器。在 Eclipse 菜单栏中，选择Window &gt; Preferences &gt; Pydev &gt; Interpreter – Python，在此配置 Python。首先需要添加已安装的解释器。如果没有下载安装Python，请到官网下载2.x或者3.x版本：http://www.python.org/我使用的是Python2.7版本。单击 New，进入对话框。Interpreter Name可以随便命名，Interpreter Executable选择Python解释器&#x2F;usr&#x2F;bin&#x2F;python。点击OK后跳出一个有很多复选框的窗口，选择需要加入SYSTEM pythonpath的选项，点击Ok。然后在Python Interpreters的窗口，再次点击OK，即完成了Python解释器的配置。到此PyDev就已经完成了配置，可以使用Eclipse开始编写Python。Hola World：在 Eclipse 菜单栏中，选择File &gt; New &gt; Pydev &gt; Project…，在窗口中选择PyDev Project，有三种项目可以创建，选择PyDev Project。点击Next，输入项目名，选择相应的项目类型，以及所使用的Python语法版本和Python解释器。创建成功后，进入透视图，右击src图标，选择New-&gt;Pydev Package，创建一个新的包。系统将自动生成__init__.py 文件，该文件不包含任何内容。再右键单击创建的包，选择 New-&gt;Pydev Module，创建你一个新的Python模块，单击Finish。 这样我们就可以开始创建第一个.py文件了。 更好的方法在这个也页面 http://pydev.org/download.html ，你会看到某个软件已经预安装了这个扩展，她就是“Aptana Studio 3”","tags":[{"name":"Eclipse","slug":"Eclipse","permalink":"https://blog.gowhich.com/tags/Eclipse/"}]},{"title":"iOS 设置CGColor颜色值","date":"2025-06-12T01:35:00.000Z","path":"2025/06/12/iOS-设置CGColor颜色值.html","text":"通过Core Library的文档，我们知道创建颜色有这么几个方法： CGColorCreate CGColorCreateCopy CGColorCreateGenericGray CGColorCreateGenericRGB CGColorCreateGenericCMYK CGColorCreateCopyWithAlpha CGColorCreateWithPattern 再来看一下CGColorCreate： 1234CGColorRef CGColorCreate ( CGColorSpaceRef colorspace, const CGFloat components[] ); 我们通过CGColorCreate就可以创建颜色。既然我们要用RGB表示颜色，那么colorspace这个参数我们就可以使用CGColorSpaceCreateDeviceRGB()，而我们主要来探讨components这个参数。这个参数是一个数组，带有4个数值： float color[]&#x3D;{红色分量, 绿色分量, 蓝色分量, alpha分量}; 这4个数值都是0-1区间，0表示黑（不发光），数字越大这种颜色的光线越强，alpha分量表示透明度。比如{1.0, 0, 0,1.0}就是纯红色而且完全不透明。 最终的使用方法，如下代码： 1[UIColor colorWithRed:55.0/255.0 green:137.0/255.0 blue:195.0/255.0 alpha:1.0]; 里面的值（55.0,137.0,195.0）可以自己选择,我是通过使用photoshop自己选择的，你也可以试试","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS UIButton 做圆角效果","date":"2025-06-12T01:34:57.000Z","path":"2025/06/12/iOS-UIButton-做圆角效果.html","text":"首先引入文件：#import &lt;QuartzCore&#x2F;QuartzCore.h&gt; 再次执行类似下面的代码： 123456UIButton *moreButton = [UIButton buttonWithType:UIButtonTypeCustom];moreButton.frame = CGRectMake(1.0f, 1.0f, cell.contentView.frame.size.width-2, cell.contentView.frame.size.height-2);[moreButton.layer setMasksToBounds:YES];[moreButton.layer setCornerRadius:10.0]; //设置矩形四个圆角半径[moreButton.layer setBorderWidth:1.0]; //边框宽度moreButton.backgroundColor = [UIColor clearColor];","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS UIView之间常用视图之间切换方式","date":"2025-06-12T01:34:49.000Z","path":"2025/06/12/iOS-UIView之间常用视图之间切换方式.html","text":"在iOS开发中，经常遇到两个View之间互相切换，列举下各种方式，但是下面每种方式都要自己灵活运用，不一定就是进入下一个、后一个必须用“一”里面的方式。 进入下&#x2F;后一个ViewA:insertSubView系列：（注意，如果你新增视图不够大，则遮不住上一层视图，即前后2个视图都存在，当然你可以做透明来查看所有，与二A对应） addSubview: （常用增加视图在本View上面） bringSubviewToFront；将新视图放在其他同级视图的top位置 insertSubview:atIndex: 将新视图放在第index层，index是从底层向上数的下标位置 insertSubview:aboveSubview:将新视图放在第二个参数view的上面 insertSubview:belowSubview:将新视图放在第二个参数view的下面 exchangeSubviewAtIndex:withSubviewAtIndex:改变新视图从第一个位置到第二个位置 B:presentViewController系列：（常用视图切换,与二B对应） presentViewController:animated:completion: 弹出，出现一个新视图 可以带动画效果，完成后可以做相应的执行函数经常为nil presentModalViewController:animated: 弹出，出现一个新视图 可以带动画效果 C:UINavigationController系列：（常用导航栏视图切换，与二C对应） pushViewController:animated: 推进一个新视图到栈里，出现新视图，可以带动画效果例 pushViewController:animated: 返回上&#x2F;前一个ViewA:insertSubView系列：（注意，如果你新增视图不够大，则遮不住上一层视图，即前后2个视图都存在，当然你可以做透明来查看所有，与一A对应） sendSubviewToBack: 将新视图放在其他同级视图的behind位置 removeFromSuperview：将新视图从父视图上移除 B:presentViewController系列：（与一B对应） dismissViewControllerAnimated:completion:退出一个新视图 可以带动画效果，完成后可以做相应的执行函数经常为nil dismissModalViewControllerAnimated: 退出一个新视图 可以带动画效果 C:UINavigationController系列：（常用导航栏视图切换，与一C对应） popViewControllerAnimated: 从一个栈中退出视图，返回上一层，可以带动画效果 popToRootViewControllerAnimated:从一个栈中退出视图，返回到navigation的RootView，可以带动画效果 popToViewController:animated:从一个栈中退出视图，返回到navigation中指定的view，可以带动画效果基本上上面已经介绍完全部常用视图切换方式： UITabBarController：（需要先将几种视图在tabBar种设置好） setViewControllers:animated:设置要出现的视图 selectedViewController 设置要出现的视图 selectedIndex 设置要出现的视图下标 来源:http://blog.csdn.net/u010335966/article/details/8858172","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS 代码形式添加tabbar","date":"2025-06-12T01:34:25.000Z","path":"2025/06/12/iOS-代码形式添加tabbar.html","text":"可以直接看代码，可以直接复制，自己运行： VlinkageViewController.h(实现UITabBarDelegate) VlinkageViewController.h123456789101112131415//// VlinkageViewController.h// xunYi//// Created by david on 13-5-3.// Copyright (c) 2013年 david. All rights reserved.//#import &lt;UIKit/UIKit.h&gt;@interface VlinkageViewController : UIViewController&lt;UITabBarDelegate&gt;@property (nonatomic, retain) UITabBar *tabBar;@end VlinkageViewController.m（关键一点是要实现[self.tabBar setDelegate:self]，不然不起作用的） VlinkageViewController.m12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364//// VlinkageViewController.m// xunYi//// Created by david on 13-5-3.// Copyright (c) 2013年 david. All rights reserved.//#import &lt;QuartzCore/QuartzCore.h&gt;#import &quot;VlinkageViewController.h&quot;@interface VlinkageViewController ()@end@implementation VlinkageViewController@synthesize tabBar;- (void)viewDidLoad&#123; [super viewDidLoad]; //判断机体的宽度和高度 CGRect screenBounds = [[UIScreen mainScreen] bounds]; CGFloat width = screenBounds.size.width; CGFloat height = screenBounds.size.height;#pragma 添加tabBar CGFloat tabBarHeight = 40; CGFloat tabBarY = height - tabBarHeight - searchBar.frame.size.height / 2; self.tabBar = [[UITabBar alloc] initWithFrame: CGRectMake(0, tabBarY, width, tabBarHeight)]; [self.tabBar setDelegate:self]; //设置切换title UITabBarItem *tabBarItem1 = [[UITabBarItem alloc] initWithTitle:@&quot;查找&quot; image:nil tag:0]; UITabBarItem *tabBarItem2 = [[UITabBarItem alloc] initWithTitle:@&quot;我的关注&quot; image:nil tag:1]; UITabBarItem *tabBarItem3 = [[UITabBarItem alloc] initWithTitle:@&quot;咨询&quot; image:nil tag:2]; UITabBarItem *tabBarItem4 = [[UITabBarItem alloc] initWithTitle:@&quot;更多&quot; image:nil tag:3]; NSLog(@&quot;tabBarItem1.tag = %d&quot;,tabBarItem1.tag); NSLog(@&quot;tabBarItem1.tag = %d&quot;,tabBarItem2.tag); NSLog(@&quot;tabBarItem1.tag = %d&quot;,tabBarItem3.tag); NSLog(@&quot;tabBarItem1.tag = %d&quot;,tabBarItem4.tag); //数组形式添加进 tabBar NSArray *tabBarItemArray = [[NSArray alloc] initWithObjects:tabBarItem1, tabBarItem2, tabBarItem3, tabBarItem4, nil]; [self.tabBar setItems:tabBarItemArray]; [self.view addSubview:self.tabBar]; &#125;-(void) tabBar:(UITabBar *)tabBar didSelectItem:(UITabBarItem *)item&#123; NSLog(@&quot;item.tag= %d&quot;, item.tag);&#125;- (void)didReceiveMemoryWarning&#123; [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated.&#125;@end","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS错误之-could not load inserted library","date":"2025-06-12T01:34:19.000Z","path":"2025/06/12/iOS错误之-could-not-load-inserted-library.html","text":"最近写一个程序时,不知道怎么弄的,不能build到真机了,到模拟器没有什么问题,出现的错误是 : 研究可很长时间,也没有弄明白,在网上也着了很多资料,说是enable 了 guardmalloc 1could not load inserted library: /usr/lib/libgmalloc.dylib 在xcode里面找了很久也没有着到怎么关闭, 最后无意中 发现了关闭他的方法,问题也解决了.方法:菜单–&gt;Product—&gt;EditScheme, 左边框 有一个列表,点击 run xxx.app , 你会发现在右边 Diagnostics里 有一些checkbox, 第三行 便是 关闭 Guard Malloc,保险起见,clean 下工程,重新build 下 就ok了.","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS UITableViewCell的基本设置","date":"2025-06-11T06:00:39.000Z","path":"2025/06/11/iOS-UITableViewCell的基本设置.html","text":"系统默认的颜色设置123456//无色 cell.selectionStyle = UITableViewCellSelectionStyleNone; //蓝色 cell.selectionStyle = UITableViewCellSelectionStyleBlue; //灰色 cell.selectionStyle = UITableViewCellSelectionStyleGray; 自定义颜色和背景设置改变UITableViewCell选中时背景色： 123UIColor *color = [[UIColoralloc]initWithRed:0.0 green:0.0 blue:0.0 alpha:1];//通过RGB来定义自己的颜色cell.selectedBackgroundView = [[[UIView alloc] initWithFrame:cell.frame] autorelease]; cell.selectedBackgroundView.backgroundColor = [UIColor xxxxxx]; 自定义UITableViewCell选中时背景1cell.selectedBackgroundView = [[[UIImageView alloc] initWithImage:[UIImage imageNamed:@&quot;cellart.png&quot;]] autorelease]; 还有字体颜色 1cell.textLabel.highlightedTextColor = [UIColor xxxcolor]; [cell.textLabel setTextColor:color];//设置cell的字体的颜色 设置tableViewCell间的分割线的颜色1234567[theTableView setSeparatorColor:[UIColor xxxx ]];UITableViewCellSeparatorStyle有如下几种typedef enum &#123; UITableViewCellSeparatorStyleNone, UITableViewCellSeparatorStyleSingleLine, UITableViewCellSeparatorStyleSingleLineEtched&#125; UITableViewCellSeparatorStyle; 设置cell中字体的颜色123456789// Customize the appearance of table view cells.- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; if(0 == indexPath.row) &#123; cell.textLabel.textColor = [UIColor redColor]; cell.textLabel.highlightedTextColor = [UIColor redColor]; &#125;&#125; 定义UITableViewCell的样式12345678cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;accessoryType有如下几种typedef enum &#123; UITableViewCellAccessoryNone, UITableViewCellAccessoryDisclosureIndicator, UITableViewCellAccessoryDetailDisclosureButton, UITableViewCellAccessoryCheckmark&#125; UITableViewCellAccessoryType; 设置UITableViewCell之间分隔线的颜色1[chatTableViewsetSeparatorColor:[UIColor blueColor]]; Cell 样式1234567An enumeration for the various styles of cells.typedef enum &#123; UITableViewCellStyleDefault, UITableViewCellStyleValue1, UITableViewCellStyleValue2, UITableViewCellStyleSubtitle&#125; UITableViewCellStyle;","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS 自制tableview的cell-可任意自定义的UITableViewCell","date":"2025-06-11T06:00:35.000Z","path":"2025/06/11/iOS-自制tableview的cell-可任意自定义的UITableViewCell.html","text":"UITableView的强大更多程度上来自于可以任意自定义 UITableViewCell单元格。通常，UITableView中的Cell是动态的，在使用过程中，会创建一个Cell池，根据每个cell的高 度（即tableView:heightForRowAtIndexPath:返回值），以及屏幕高度计算屏幕中可显示几个cell。而进行自定义 TableViewCell无非是采用代码实现或采用IB编辑nib文件来实现两种方式，本文主要收集代码的方式实现各种cell自定义。 如何动态调整Cell高度12345678910111213141516171819202122232425262728293031323334353637383940414243- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123; static NSString *CellIdentifier = @&quot;Cell&quot;; UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier]; if (cell == nil) &#123; cell = [[[UITableViewCell alloc] initWithFrame:CGRectZero reuseIdentifier:CellIdentifier] autorelease]; UILabel *label = [[UILabel alloc] initWithFrame:CGRectZero]; label.tag = 1; label.lineBreakMode = UILineBreakModeWordWrap; label.highlightedTextColor = [UIColor whiteColor]; label.numberOfLines = 0; label.opaque = NO; // 选中Opaque表示视图后面的任何内容都不应该绘制 label.backgroundColor = [UIColor clearColor]; [cell.contentView addSubview:label]; [label release]; &#125; UILabel *label = (UILabel *)[cell viewWithTag:1]; NSString *text; text = [textArray objectAtIndex:indexPath.row]; CGRect cellFrame = [cell frame]; cellFrame.origin = CGPointMake(0, 0); label.text = text; CGRect rect = CGRectInset(cellFrame, 2, 2); label.frame = rect; [label sizeToFit]; if (label.frame.size.height &gt; 46) &#123; cellFrame.size.height = 50 + label.frame.size.height - 46; &#125; else &#123; cellFrame.size.height = 50; &#125; [cell setFrame:cellFrame]; return cell;&#125;- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123; UITableViewCell *cell = [self tableView:tableView cellForRowAtIndexPath:indexPath]; return cell.frame.size.height;&#125; 如何用图片自定义Table Separeator分割线一般地，利用类似[tableView setSeparatorColor:[UIColor redColor]];语句即可修改cell中间分割线的颜色。那又如何用一个图片作为分割线背景呢？可以尝试如下：方法一：先设置cell separatorColor为clear，然后把图片做的分割线添加到自定义的custom cell上。方法二：在cell里添加一个像素的imageView后将图片载入进，之后设置tableView.separatorStyle = UITableViewCellSeparatorStyleNone 自定义首行Cell与其上面导航栏间距1tableView.tableHeaderView = [[[UIView alloc] initWithFrame:CGRectMake(0,0,5,20)] autorelease]; 自定义UITableViewCell的accessory样式 默认的accessoryType属性有四种取值： UITableViewCellAccessoryNone UITableViewCellAccessoryDisclosureIndicator UITableViewCellAccessoryDetailDisclosureButton UITableViewCellAccessoryCheckmark 如果想使用自定义附件按钮的其他样式，则需使用UITableView的accessoryView属性来指定。 1234567891011121314UIButton *button;if(isEditableOrNot) &#123; UIImage *image = [UIImage imageNamed:@&quot;delete.png&quot;]; button = [UIButton buttonWithType:UIButtonTypeCustom]; CGRect frame = CGRectMake(0.0,0.0,image.size.width,image.size.height); button.frame = frame; [button setBackgroundImage:image forState:UIControlStateNormal]; button.backgroundColor = [UIColor clearColor]; cell.accessoryView = button;&#125;else&#123; button = [UIButton buttonWithType:UIButtonTypeCustom]; button.backgroundColor = [UIColor clearColor]; cell.accessoryView = button;&#125; 以上代码仅仅是定义了附件按钮两种状态下的样式，问题是现在这个自定义附件按钮的事件仍不可用。即事件还无法传递到 UITableViewDelegate的accessoryButtonTappedForRowWithIndexPath方法上。当我们在上述代码 中在加入以下语句： 1[button addTarget:self action:@selector(btnClicked:event:) forControlEvents:UIControlEventTouchUpInside]; 虽然可以捕捉到每个附件按钮的点击事件，但我们还无法进行区别到底是哪一行的附件按钮发生了点击动作！因为addTarget:方法最多允许传递两个参 数：target和event，这两个参数都有各自的用途了（target指向事件委托对象，event指向所发生的事件）。看来只依靠Cocoa框架已 经无法做到了。但我们还是可以利用event参数，在自定义的btnClicked方法中判断出事件发生在UITableView的哪一个cell上。因为UITableView有一个很关键的方法indexPathForRowAtPoint，可以根据触摸发生的位置，返回触摸发生在哪一个cell的indexPath。而且通过event对象，正好也可以获得每个触摸在视图中的位置。 123456789101112// 检查用户点击按钮时的位置，并转发事件到对应的accessory tapped事件- (void)btnClicked:(id)sender event:(id)event&#123; NSSet *touches = [event allTouches]; UITouch *touch = [touches anyObject]; CGPoint currentTouchPosition = [touch locationInView:self.tableView]; NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:currentTouchPosition]; if(indexPath != nil) &#123; [self tableView:self.tableView accessoryButtonTappedForRowWithIndexPath:indexPath]; &#125;&#125; 这样，UITableView的accessoryButtonTappedForRowWithIndexPath方法会被触发，并且获得一个indexPath参数。通过这个indexPath参数，我们即可区分到底哪一行的附件按钮发生了触摸事件。 12345- (void)tableView:(UITableView *)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)indexPath&#123; int *idx = indexPath.row; //这里加入自己的逻辑&#125; 摘自：http://www.cnblogs.com/ownerblood/archive/2012/08/02/2620173.html","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS fonts字体类型","date":"2025-06-11T06:00:29.000Z","path":"2025/06/11/iOS-fonts字体类型.html","text":"这里给出个文档的地址：http://iosfonts.com/ ，里面包括了所有的ios的字体类型库:这里贴一下吧 Academy Engraved LET AcademyEngravedLetPlain 5.0 4.3 American Typewriter AmericanTypewriter 3.0 4.3 AmericanTypewriter-Bold 3.0 4.3 AmericanTypewriter-Condensed 5.0 5.0 AmericanTypewriter-CondensedBold 5.0 5.0 AmericanTypewriter-CondensedLight 5.0 5.0 AmericanTypewriter-Light 5.0 5.0 Apple Color Emoji AppleColorEmoji 3.0 4.3 Apple SD Gothic Neo AppleSDGothicNeo-Bold 5.0 5.0 AppleSDGothicNeo-Medium 4.3 4.3 Arial ArialMT 3.0 4.3 Arial-BoldItalicMT 3.0 4.3 Arial-BoldMT 3.0 4.3 Arial-ItalicMT 3.0 4.3 Arial Hebrew ArialHebrew 3.0 4.3 ArialHebrew-Bold 3.0 4.3 Arial Rounded MT Bold ArialRoundedMTBold 3.0 4.3 Avenir Avenir-Black 6.0 6.0 Avenir-BlackOblique 6.0 6.0 Avenir-Book 6.0 6.0 Avenir-BookOblique 6.0 6.0 Avenir-Heavy 6.0 6.0 Avenir-HeavyOblique 6.0 6.0 Avenir-Light 6.0 6.0 Avenir-LightOblique 6.0 6.0 Avenir-Medium 6.0 6.0 Avenir-MediumOblique 6.0 6.0 Avenir-Oblique 6.0 6.0 Avenir-Roman 6.0 6.0 Avenir Next AvenirNext-Bold 6.0 6.0 AvenirNext-BoldItalic 6.0 6.0 AvenirNext-DemiBold 6.0 6.0 AvenirNext-DemiBoldItalic 6.0 6.0 AvenirNext-Heavy 6.0 6.0 AvenirNext-HeavyItalic 6.0 6.0 AvenirNext-Italic 6.0 6.0 AvenirNext-Medium 6.0 6.0 AvenirNext-MediumItalic 6.0 6.0 AvenirNext-Regular 6.0 6.0 AvenirNext-UltraLight 6.0 6.0 AvenirNext-UltraLightItalic 6.0 6.0 Avenir Next Condensed AvenirNextCondensed-Bold 6.0 6.0 AvenirNextCondensed-BoldItalic 6.0 6.0 AvenirNextCondensed-DemiBold 6.0 6.0 AvenirNextCondensed-DemiBoldItalic 6.0 6.0 AvenirNextCondensed-Heavy 6.0 6.0 AvenirNextCondensed-HeavyItalic 6.0 6.0 AvenirNextCondensed-Italic 6.0 6.0 AvenirNextCondensed-Medium 6.0 6.0 AvenirNextCondensed-MediumItalic 6.0 6.0 AvenirNextCondensed-Regular 6.0 6.0 AvenirNextCondensed-UltraLight 6.0 6.0 AvenirNextCondensed-UltraLightItalic 6.0 6.0 Bangla Sangam MN BanglaSangamMN 3.0 4.3 BanglaSangamMN-Bold 3.0 4.3 Baskerville Baskerville 3.0 4.3 Baskerville-Bold 3.0 4.3 Baskerville-BoldItalic 3.0 4.3 Baskerville-Italic 3.0 4.3 Baskerville-SemiBold 5.0 5.0 Baskerville-SemiBoldItalic 5.0 5.0 Bodoni Ornaments BodoniOrnamentsITCTT 5.0 4.3 Bodoni 72 BodoniSvtyTwoITCTT-Bold 5.0 4.3 BodoniSvtyTwoITCTT-Book 5.0 4.3 BodoniSvtyTwoITCTT-BookIta 5.0 4.3 Bodoni 72 Oldstyle BodoniSvtyTwoOSITCTT-Bold 5.0 4.3 BodoniSvtyTwoOSITCTT-Book 5.0 4.3 BodoniSvtyTwoOSITCTT-BookIt 5.0 4.3 BodoniSvtyTwoSCITCTT-Book 5.0 4.3 Bradley Hand BradleyHandITCTT-Bold 6.0 4.3 Chalkboard SE ChalkboardSE-Bold 3.0 4.3 ChalkboardSE-Light 5.0 5.0 ChalkboardSE-Regular 3.0 4.3 Chalkduster Chalkduster 5.0 4.3 Cochin Cochin 3.0 4.3 Cochin-Bold 3.0 4.3 Cochin-BoldItalic 3.0 4.3 Cochin-Italic 3.0 4.3 Copperplate Copperplate 5.0 4.3 Copperplate-Bold 5.0 4.3 Copperplate-Light 5.0 5.0 Courier Courier 3.0 4.3 Courier-Bold 3.0 4.3 Courier-BoldOblique 3.0 4.3 Courier-Oblique 3.0 4.3 Courier New CourierNewPS-BoldItalicMT 3.0 4.3 CourierNewPS-BoldMT 3.0 4.3 CourierNewPS-ItalicMT 3.0 4.3 CourierNewPSMT 3.0 4.3 DB LCD Temp DBLCDTempBlack 6.0 3.0 6.0 4.3 Devanagari Sangam MN DevanagariSangamMN 3.0 4.3 DevanagariSangamMN-Bold 3.0 4.3 Didot Didot 5.0 4.3 Didot-Bold 5.0 4.3 Didot-Italic 5.0 4.3 Euphemia UCAS EuphemiaUCAS 5.0 5.0 EuphemiaUCAS-Bold 5.0 5.0 EuphemiaUCAS-Italic 5.0 5.0 Futura Futura-CondensedExtraBold 3.0 4.3 Futura-CondensedMedium 5.0 5.0 Futura-Medium 3.0 4.3 Futura-MediumItalic 3.0 4.3 Geeza Pro GeezaPro 3.0 4.3 GeezaPro-Bold 3.0 4.3 Georgia Georgia 3.0 4.3 Georgia-Bold 3.0 4.3 Georgia-BoldItalic 3.0 4.3 Georgia-Italic 3.0 4.3 Gill Sans GillSans 5.0 4.3 GillSans-Bold 5.0 4.3 GillSans-BoldItalic 5.0 4.3 GillSans-Italic 5.0 4.3 GillSans-Light 5.0 5.0 GillSans-LightItalic 5.0 5.0 Gujarati Sangam MN GujaratiSangamMN 3.0 4.3 GujaratiSangamMN-Bold 3.0 4.3 Gurmukhi MN GurmukhiMN 3.0 4.3 GurmukhiMN-Bold 3.0 4.3 Heiti SC STHeitiSC-Light 3.0 4.3 STHeitiSC-Medium 3.0 4.3 Heiti TC STHeitiTC-Light 3.0 4.3 STHeitiTC-Medium 3.0 4.3 Helvetica Helvetica 3.0 4.3 Helvetica-Bold 3.0 4.3 Helvetica-BoldOblique 3.0 4.3 Helvetica-Light 5.0 5.0 Helvetica-LightOblique 5.0 5.0 Helvetica-Oblique 3.0 4.3 Helvetica Neue HelveticaNeue 3.0 4.3 HelveticaNeue-Bold 3.0 4.3 HelveticaNeue-BoldItalic 3.0 4.3 HelveticaNeue-CondensedBlack 5.0 5.0 HelveticaNeue-CondensedBold 5.0 5.0 HelveticaNeue-Italic 3.0 4.3 HelveticaNeue-Light 5.0 5.0 HelveticaNeue-LightItalic 5.0 5.0 HelveticaNeue-Medium 5.0 5.0 HelveticaNeue-UltraLight 5.0 5.0 HelveticaNeue-UltraLightItalic 5.0 5.0 Hiragino Kaku Gothic ProN HiraKakuProN-W3 3.0 4.3 HiraKakuProN-W6 5.0 4.3 Hiragino Mincho ProN HiraMinProN-W3 3.0 4.3 HiraMinProN-W6 3.0 4.3 Hoefler Text HoeflerText-Black 5.0 4.3 HoeflerText-BlackItalic 5.0 4.3 HoeflerText-Italic 5.0 4.3 HoeflerText-Regular 5.0 4.3 Kailasa Kailasa 3.0 4.3 Kailasa-Bold 3.0 4.3 Kannada Sangam MN KannadaSangamMN 3.0 4.3 KannadaSangamMN-Bold 3.0 4.3 Malayalam Sangam MN MalayalamSangamMN 3.0 4.3 MalayalamSangamMN-Bold 3.0 4.3 Marion Marion-Bold 5.0 5.0 Marion-Italic 5.0 5.0 Marion-Regular 5.0 5.0 Marker Felt MarkerFelt-Thin 3.0 4.3 MarkerFelt-Wide 3.0 4.3 Noteworthy Noteworthy-Bold 5.0 5.0 Noteworthy-Light 5.0 5.0 Optima Optima-Bold 5.0 4.3 Optima-BoldItalic 5.0 4.3 Optima-ExtraBlack 5.0 5.0 Optima-Italic 5.0 4.3 Optima-Regular 5.0 4.3 Oriya Sangam MN OriyaSangamMN 3.0 4.3 OriyaSangamMN-Bold 3.0 4.3 Palatino Palatino-Bold 3.0 4.3 Palatino-BoldItalic 3.0 4.3 Palatino-Italic 3.0 4.3 Palatino-Roman 3.0 4.3 Papyrus Papyrus 5.0 4.3 Papyrus-Condensed 3.0 5.0 Party LET PartyLetPlain 5.0 4.3 Sinhala Sangam MN SinhalaSangamMN 3.0 4.3 SinhalaSangamMN-Bold 3.0 4.3 Snell Roundhand SnellRoundhand 3.0 4.3 SnellRoundhand-Black 5.0 5.0 SnellRoundhand-Bold 3.0 4.3 Symbol Symbol 6.0 6.0 Tamil Sangam MN TamilSangamMN 3.0 4.3 TamilSangamMN-Bold 3.0 4.3 Telugu Sangam MN TeluguSangamMN 3.0 4.3 TeluguSangamMN-Bold 3.0 4.3 Thonburi Thonburi 3.0 4.3 Thonburi-Bold 3.0 4.3 Times New Roman TimesNewRomanPS-BoldItalicMT 3.0 4.3 TimesNewRomanPS-BoldMT 3.0 4.3 TimesNewRomanPS-ItalicMT 3.0 4.3 TimesNewRomanPSMT 3.0 4.3 Trebuchet MS Trebuchet-BoldItalic 3.0 4.3 TrebuchetMS 3.0 4.3 TrebuchetMS-Bold 3.0 4.3 TrebuchetMS-Italic 3.0 4.3 Verdana Verdana 3.0 4.3 Verdana-Bold 3.0 4.3 Verdana-BoldItalic 3.0 4.3 Verdana-Italic 3.0 4.3 Zapf Dingbats ZapfDingbatsITC 5.0 4.3 Zapfino Zapfino 3.0 4.3","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"关于typedef的用法总结","date":"2025-06-11T05:53:59.000Z","path":"2025/06/11/关于typedef的用法总结.html","text":"不管是在C还是C++代码中，typedef这个词都不少见，当然出现频率较高的还是在C代码中。typedef与#define有些相似，但更多的是不同，特别是在一些复杂的用法上，就完全不同了。 用途一定义一种类型的别名，而不只是简单的宏替换。可以用作同时声明指针型的多个对象。比如： 1char* pa, pb; // 这多数不符合我们的意图，它只声明了一个指向字符变量的指针，和一个字符变量； 以下则可行： 12typedef char* PCHAR;PCHAR pa, pb; 这种用法很有用，特别是char* pa, pb的定义，初学者往往认为是定义了两个字符型指针，其实不是，而用typedef char* PCHAR就不会出现这样的问题，减少了错误的发生。 用途二用在旧的C代码中，帮助struct。以前的代码中，声明struct新对象时，必须要带上struct，即形式为： struct 结构名对象名，如： 12345struct tagPOINT1&#123; int x; int y;&#125;; struct tagPOINT1 p1;而在C++中，则可以直接写：结构名对象名，即：tagPOINT1 p1; 12345typedef struct tagPOINT&#123; int x; int y;&#125;POINT; 这样就比原来的方式少写了一个struct，比较省事，尤其在大量使用的时候, 1POINT p1; 或许，在C++中，typedef的这种用途二不是很大，但是理解了它，对掌握以前的旧代码还是有帮助的，毕竟我们在项目中有可能会遇到较早些年代遗留下来的代码。 用途三用typedef来定义与平台无关的类型。比如定义一个叫 REAL 的浮点类型，在目标平台一上，让它表示最高精度的类型为： 1typedef long double REAL; 在不支持 long double 的平台二上，改为： 1typedef double REAL; 在连 double 都不支持的平台三上，改为： 1typedef float REAL; 也就是说，当跨平台时，只要改下 typedef 本身就行，不用对其他源码做任何修改。标准库就广泛使用了这个技巧，比如size_t。另外，因为typedef是定义了一种类型的新别名，不是简单的字符串替换，所以它比宏来得稳健。这个优点在我们写代码的过程中可以减少不少代码量哦！ 用途四为复杂的声明定义一个新的简单的别名。方法是：在原来的声明里逐步用别名替换一部分复杂声明，如此循环，把带变量名的部分留到最后替换，得到的就是原声明的最简化版。举例：原声明：void (*b[10]) (void (*)());变量名为b，先替换右边部分括号里的，pFunParam为别名一： 1typedef void (*pFunParam)(); 再替换左边的变量b，pFunx为别名二： 1typedef void (*pFunx)(pFunParam); 原声明的最简化版： 1pFunx b[10]; 原声明：doube(*)() (*e)[9];变量名为e，先替换左边部分，pFuny为别名一： 1typedef double(*pFuny)(); 再替换右边的变量e，pFunParamy为别名二 1typedef pFuny (*pFunParamy)[9]; 原声明的最简化版： 1pFunParamy e; 理解复杂声明可用的“右左法则”：从变量名看起，先往右，再往左，碰到一个圆括号就调转阅读的方向；括号内分析完就跳出括号，还是按先右后左的顺序，如此循环，直到整个声明分析完。举例： 1int (*func)(int *p); 首先找到变量名func，外面有一对圆括号，而且左边是一个*号，这说明func是一个指针；然后跳出这个圆括号，先看右边，又遇到圆括号，这说明(*func)是一个函数，所以func是一个指向这类函数的指针，即函数指针，这类函数具有int*类型的形参，返回值类型是int。 1int (*func[5])(int *); func右边是一个[]运算符，说明func是具有5个元素的数组；func的左边有一个*，说明func的元素是指针（注意这里的*不是修饰func，而是修饰func[5]的，原因是[]运算符优先级比*高，func先跟[]结合）。跳出这个括号，看右边，又遇到圆括号，说明func数组的元素是函数类型的指针，它指向的函数具有int*类型的形参，返回值类型为int。","tags":[{"name":"C","slug":"C","permalink":"https://blog.gowhich.com/tags/C/"}]},{"title":"Mac OS X 的安全睡眠","date":"2025-06-11T05:53:52.000Z","path":"2025/06/11/Mac-OS-X-的安全睡眠.html","text":"Mac OS X 默认是使用普通睡眠+安全睡眠（在 Windows 中称为休眠）。 安全睡眠会在计算机进入睡眠状态时把内存（RAM）中的数据保存到硬盘上的「&#x2F;private&#x2F;var&#x2F;vm&#x2F;sleepimage」文件，然后计算机才进入普通睡眠。这样做的好处是如果计算机完全没电了，那原来内存中的内容还可以从硬盘上恢复。 但这样也带来了不利之处，每当进入睡眠的时候都要写入内存容量大小的数据到硬盘上，这无疑延长了进入睡眠所需的时间（通常需要20秒-1分钟）；硬盘上还要使用内存容量大小的空间来存储睡眠文件，像笔者的 MacBook 有 4GB 的内存，那就要使用 4GB 的磁盘空间来存储睡眠文件，这对于磁盘空间比较紧张的笔记本用户来说就不太值得了。 可使用如下的命令进行查看： 1ls -lh /private/var/vm/ 可以在「应用程序-实用程序-终端」中使用以下命令禁止安全睡眠： 12$ sudo pmset -a hibernatemode 0$ sudo nvram “use-nvramrc?”=false 以上设置需要在计算机重启后才能生效。生效后就可以使用下面的命令删除睡眠文件了： 1$ sudo rm -f /private/var/vm/sleepimage 如果需要恢复安全睡眠，可以使用下面的命令： 12$ sudo pmset -a hibernatemode 3$ sudo nvram “use-nvramrc?”=true 然后重启计算机即可。","tags":[{"name":"Unix","slug":"Unix","permalink":"https://blog.gowhich.com/tags/Unix/"},{"name":"MacOS","slug":"MacOS","permalink":"https://blog.gowhich.com/tags/MacOS/"}]},{"title":"数据存储的链表操作","date":"2025-06-11T05:53:46.000Z","path":"2025/06/11/数据存储的链表操作.html","text":"链表实现数据的存储，解决数组存储数据的不便利性 实例代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768/* films2.c -- 使用结构链接表 */#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt; /* 提供malloc()原型 */#include &lt;string.h&gt; /* 提供strcpy()原型 */#define TSIZE 45 /* 存放片名的数组大小 */struct film&#123; char title[TSIZE]; int rating; struct film *next; /* 指向链表的下一个结构 */&#125;;int main(void)&#123; struct film *head = NULL; struct film *prev, *current; char input[TSIZE]; /* 手机并存数信息 */ puts(&quot;Enter first movie title: &quot;); while(gets(input) != NULL &amp;&amp; input[0] != &#x27;\\0&#x27;) &#123; current = (struct film *) malloc(sizeof(struct film)); if(head == NULL) /* 第一个结构 */ &#123; head = current; &#125; else /* 后续结构 */ &#123; prev-&gt;next = current; &#125; current-&gt;next = NULL; strcpy(current-&gt;title, input); puts(&quot;Enter your rating &lt;0-10&gt;: &quot;); scanf(&quot;%d&quot;, &amp;current-&gt;rating); while(getchar() != &#x27;\\n&#x27;) &#123; continue; &#125; puts(&quot;Enter next movie title (empty line to stop)&quot;); prev = current; &#125; /* 给出电影的列表 */ if(head == NULL) &#123; printf(&quot;No data entered. &quot;); &#125; else &#123; printf(&quot;Here is the movie list :\\n&quot;); &#125; current = head; while(current != NULL) &#123; printf(&quot;Movie: %s Rating: %d\\n&quot;,current-&gt;title,current-&gt;rating); current = current-&gt;next; &#125; /* 任务完成，因此释放所分配的内存 */ current = head; while(current != NULL) &#123; free(current); current = current-&gt;next; &#125; printf(&quot;Bye!\\n&quot;);&#125;","tags":[{"name":"C","slug":"C","permalink":"https://blog.gowhich.com/tags/C/"}]},{"title":"编译错误error","date":"2025-06-11T03:39:33.000Z","path":"2025/06/11/编译错误error.html","text":"c代码编译的错误提示： 123films1.c:15: error: stray ‘\\200’ in programfilms1.c:15: error: stray ‘\\343’ in programfilms1.c:15: error: stray ‘\\200’ in program 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041/* films1.c-- 使用结构数组 */#include &lt;stdio.h&gt;#define TSIZE 45 /*存放片名的数组大小*/#define FMAX 5 /* 对多的影片数 */struct film&#123; char title[TSIZE]; int rating;&#125;;int main(void)&#123; struct film movies[FMAX]; int i =0; int j; puts(&quot;Enter first movie title: &quot;); while(i &lt; FMAX &amp;&amp; gets(movies[i].title) != NULL &amp;&amp; movies[i].title != &#x27;\\0&#x27;) &#123; puts(&quot;Enter your rating &lt;0-10&gt;&quot;); scanf(&quot;%d&quot;,&amp;movies[i++].rating); while(getchar() != &#x27;\\n&#x27;) &#123; continue; &#125; puts(&quot;Enter next movie title (empty line to stop)&quot;); &#125; if(i == 0) &#123; printf(&quot;No data entered.&quot;); &#125; else &#123; printf(&quot;Here is the movie list: \\n&quot;); &#125; for(j=0;j&lt;i;j++) &#123; printf(&quot;Movie: %s Rating: %d \\n&quot;, movies[j].title, movies[i].rating); &#125; printf(&quot;Bye!\\n&quot;); return 0;&#125; 经过搜索，找出了问题的所在： 这个错误是由于使用了中文引号或其他全角符号，还有一种就是有中文的空格（这个不容易观察），需调到顶格处，再用tab即可。通过 cat -A可以看到捣乱的字符。解决方案可以编写脚本过滤字符，看到有人说可以用gedit的替换功能，替换为标准空格。这个方法比较省力一点。尤其是代码较多时。一行一行改的想法还是放弃吧。","tags":[{"name":"C","slug":"C","permalink":"https://blog.gowhich.com/tags/C/"}]},{"title":"CentOS FTP服务（vsftpd）配置","date":"2025-06-11T03:39:24.000Z","path":"2025/06/11/CentOS-FTP服务（vsftpd）配置.html","text":"安装一般在CentOS上都自动安装了vsftd，若没有安装则可以使用以下步骤进行安装 123yum -y install vsftpdtouch /var/log/vsftpd.log # 创建vsftp的日志文件 在CentOS中，这样就可以完成了一个简单的匿名FTP的搭建。你可以通过访问ftp://yourip 来进行，不过这个FTP没有任何权限。 基于匿名的FTP架设参考其他关于Vsftpd的CentOS FTP服务配置文章。 3.基于虚拟用户的FTP架设 所谓虚拟用户就是没有使用真实的帐户，只是通过某种手段达到映射帐户和设置权限的目的。 1）我们在&#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf中做如下CentOS FTP服务配置： anonymous_enable&#x3D;NO 设定不允许匿名访问 chroot_list_enable&#x3D;YES 使用户不能离开主目录 xferlog_file&#x3D;&#x2F;var&#x2F;log&#x2F;vsftpd.log 设定vsftpd的服务日志保存路径。注意，该文件默认不存在。必须要手动touch出来 ascii_upload_enable&#x3D;YES ascii_download_enable&#x3D;YES 设定支持ASCII模式的上传和下载功能。 local_enable&#x3D;YES 设定本地用户可以访问。注：如使用虚拟宿主用户，在该项目设定为NO的情况下所有虚拟用户将无法访问。 pam_service_name&#x3D;vsftpd PAM认证文件名。PAM将根据&#x2F;etc&#x2F;pam.d&#x2F;vsftpd进行认证 以下这些是关于Vsftpd虚拟用户支持的重要CentOS FTP服务配置项目。默认vsftpd.conf中不包含这些设定项目，需要自己手动添加CentOS FTP服务配置。 guest_enable&#x3D;YES 设定启用虚拟用户功能。 guest_username&#x3D;ftp 指定虚拟用户的宿主用户。-CentOS中已经有内置的ftp用户了 user_config_dir&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;vuser_conf 设定虚拟用户个人vsftp的CentOS FTP服务文件存放路径。存放虚拟用户个性的CentOS FTP服务文件(配置文件名&#x3D;虚拟用户名) 2）创建chroot list，将用户ftp加入其中： 123touch /etc/vsftpd/chroot_listecho ftp &gt;&gt; /etc/vsftpd/chroot_list 3）进行认证： 首先，安装Berkeley DB工具，很多人找不到db_load的问题就是没有安装这个包。 1yum install db4 db4-utils 然后，创建用户密码文本&#x2F;etc&#x2F;vsftpd&#x2F;vuser_passwd.txt ，注意奇行是用户名，偶行是密码 ftpuser1ftppass1ftpuser2ftppass2 接着，生成虚拟用户认证的db文件 1db_load -T -t hash -f /etc/vsftpd/vuser_passwd.txt /etc/vsftpd/vuser_passwd.db 随后，编辑认证文件&#x2F;etc&#x2F;pam.d&#x2F;vsftpd，全部注释掉原来语句再增加以下两句 12auth required pam_userdb.so db=/etc/vsftpd/vuser_passwdaccount required pam_userdb.so db=/etc/vsftpd/vuser_passwd 最后，创建虚拟用户个性CentOS FTP服务文件 12mkdir /etc/vsftpd/vuser_conf/vi /etc/vsftpd/vuser_conf/ftpuser1 内容如下： 1234567local_root=/opt/var/ftp1 虚拟用户的根目录(根据实际修改)write_enable=YES 可写anon_umask=022 掩码anon_world_readable_only=NOanon_upload_enable=YESanon_mkdir_write_enable=YESanon_other_write_enable=YES 启动vsftp服务器123mkdir /opt/var/ftp/ftpuser1chmod 777 /opt/var/ftp/ftpuser1service vsftpd start 常见错误：553 Could not create file一般都是SELinux的问题，设置SELinux的一个值，重启服务器即可。 12setsebool -P ftpd_disable_trans 1service vsftpd restart 500 OOPS: bad bool value in config file for: write_enable注意你的CentOS FTP服务文件中保证每一行最后没有任何空格，一般出错就是在多余的空格上。更改端口号：listen_port&#x3D;端口号 （需要自己添加）欢迎信息：ftpd_banner&#x3D;欢迎信息=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;权限问题：当virtual_use_local_privs&#x3D;YES时，虚拟用户和本地用户有相同的权限；当virtual_use_local_privs&#x3D;NO时，虚拟用户和匿名用户有相同的权限，默认是NO。当virtual_use_local_privs&#x3D;YES，write_enable&#x3D;YES时，虚拟用户具有写权限（上传、下载、删除、重命名）。当virtual_use_local_privs&#x3D;NO，write_enable&#x3D;YES，anon_world_readable_only&#x3D;YES，anon_upload_enable&#x3D;YES时，虚拟用户不能浏览目录，只能上传文件，无其他权限。当virtual_use_local_privs&#x3D;NO，write_enable&#x3D;YES，anon_world_readable_only&#x3D;NO，anon_upload_enable&#x3D;NO时，虚拟用户只能下载文件，无其他权限。当virtual_use_local_privs&#x3D;NO，write_enable&#x3D;YES，anon_world_readable_only&#x3D;NO，anon_upload_enable&#x3D;YES时，虚拟用户只能上传和下载文件，无其他权限。当virtual_use_local_privs&#x3D;NO，write_enable&#x3D;YES，anon_world_readable_only&#x3D;NO，anon_mkdir_write_enable&#x3D;YES时，虚拟用户只能下载文件和创建文件夹，无其他权限。当virtual_use_local_privs&#x3D;NO，write_enable&#x3D;YES，anon_world_readable_only&#x3D;NO，anon_other_write_enable&#x3D;YES时，虚拟用户只能下载、删除和重命名文件，无其他权限。一些RadHat版本是默认打开SeLinux的。这个东西有加强安全性的同时很讨厌，比如让配置好的vsftpd无法正常登录。 1#setsebool -P ftpd_disable_trans 1 重启FTP服务~IP限制的方法 vsftpd中的配置需要 tcp_wrappers&#x3D;YES &#x2F;etc&#x2F;hosts.allow 中加入允许的IP 1vsftpd : IP1 IP2 : allow &#x2F;etc&#x2F;hosts.deny 中屏蔽所有IP 1vsftpd : ALL : deny 重启服务 service xinetd restart （此服务应该开机启动！） 来源：http://blog.sina.com.cn/s/blog\\_50e52c230100l9sx.html","tags":[{"name":"CentOS","slug":"CentOS","permalink":"https://blog.gowhich.com/tags/CentOS/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.gowhich.com/tags/Linux/"}]},{"title":"iOS UIButton学习","date":"2025-06-11T03:31:49.000Z","path":"2025/06/11/iOS-UIButton学习.html","text":"本文实现的是一个不用拖控件，而是用代码写出一个按钮，然后点击弹出一个警告信息，有人问那么好的IB工具不用却去苦逼的写代码呢？因为IB高度集成开发工具，拖出的控件帮我省了很大麻烦，这个过程农民工也可以干，但是作为初学者，IB是个比较高层的东西，我们是不是应该了解一下IB底层的东西呢，如果一味追求方便快捷，哪天突然有人问怎么用代码写出来，咱岂不是要被鄙视了；所以吧，初学者不要学懒，多写代码提高我们的编程能力，当我们在开发项目或者在公司工作去用IB，来帮我们节省时间提高效率； 初始化视图代码，绘制了一个距原点(100,100)的140x50像素的按钮，有一点需要注意的是iphone的远点坐标是在左上角，屏幕640x480像素，不过现在用个是Retina分辨率，画质更加细腻； 123456789101112131415161718192021222324252627282930- (void)viewDidLoad&#123; [super viewDidLoad]; //设置按钮类型，此处为圆角按钮 UIButton *writeButton = [UIButton buttonWithType:UIButtonTypeRoundedRect]; //设置和大小 CGRect frame = CGRectMake(100.0f, 100.0f, 140.0f, 50.0f); //将frame的位置大小复制给Button writeButton.frame = frame; //给Button添加标题 [writeButton setTitle:@&quot;代码按钮&quot; forState:UIControlStateNormal]; //设置按钮背景颜色 writeButton.backgroundColor = [UIColor clearColor]; //设置按钮标题文字对齐方式，此处为左对齐 writeButton.contentHorizontalAlignment =UIControlContentHorizontalAlignmentLeft; //使文字距离做边框保持10个像素的距离。 writeButton.contentEdgeInsets = UIEdgeInsetsMake(0,30, 0, 0); //此处类容目的掩饰代码代码操作按钮一些属性，如果设置按钮背景为图片可以将此处注释取消，注释掉上没横线范围类代码，进行测试 //设置按钮背景图片 UIImage *image= [UIImage imageNamed:@&quot;background.png&quot;]; [writeButton setBackgroundImage:image forState:UIControlStateNormal]; //按钮的相应事件 [writeButton addTarget:self action:@selector(buttonClicked:)forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:writeButton]; UIButton *writeButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];&#125; 设置按钮类型，按钮类型定义在一个枚举类型中 12345678typedef enum &#123; UIButtonTypeCustom = 0, // 没有风格 UIButtonTypeRoundedRect, // 圆角风格按钮 UIButtonTypeDetailDisclosure, // 详情信息按钮 UIButtonTypeInfoLight, // 明亮背景的信息按钮 UIButtonTypeInfoDark, // 黑暗背景的信息按钮 UIButtonTypeContactAdd, // 添加按钮&#125; UIButtonType; 但是考虑的ios开发中，为了界面美观一般设置背景图片，代替按钮的标题设置，此处推荐一个所搜icon的网址，里面有基本用的icon素材，个人觉得不错，给分享下 http://www.easyicon.cn/ 点击打开链接 （已经不存在了）； 在点击按钮是按钮是凹下去，然后弹起才触发起事件，按钮的状态有： 123456789UIControlEventTouchDown // 按下 UIControlEventTouchDownRepeat // 多次按下 UIControlEventTouchDragInside // 保持按下然后在按钮及其一定的外围拖动UIControlEventTouchDragOutside // 保持按下,在按钮外面拖动UIControlEventTouchDragEnter // DragOutside进入DragInside触发UIControlEventTouchDragExit // in到out触发UIControlEventTouchUpInside // 在按钮及其一定外围内松开UIControlEventTouchUpOutside // 按钮外面松开UIControlEventTouchCancel // 点击取消 弹出一个警告，一般都这样写 12345-(void) buttonClicked:(id)sender&#123; UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;提示&quot; message:@&quot;你点击了一个按钮&quot; delegate:self cancelButtonTitle:@&quot;OK&quot; otherButtonTitles: nil]; [alert show];&#125; 此处弹出的一个警告，主要用到UIAlertView这个类，initWithTitle初始化标题，message是弹出警告类容，提示你做了什么事，delegate是委托代理，此处不需要其他类做什么事，自个完全能搞定，所以设置为self，类似于C++中的this指针，cancelButtonTitle这个一看就能明白，取消按钮的标题是什么了，otherButtonTitles设置其他按钮，也就是说你需要更多按钮支持的时候，此处不需要，只要一个nil就好了，就如还需要其他的，你可以添加代码假如：otherButtonTitles:@”test1”,@”test2”,@”test3”,@”test4”,nil","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS LLDB和GDB的区别","date":"2025-06-11T03:31:45.000Z","path":"2025/06/11/iOS-LLDB和GDB的区别.html","text":"在iOS开发过程中，会遇到这样的问题，就是调试。但是在对于一个初学者的方式是，去搜索，搜索来的结果大部分都是gdb的命令（command），但是我的xcode显示的是lldb，这就难道我了。于是我在搜索lldb和gdb就出结果了。其实是有对照表的，下面给出链接 http://lldb.llvm.org/lldb-gdb.html GDB to LLDB Command MapBelow is a table of GDB commands with the LLDB counterparts. The built in GDB-compatibility aliases in LLDB are also listed. The full lldb command names are often long, but any unique short form can be used. Instead of “breakpoint set“, “br se“ is also acceptable. Execution Commands GDB LLDB Launch a process no arguments. (gdb) run (gdb) r (lldb) process launch (lldb) run (lldb) r Launch a process with arguments. (gdb) run (gdb) r (lldb) process launch – (lldb) r Launch a process for with arguments a.out 1 2 3 without having to supply the args every time. % gdb –args a.out 1 2 3 (gdb) run … (gdb) run … % lldb – a.out 1 2 3 (lldb) run … (lldb) run … Launch a process with arguments in new terminal window (Mac OS X only). (lldb) process launch –tty – (lldb) pro la -t – Launch a process with arguments in existing terminal &#x2F;dev&#x2F;ttys006 (Mac OS X only). (lldb) process launch –tty&#x3D;&#x2F;dev&#x2F;ttys006 – (lldb) pro la -t&#x2F;dev&#x2F;ttys006 – Set environment variables for process before launching. (gdb) set env DEBUG 1 (lldb) settings set target.env-vars DEBUG&#x3D;1 (lldb) set se target.env-vars DEBUG&#x3D;1 (lldb) env DEBUG&#x3D;1 Set environment variables for process and launch process in one command. (lldb) process launch -v DEBUG&#x3D;1 Attach to a process with process ID 123. (gdb) attach 123 (lldb) process attach –pid 123 (lldb) attach -p 123 Attach to a process named “a.out”. (gdb) attach a.out (lldb) process attach –name a.out (lldb) pro at -n a.out Wait for a process named “a.out” to launch and attach. (gdb) attach -waitfor a.out (lldb) process attach –name a.out –waitfor (lldb) pro at -n a.out -w Attach to a remote gdb protocol server running on system “eorgadd”, port 8000. (gdb) target remote eorgadd:8000 (lldb) gdb-remote eorgadd:8000 Attach to a remote gdb protocol server running on the local system, port 8000. (gdb) target remote localhost:8000 (lldb) gdb-remote 8000 Attach to a Darwin kernel in kdp mode on system “eorgadd”. (gdb) kdp-reattach eorgadd (lldb) kdp-remote eorgadd Do a source level single step in the currently selected thread. (gdb) step (gdb) s (lldb) thread step-in (lldb) step (lldb) s Do a source level single step over in the currently selected thread. (gdb) next (gdb) n (lldb) thread step-over (lldb) next (lldb) n Do an instruction level single step in the currently selected thread. (gdb) stepi (gdb) si (lldb) thread step-inst (lldb) si Do an instruction level single step over in the currently selected thread. (gdb) nexti (gdb) ni (lldb) thread step-inst-over (lldb) ni Step out of the currently selected frame. (gdb) finish (lldb) thread step-out (lldb) finish Return immediately from the currently selected frame, with an optional return value. (gdb) return (lldb) thread return Backtrace and disassemble every time you stop. (lldb) target stop-hook add Enter your stop hook command(s). Type ‘DONE’ to end. &gt; bt &gt; disassemble –pc &gt; DONE Stop hook #1 added. Breakpoint Commands GDB LLDB Set a breakpoint at all functions named main. (gdb) break main (lldb) breakpoint set –name main (lldb) br s -n main (lldb) b main Set a breakpoint in file test.c at line 12. (gdb) break test.c:12 (lldb) breakpoint set –file test.c –line 12 (lldb) br s -f test.c -l 12 (lldb) b test.c:12 Set a breakpoint at all C++ methods whose basename is main. (gdb) break main (Hope that there are no C funtions named main). (lldb) breakpoint set –method main (lldb) br s -M main Set a breakpoint at and object C function: -[NSString stringWithFormat:]. (gdb) break -[NSString stringWithFormat:] (lldb) breakpoint set –name “-[NSString stringWithFormat:]” (lldb) b -[NSString stringWithFormat:] Set a breakpoint at all Objective C methods whose selector is count. (gdb) break count (Hope that there are no C or C++ funtions named count). (lldb) breakpoint set –selector count (lldb) br s -S count Set a breakpoint by regular expression on function name. (gdb) rbreak regular-expression (lldb) breakpoint set –func-regex regular-expression (lldb) br s -r regular-expression Ensure that breakpoints by file and line work for #included .c&#x2F;.cpp&#x2F;.m files. (gdb) b foo.c:12 (lldb) settings set target.inline-breakpoint-strategy always (lldb) br s -f foo.c -l 12 Set a breakpoint by regular expression on source file contents. (gdb) shell grep -e -n pattern source-file (gdb) break source-file:CopyLineNumbers (lldb) breakpoint set –source-pattern regular-expression –file SourceFile (lldb) br s -p regular-expression -f file List all breakpoints. (gdb) info break (lldb) breakpoint list (lldb) br l Delete a breakpoint. (gdb) delete 1 (lldb) breakpoint delete 1 (lldb) br del 1 Watchpoint Commands GDB LLDB Set a watchpoint on a variable when it is written to. (gdb) watch global_var (lldb) watchpoint set variable global_var (lldb) wa s v global_var Set a watchpoint on a memory location when it is written into. The size of the region to watch for defaults to the pointer size if no ‘-x byte_size’ is specified. This command takes raw input, evaluated as an expression returning an unsigned integer pointing to the start of the region, after the ‘–’ option terminator. (gdb) watch -location g_char_ptr (lldb) watchpoint set expression – my_ptr (lldb) wa s e – my_ptr Set a condition on a watchpoint. (lldb) watch set var global (lldb) watchpoint modify -c ‘(global&#x3D;&#x3D;5)’ (lldb) c … (lldb) bt * thread #1: tid &#x3D; 0x1c03, 0x0000000100000ef5 a.outmodify + 21 at main.cpp:16, stop reason = watchpoint 1 frame #0: 0x0000000100000ef5 a.outmodify + 21 at main.cpp:16 frame #1: 0x0000000100000eac a.outmain + 108 at main.cpp:25 frame #2: 0x00007fff8ac9c7e1 libdyld.dylibstart + 1 (lldb) frame var global (int32_t) global &#x3D; 5 List all watchpoints. (gdb) info break (lldb) watchpoint list (lldb) watch l Delete a watchpoint. (gdb) delete 1 (lldb) watchpoint delete 1 (lldb) watch del 1 Examining Variables GDB LLDB Show the arguments and local variables for the current frame. (gdb) info args and (gdb) info locals (lldb) frame variable (lldb) fr v Show the local variables for the current frame. (gdb) info locals (lldb) frame variable –no-args (lldb) fr v -a Show the contents of local variable “bar”. (gdb) p bar (lldb) frame variable bar (lldb) fr v bar (lldb) p bar Show the contents of local variable “bar” formatted as hex. (gdb) p&#x2F;x bar (lldb) frame variable –format x bar (lldb) fr v -f x bar Show the contents of global variable “baz”. (gdb) p baz (lldb) target variable baz (lldb) ta v baz Show the global&#x2F;static variables defined in the current source file. n&#x2F;a (lldb) target variable (lldb) ta v Display a the variable “argc” and “argv” every time you stop. (gdb) display argc (gdb) display argv (lldb) target stop-hook add –one-liner “frame variable argc argv” (lldb) ta st a -o “fr v argc argv” (lldb) display argc (lldb) display argv Display a the variable “argc” and “argv” only when you stop in the function named main. (lldb) target stop-hook add –name main –one-liner “frame variable argc argv” (lldb) ta st a -n main -o “fr v argc argv” Display the variable “*this” only when you stop in c class named MyClass. (lldb) target stop-hook add –classname MyClass –one-liner “frame variable *this” (lldb) ta st a -c MyClass -o “fr v *this” Evaluating expressions GDB LLDB Evaluating a generalized expression in the current frame. (gdb) print (int) printf (“Print nine: %d.”, 4 + 5) or if you don’t want to see void returns: (gdb) call (int) printf (“Print nine: %d.”, 4 + 5) (lldb) expr (int) printf (“Print nine: %d.”, 4 + 5) or using the print alias: (lldb) print (int) printf (“Print nine: %d.”, 4 + 5) Creating and assigning a value to a convenience variable. (gdb) set $foo &#x3D; 5 (gdb) set variable $foo &#x3D; 5 or using the print command (gdb) print $foo &#x3D; 5 or using the call command (gdb) call $foo &#x3D; 5 and if you want to specify the type of the variable: (gdb) set $foo &#x3D; (unsigned int) 5 In lldb you evaluate a variable declaration expression as you would write it in C: (lldb) expr unsigned int $foo &#x3D; 5 Printing the ObjC “description” of an object. (gdb) po [SomeClass returnAnObject] (lldb) expr -o – [SomeClass returnAnObject] or using the po alias: (lldb) po [SomeClass returnAnObject] Print the dynamic type of the result of an expression. (gdb) set print object 1 (gdb) p someCPPObjectPtrOrReference only works for C++ objects. (lldb) expr -d 1 – [SomeClass returnAnObject] (lldb) expr -d 1 – someCPPObjectPtrOrReference or set dynamic type printing to be the default: (lldb) settings set target.prefer-dynamic run-target Calling a function so you can stop at a breakpoint in the function. (gdb) set unwindonsignal 0 (gdb) p function_with_a_breakpoint() (lldb) expr -i 0 – function_with_a_breakpoint() Calling a function that crashes, and stopping when the function crashes. (gdb) set unwindonsignal 0 (gdb) p function_which_crashes() (lldb) expr -u 0 – function_which_crashes() Examining Thread State GDB LLDB Show the stack backtrace for the current thread. (gdb) bt (lldb) thread backtrace (lldb) bt Show the stack backtraces for all threads. (gdb) thread apply all bt (lldb) thread backtrace all (lldb) bt all Backtrace the first five frames of the current thread. (gdb) bt 5 (lldb) thread backtrace -c 5 (lldb) bt 5 (lldb-169 and later) (lldb) bt -c 5 (lldb-168 and earlier) Select a different stack frame by index for the current thread. (gdb) frame 12 (lldb) frame select 12 (lldb) fr s 12 (lldb) f 12 List information about the currently selected frame in the current thread. (lldb) frame info Select the stack frame that called the current stack frame. (gdb) up (lldb) up (lldb) frame select –relative&#x3D;1 Select the stack frame that is called by the current stack frame. (gdb) down (lldb) down (lldb) frame select –relative&#x3D;-1 (lldb) fr s -r-1 Select a different stack frame using a relative offset. (gdb) up 2 (gdb) down 3 (lldb) frame select –relative 2 (lldb) fr s -r2 (lldb) frame select –relative -3 (lldb) fr s -r-3 Show the general purpose registers for the current thread. (gdb) info registers (lldb) register read Write a new decimal value ‘123’ to the current thread register ‘rax’. (gdb) p $rax &#x3D; 123 (lldb) register write rax 123 Skip 8 bytes ahead of the current program counter (instruction pointer). Note that we use backticks to evaluate an expression and insert the scalar result in LLDB. (gdb) jump *$pc+8 (lldb) register write pc $pc+8 Show the general purpose registers for the current thread formatted as signed decimal. LLDB tries to use the same format characters as printf(3) when possible. Type “help format” to see the full list of format specifiers. (lldb) register read –format i (lldb) re r -f i LLDB now supports the GDB shorthand format syntax but there can’t be space after the command: (lldb) register read&#x2F;d Show all registers in all register sets for the current thread. (gdb) info all-registers (lldb) register read –all (lldb) re r -a Show the values for the registers named “rax”, “rsp” and “rbp” in the current thread. (gdb) info all-registers rax rsp rbp (lldb) register read rax rsp rbp Show the values for the register named “rax” in the current thread formatted as binary. (gdb) p&#x2F;t $rax (lldb) register read –format binary rax (lldb) re r -f b rax LLDB now supports the GDB shorthand format syntax but there can’t be space after the command: (lldb) register read&#x2F;t rax (lldb) p&#x2F;t $rax Read memory from address 0xbffff3c0 and show 4 hex uint32_t values. (gdb) x&#x2F;4xw 0xbffff3c0 (lldb) memory read –size 4 –format x –count 4 0xbffff3c0 (lldb) me r -s4 -fx -c4 0xbffff3c0 (lldb) x -s4 -fx -c4 0xbffff3c0 LLDB now supports the GDB shorthand format syntax but there can’t be space after the command: (lldb) memory read&#x2F;4xw 0xbffff3c0 (lldb) x&#x2F;4xw 0xbffff3c0 (lldb) memory read –gdb-format 4xw 0xbffff3c0 Read memory starting at the expression “argv[0]”. (gdb) x argv[0] (lldb) memory read argv[0] NOTE: any command can inline a scalar expression result (as long as the target is stopped) using backticks around any expression: (lldb) memory read –size sizeof(int) argv[0] Read 512 bytes of memory from address 0xbffff3c0 and save results to a local file as text. (gdb) set logging on (gdb) set logging file &#x2F;tmp&#x2F;mem.txt (gdb) x&#x2F;512bx 0xbffff3c0 (gdb) set logging off (lldb) memory read –outfile &#x2F;tmp&#x2F;mem.txt –count 512 0xbffff3c0 (lldb) me r -o&#x2F;tmp&#x2F;mem.txt -c512 0xbffff3c0 (lldb) x&#x2F;512bx -o&#x2F;tmp&#x2F;mem.txt 0xbffff3c0 Save binary memory data starting at 0x1000 and ending at 0x2000 to a file. (gdb) dump memory &#x2F;tmp&#x2F;mem.bin 0x1000 0x2000 (lldb) memory read –outfile &#x2F;tmp&#x2F;mem.bin –binary 0x1000 0x1200 (lldb) me r -o &#x2F;tmp&#x2F;mem.bin -b 0x1000 0x1200 Get information about a specific heap allocation (available on Mac OS X only). (gdb) info malloc 0x10010d680 (lldb) script import lldb.macosx.heap (lldb) process launch –environment MallocStackLogging&#x3D;1 – [ARGS] (lldb) malloc_info –stack-history 0x10010d680 Get information about a specific heap allocation and cast the result to any dynamic type that can be deduced (available on Mac OS X only) (lldb) script import lldb.macosx.heap (lldb) malloc_info –type 0x10010d680 Find all heap blocks that contain a pointer specified by an expression EXPR (available on Mac OS X only). (lldb) script import lldb.macosx.heap (lldb) ptr_refs EXPR Find all heap blocks that contain a C string anywhere in the block (available on Mac OS X only). (lldb) script import lldb.macosx.heap (lldb) cstr_refs CSTRING Disassemble the current function for the current frame. (gdb) disassemble (lldb) disassemble –frame (lldb) di -f Disassemble any functions named main. (gdb) disassemble main (lldb) disassemble –name main (lldb) di -n main Disassemble an address range. (gdb) disassemble 0x1eb8 0x1ec3 (lldb) disassemble –start-address 0x1eb8 –end-address 0x1ec3 (lldb) di -s 0x1eb8 -e 0x1ec3 Disassemble 20 instructions from a given address. (gdb) x&#x2F;20i 0x1eb8 (lldb) disassemble –start-address 0x1eb8 –count 20 (lldb) di -s 0x1eb8 -c 20 Show mixed source and disassembly for the current function for the current frame. n&#x2F;a (lldb) disassemble –frame –mixed (lldb) di -f -m Disassemble the current function for the current frame and show the opcode bytes. n&#x2F;a (lldb) disassemble –frame –bytes (lldb) di -f -b Disassemble the current source line for the current frame. n&#x2F;a (lldb) disassemble –line (lldb) di -l Executable and Shared Library Query Commands GDB LLDB List the main executable and all dependent shared libraries. (gdb) info shared (lldb) image list Look up information for a raw address in the executable or any shared libraries. (gdb) info symbol 0x1ec4 (lldb) image lookup –address 0x1ec4 (lldb) im loo -a 0x1ec4 Look up functions matching a regular expression in a binary. (gdb) info function &lt;FUNC_REGEX&gt; This one finds debug symbols: (lldb) image lookup -r -n &lt;FUNC_REGEX&gt; This one finds non-debug symbols: (lldb) image lookup -r -s &lt;FUNC_REGEX&gt; Provide a list of binaries as arguments to limit the search. Find full souce line information. (gdb) info line 0x1ec4 This one is a bit messy at present. Do: (lldb) image lookup -v –address 0x1ec4 and look for the LineEntry line, which will have the full source path and line range information. Look up functions matching a regular expression in a binary. (gdb) info function &lt;FUNC_REGEX&gt; This one finds debug symbols: (lldb) image lookup -r -n &lt;FUNC_REGEX&gt; This one finds non-debug symbols: (lldb) image lookup -r -s &lt;FUNC_REGEX&gt; Provide a list of binaries as arguments to limit the search. Look up information for an address in a.out only. (lldb) image lookup –address 0x1ec4 a.out (lldb) im loo -a 0x1ec4 a.out Look up information for for a typePointby name. (gdb) ptype Point (lldb) image lookup –type Point (lldb) im loo -t Point Dump all sections from the main executable and any shared libraries. (gdb) maintenance info sections (lldb) image dump sections Dump all sections in the a.out module. (lldb) image dump sections a.out Dump all symbols from the main executable and any shared libraries. (lldb) image dump symtab Dump all symbols in a.out and liba.so. (lldb) image dump symtab a.out liba.so Miscellaneous GDB LLDB Echo text to the screen. (gdb) echo Here is some text\\n (lldb) script print “Here is some text” Remap source file pathnames for the debug session. If your source files are no longer located in the same location as when the program was built — maybe the program was built on a different computer — you need to tell the debugger how to find the sources at their local file path instead of the build system’s file path. (gdb) set pathname-substitutions &#x2F;buildbot&#x2F;path &#x2F;my&#x2F;path (lldb) settings set target.source-map &#x2F;buildbot&#x2F;path &#x2F;my&#x2F;path Supply a catchall directory to search for source files in. (gdb) directory &#x2F;my&#x2F;path (No equivalent command yet.) 做个备份吧，呵呵，希望没有侵权","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS Objective-C EXC_BAD_ACCESS问题","date":"2025-06-11T03:27:15.000Z","path":"2025/06/11/iOS-Objective-C-EXC_BAD_ACCESS问题.html","text":"写程序遇到 Bug 并不可怕，大部分的问题，通过简单的 Log 或者 代码分析并不难找到原因所在。但是在 Objective-C 编程中遇到 EXC_BAD_ACCESS 问题的时候，通过简单常规的手段很难发现问题。写程序遇到 Bug 并不可怕，大部分的问题，通过简单的 Log 或者 代码分析并不难找到原因所在。但是在 Objective-C 编程中遇到 EXC_BAD_ACCESS 问题的时候，通过简单常规的手段很难发现问题。这篇文章，给大家介绍一个常用的查找 EXC_BAD_ACCESS 问题根源的方法。首先说一下 EXC_BAD_ACCESS 这个错误，可以这么说，90%的错误来源在于对一个已经释放的对象进行release操作。Objective-C 这段代码有三个致命问题：1、内存泄露；2、错误释放；3、造成 EXC_BAD_ACCESS 错误。 1， NSString* s &#x3D; [[NSString alloc]initWithString:@”This is a test string”]; 创建了一个 NSString Object，随后的 s &#x3D; [s substringFromIndex:[s rangeOfString:@”a”].location]; 执行后，导致创建的对象引用消失，直接造成内存泄露。 2，错误释放。[s release]; 这个问题，原因之一是一个逻辑错误，以为 s 还是我们最初创建的那个 NSString 对象。第二是因为从 substringFromIndex:(NSUInteger i) 这个方法返回的 NSString 对象，并不需要 我们来释放，它其实是一个被 substringFromIndex 方法标记为 autorelease 的对象。如果我们强行的释放了它，那么会造成 EXC_BAD_ACCESS 问题。 3， EXC_BAD_ACCESS。由于 s 指向的 NSString 对象被标记为 autorelease, 则在 NSAutoreleasePool 中已有记录。但是由于我们在前面错误的释放了该对象，则当 [pool drain] 的时候，NSAutoreleasePool 又一次的对它记录的 s 对象调用了 release 方法，但这个时候 s 已经被释放不复存在，则直接导致了 EXC_BAD_ACCESS问题。 查看更多的Console信息 工作区-&gt;Excuteables-&gt;双击其分组下的文件-&gt;Arguments设置运行参数 1: 为工程运行时加入 NSZombieEnabled 环境变量，则在 EXC_BAD_ACCESS 发生时，XCode 的 Console 会打印出问题描述。 2：加入 MallocStackLogging 来启用malloc记录 做如下设置： Project -&gt; Edit active executable -&gt;Argument 添加如下四个参数 NSDebugEnabled NSZombieEnabled MallocStackLogging MallocStackLoggingNoCompact 来源：http://blog.csdn.net/sjzsp/article/details/6386987","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS 调试 解决EXC_BAD_ACCESS错误","date":"2025-06-11T03:27:11.000Z","path":"2025/06/11/iOS-调试-解决EXC_BAD_ACCESS错误.html","text":"做iOS 程序开发时经常用遇到 EXC_BAD_ACCESS 错误导致 Crash，出现这种错误时一般 Xcode 不会给我们太多的信息来定位错误来源，只是在应用 Delegate 上留下像Thread 1: Program received signal:”EXC_BAD_ACCESS”，让问题无从找起。 比如你对已释放的对象发送消息时就会出现，EXC_BAD_ACCESS，再如release 的对象再 release，release 那些autorelease 的对象等也会报这样的错。默认设置下 Xcode 不会给你定位具体是哪一行代码，不该去使用已释放的对象，或者release 用错了。 比如下面这段代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119- (void)drawRect:(CGRect)rect&#123; [self setClearsContextBeforeDrawing: YES]; CGContextRef context = UIGraphicsGetCurrentContext(); //画背景线条------------------ CGColorRef backColorRef = [UIColor blackColor].CGColor; CGFloat backLineWidth = 2.f; CGFloat backMiterLimit = 0.f; CGContextSetLineWidth(context, backLineWidth);//主线宽度 CGContextSetMiterLimit(context, backMiterLimit);//投影角度 CGContextSetShadowWithColor(context, CGSizeMake(3, 5), 8, backColorRef);//设置双条线 CGContextSetLineJoin(context, kCGLineJoinRound); CGContextSetLineCap(context, kCGLineCapRound ); CGContextSetBlendMode(context, kCGBlendModeNormal); CGContextSetStrokeColorWithColor(context, [UIColor whiteColor].CGColor); CGFloat x = self.charW; CGFloat y = self.chartH; //绘制纵向的坐标线 和 值 for (int i=0; i&lt;vDesc.count; i++) &#123; CGPoint bPoint = CGPointMake(30, y); CGPoint ePoint = CGPointMake(x, y); UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(0, 0, 30, 30)]; //纵坐标起始点的y坐标 //纵坐标起始点的x坐标 int vX = 15; int vY = 30; [label setCenter:CGPointMake(bPoint.x-vX, bPoint.y-vY)]; [label setTextAlignment:NSTextAlignmentCenter]; [label setBackgroundColor:[UIColor clearColor]]; [label setTextColor:[UIColor whiteColor]]; [label setText:[vDesc objectAtIndex:i]]; [self addSubview:label]; CGContextMoveToPoint(context, bPoint.x, bPoint.y-30); CGContextAddLineToPoint(context, ePoint.x, ePoint.y-30); y -= 50;//间隔 &#125; //绘制横向的坐标线 和 值 for (int i=0; i&lt;array.count-1; i++) &#123; //横向值的y坐标 CGFloat hY = chartH - 20; UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(i*vInterval+10, hY, 60, 30)]; label.transform = CGAffineTransformMakeRotation(0.5); [label setTextAlignment:NSTextAlignmentCenter]; [label setBackgroundColor:[UIColor clearColor]]; [label setTextColor:[UIColor whiteColor]]; label.numberOfLines = 1; label.adjustsFontSizeToFitWidth = YES; label.minimumScaleFactor = 1.0f; [label setText:[hDesc objectAtIndex:i]]; [self addSubview:label]; &#125; //画点线条------------------ CGColorRef pointColorRef = [UIColor colorWithRed:24.0f/255.0f green:116.0f/255.0f blue:205.0f/255.0f alpha:1.0].CGColor; CGFloat pointLineWidth = 1.5f; CGFloat pointMiterLimit = 5.0f; CGContextSetLineWidth(context, pointLineWidth);//主线宽度 CGContextSetMiterLimit(context, pointMiterLimit);//投影角度 CGContextSetShadowWithColor(context, CGSizeMake(3, 5), 8, pointColorRef);//设置双条线 CGContextSetLineJoin(context, kCGLineJoinRound); CGContextSetLineCap(context, kCGLineCapRound ); CGContextSetBlendMode(context, kCGBlendModeNormal); CGContextSetStrokeColorWithColor(context, [UIColor whiteColor].CGColor); //绘图 CGPoint p1 = [[array objectAtIndex:0] CGPointValue]; //坐标的基础坐标 y值 int yBase = chartH - 30; CGContextMoveToPoint(context, 30, yBase); for (int i = 1; i&lt;[array count]; i++) &#123; p1 = [[array objectAtIndex:i] CGPointValue]; CGPoint goPoint = CGPointMake(p1.x-20, yBase-p1.y*vInterval/20); CGContextAddLineToPoint(context, goPoint.x, goPoint.y);; //添加触摸点 UIButton *bt = [UIButton buttonWithType:UIButtonTypeCustom]; [bt setBackgroundColor:[UIColor redColor]]; [bt setFrame:CGRectMake(0, 0, 10, 10)]; [bt setCenter:goPoint]; [bt addTarget:self action:@selector(btAction:) forControlEvents:UIControlEventTouchUpInside]; [self addSubview:bt]; &#125; CGContextStrokePath(context); &#125; 上面的代码就会出现EXC_BAD_ACCESS 错误：错误提示是： CoreGraphics&#96;CGColorGetAlpha:0x31c1d780: vmov.i32d0, #0x00x31c1d784: cmp r0, #00x31c1d786: itttt ne0x31c1d788: ldrne r1, [r0, #28]0x31c1d78a: addne.wr0, r0, r1, lsl #20x31c1d78e: ldrne r0, [r0, #28]&lt;-0x31c1d790: vmovne d0, r0, r00x31c1d794: vmov r0, s00x31c1d798: bx lr0x31c1d79a: nop 会定位到红色的那一行，这个实在是让人头痛，不过还是有解决办法的。 NSZombieEnabled环境变量可以帮我们的忙，就是当 设置NSZombieEnabled环境变量后，一个对象销毁时会被转化为_NSZombie，设置NSZombieEnabled后，当你向一个已经释 放的对象发送消息，这个对象就不会向之前那样Crash或者产生一个难以理解的行为，而是放出一个错误消息，然后以一种可预测的可以产生debug断点的 方式消失， 因此我们就可以找到具体或者大概是哪个对象被错误的释放了。 对 Xcode 设置了NSZombieEnabled 之后， 错误提示是： *** -[Not A Type retain]: message sent to deallocated instance 0x2009b480 应该是内存泄露的问题。 修改代码后，代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121- (void)drawRect:(CGRect)rect&#123; [self setClearsContextBeforeDrawing: YES]; CGContextRef context = UIGraphicsGetCurrentContext(); //画背景线条------------------// CGColorRef backColorRef = [UIColor blackColor].CGColor; CGColorRef backColorRef = (__bridge CGColorRef)([UIColor blackColor]); CGFloat backLineWidth = 2.f; CGFloat backMiterLimit = 0.f; CGContextSetLineWidth(context, backLineWidth);//主线宽度 CGContextSetMiterLimit(context, backMiterLimit);//投影角度 CGContextSetShadowWithColor(context, CGSizeMake(3, 5), 8, backColorRef);//设置双条线 CGContextSetLineJoin(context, kCGLineJoinRound); CGContextSetLineCap(context, kCGLineCapRound ); CGContextSetBlendMode(context, kCGBlendModeNormal); CGContextSetStrokeColorWithColor(context, [UIColor whiteColor].CGColor); CGFloat x = self.charW; CGFloat y = self.chartH; //绘制纵向的坐标线 和 值 for (int i=0; i&lt;vDesc.count; i++) &#123; CGPoint bPoint = CGPointMake(30, y); CGPoint ePoint = CGPointMake(x, y); UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(0, 0, 30, 30)]; //纵坐标起始点的y坐标 //纵坐标起始点的x坐标 int vX = 15; int vY = 30; [label setCenter:CGPointMake(bPoint.x-vX, bPoint.y-vY)]; [label setTextAlignment:NSTextAlignmentCenter]; [label setBackgroundColor:[UIColor clearColor]]; [label setTextColor:[UIColor whiteColor]]; [label setText:[vDesc objectAtIndex:i]]; [self addSubview:label]; CGContextMoveToPoint(context, bPoint.x, bPoint.y-30); CGContextAddLineToPoint(context, ePoint.x, ePoint.y-30); y -= 50;//间隔 &#125; //绘制横向的坐标线 和 值 for (int i=0; i&lt;array.count-1; i++) &#123; //横向值的y坐标 CGFloat hY = chartH - 20; UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(i*vInterval+10, hY, 60, 30)]; label.transform = CGAffineTransformMakeRotation(0.5); [label setTextAlignment:NSTextAlignmentCenter]; [label setBackgroundColor:[UIColor clearColor]]; [label setTextColor:[UIColor whiteColor]]; label.numberOfLines = 1; label.adjustsFontSizeToFitWidth = YES; label.minimumScaleFactor = 1.0f; [label setText:[hDesc objectAtIndex:i]]; [self addSubview:label]; &#125; //画点线条------------------// CGColorRef pointColorRef = [UIColor colorWithRed:24.0f/255.0f green:116.0f/255.0f blue:205.0f/255.0f alpha:1.0].CGColor; CGColorRef pointColorRef = (__bridge CGColorRef)[UIColor colorWithRed:24.0f/255.0f green:116.0f/255.0f blue:205.0f/255.0f alpha:1.0]; CGFloat pointLineWidth = 1.5f; CGFloat pointMiterLimit = 5.0f; CGContextSetLineWidth(context, pointLineWidth);//主线宽度 CGContextSetMiterLimit(context, pointMiterLimit);//投影角度 CGContextSetShadowWithColor(context, CGSizeMake(3, 5), 8, pointColorRef);//设置双条线 CGContextSetLineJoin(context, kCGLineJoinRound); CGContextSetLineCap(context, kCGLineCapRound ); CGContextSetBlendMode(context, kCGBlendModeNormal); CGContextSetStrokeColorWithColor(context, [UIColor whiteColor].CGColor); //绘图 CGPoint p1 = [[array objectAtIndex:0] CGPointValue]; //坐标的基础坐标 y值 int yBase = chartH - 30; CGContextMoveToPoint(context, 30, yBase); for (int i = 1; i&lt;[array count]; i++) &#123; p1 = [[array objectAtIndex:i] CGPointValue]; CGPoint goPoint = CGPointMake(p1.x-20, yBase-p1.y*vInterval/20); CGContextAddLineToPoint(context, goPoint.x, goPoint.y);; //添加触摸点 UIButton *bt = [UIButton buttonWithType:UIButtonTypeCustom]; [bt setBackgroundColor:[UIColor redColor]]; [bt setFrame:CGRectMake(0, 0, 10, 10)]; [bt setCenter:goPoint]; [bt addTarget:self action:@selector(btAction:) forControlEvents:UIControlEventTouchUpInside]; [self addSubview:bt]; &#125; CGContextStrokePath(context); &#125; 一切正常了。成功了！ 如何设置 NSZombieEnabled 呢，在 Xcode3 和 Xcode4 下设置不一样，Xcode4 下设置很简单。 Xcode3 下 NSZombieEnabled 设置方法如下： 在XCode左边那个Groups&amp; Files栏中找到Executables，双击其中的一项，或者右键Get Info； 切换到Arguments 这里一共有两个框，在下面那个Variables to be set in theenvironment:点+号添加一项，Name里填NSZombieEnabled，Value填Yes，要保证前面的钩是选中的。Xcode4 下设置 NSZombieEnabled 的方法：你可以点击 Xcode4 菜单 Product -&gt; Edit Scheme-&gt; Arguments, 然后将点击”加号”, 将 NSZombieEnabled 参数加到Environment Variables 窗口中, 后面的数值写上 ”YES”.或者在 Xcode4 菜单 Product -&gt; EditScheme -&gt; Diagnostics 设置窗口中直接勾上Enable ZombieObjects 即可，Xcode 可用 cmd＋shift＋&lt; 进到这个窗口。 讲Cocoa技术十分专业的网站之一，下面的链接详细讲了讲NSZombieEnable的原理。http://www.cocoadev.com/index.pl?NSZombieEnabled苹果官方的Mac OS X Debugging Magic,详细讲述了最为一个高级苹果程序员应该具备的调试技巧 http://developer.apple.com/library/mac/#technotes/tn2004/tn2124.html其实还可以在Instruments中开启NSZombie选项，这样就可以在Instruments中直接查看crash时候的callstack了：http://www.markj.net/iphone-memory-debug-nszombie/最后提醒NSZombieEnabled只能在调试的时候使用，千万不要忘记在产品发布的时候去掉，因为NSZombieEnabled不会真正去释放dealloc对象的内存，一直开启后果可想而知，自重！","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS NSDateFormatter格式详细列表","date":"2025-06-11T03:09:48.000Z","path":"2025/06/11/iOS-NSDateFormatter格式详细列表.html","text":"iOS开发中NSDateFormatter是一个很常用的类，用于格式化NSDate对象，支持本地化的信息。与时间相关的功能还可能会用到NSDateComponents类和NSCalendar类等。本文主要列出NSDateFormatter常见用法。 NSDate对象包含两个部分，日期（Date）和时间（Time）。格式化的时间字符串主要也是针对日期和时间的。[以下代码中开启了ARC，所以没有release。] 基础用法1234567NSDate* now = [NSDate date];NSDateFormatter* fmt = [[NSDateFormatter alloc] init];fmt.dateStyle = kCFDateFormatterShortStyle;fmt.timeStyle = kCFDateFormatterShortStyle;fmt.locale = [[NSLocale alloc] initWithLocaleIdentifier:@&quot;en_US&quot;];NSString* dateString = [fmt stringFromDate:now];NSLog(@&quot;%@&quot;, dateString); 打印输出：10&#x2F;29&#x2F;12, 2:27 PM这使用的系统提供的格式化字符串，通过 fmt.dateStyle 和 fmt.timeStyle 进行的设置。实例中使用的参数是 kCFDateFormatterShortStyle，此外还有： 1234567typedef CF_ENUM(CFIndex, CFDateFormatterStyle) &#123; // date and time format styles kCFDateFormatterNoStyle = 0, // 无输出 kCFDateFormatterShortStyle = 1, // 10/29/12, 2:27 PM kCFDateFormatterMediumStyle = 2, // Oct 29, 2012, 2:36:59 PM kCFDateFormatterLongStyle = 3, // October 29, 2012, 2:38:46 PM GMT+08:00 kCFDateFormatterFullStyle = 4 // Monday, October 29, 2012, 2:39:56 PM China Standard Time&#125;; 自定义区域语言如上实例中，我们使用的是区域语言是 en_US，指的是美国英语。如果我们换成简体中文，则代码是： 1fmt.locale = [[NSLocale alloc] initWithLocaleIdentifier:@&quot;zh_CN&quot;]; 则对应的输出为： 1234567typedef CF_ENUM(CFIndex, CFDateFormatterStyle) &#123; // date and time format styles kCFDateFormatterNoStyle = 0, // 无输出 kCFDateFormatterShortStyle = 1, // 12-10-29 下午2:52 kCFDateFormatterMediumStyle = 2, // 2012-10-29 下午2:51:43 kCFDateFormatterLongStyle = 3, // 2012年10月29日 GMT+0800下午2时51分08秒 kCFDateFormatterFullStyle = 4 // 2012年10月29日星期一 中国标准时间下午2时46分49秒&#125;; 世界通用的区域语言代码，详见 International Components for Unicode (ICU), http://userguide.icu-project.org/formatparse/datetime 自定义日期时间格式NSDateFormatter提供了自定义日期时间的方法，主要是通过设置属性 dateFormat，常见的设置如下： 123456NSDate* now = [NSDate date];NSDateFormatter* fmt = [[NSDateFormatter alloc] init];fmt.locale = [[NSLocale alloc] initWithLocaleIdentifier:@&quot;zh_CN&quot;];fmt.dateFormat = @&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss&quot;;NSString* dateString = [fmt stringFromDate:now];NSLog(@&quot;%@&quot;, dateString); 打印输出：2012-10-29T16:08:40除了上面列出的，还可以指定很多格式，详见http://userguide.icu-project.org/formatparse/datetime。结合设置Locale，还可以打印出本地化的字符串信息。 123456NSDate* now = [NSDate date];NSDateFormatter* fmt = [[NSDateFormatter alloc] init];fmt.locale = [[NSLocale alloc] initWithLocaleIdentifier:@&quot;zh_CN&quot;];fmt.dateFormat = @&quot;yyyy-MM-dd a HH:mm:ss EEEE&quot;;NSString* dateString = [fmt stringFromDate:now];NSLog(@&quot;\\n%@&quot;, dateString); 自定义月份星期等字符NSDateFormatter中同样提供了相应的方式，去修改这些字符。一般情况下，使用相应区域语言下面的默认字符就OK了。但是你的确有这个需求，那么也是可以办到的。相应的方法非常多，如下：Managing AM and PM Symbols– AMSymbol– setAMSymbol:– PMSymbol– setPMSymbol: Managing Weekday Symbols– weekdaySymbols– setWeekdaySymbols:– shortWeekdaySymbols– setShortWeekdaySymbols:– veryShortWeekdaySymbols– setVeryShortWeekdaySymbols:– standaloneWeekdaySymbols– setStandaloneWeekdaySymbols:– shortStandaloneWeekdaySymbols– setShortStandaloneWeekdaySymbols:– veryShortStandaloneWeekdaySymbols– setVeryShortStandaloneWeekdaySymbols: Managing Month Symbols– monthSymbols– setMonthSymbols:– shortMonthSymbols– setShortMonthSymbols:– veryShortMonthSymbols– setVeryShortMonthSymbols:– standaloneMonthSymbols– setStandaloneMonthSymbols:– shortStandaloneMonthSymbols– setShortStandaloneMonthSymbols:– veryShortStandaloneMonthSymbols– setVeryShortStandaloneMonthSymbols: Managing Quarter Symbols– quarterSymbols– setQuarterSymbols:– shortQuarterSymbols– setShortQuarterSymbols:– standaloneQuarterSymbols– setStandaloneQuarterSymbols:– shortStandaloneQuarterSymbols– setShortStandaloneQuarterSymbols: Managing Era Symbols– eraSymbols– setEraSymbols:– longEraSymbols– setLongEraSymbols:","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS设置程序图标","date":"2025-06-11T03:09:43.000Z","path":"2025/06/11/iOS设置程序图标.html","text":"iOS中心有图标的相关说明,地址为：https://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/ MobileHIG&#x2F;IconsImages&#x2F;IconsImages.html#&#x2F;&#x2F;apple_ref&#x2F;doc&#x2F;uid&#x2F;TP40006556-CH14-SW16 这里解释一下，方便自己查看： iOS图标尺寸一览iPhone专用程序: 图标名称 大小 圆角 用途 必需 Icon.png 57 X 57 10px 用于程序商店和在iPhone&#x2F;iPod Touch中显示 必需 Icon@2x.png 114 X 114 20px Icon.png的高清模式 Icon-Small.png 29 X 29 20px 用于设置和Spotlight搜索 Icon-Small@2x.png 58 X 58 8px Icon-Small.png的高清模式 ipad专用程序: 图标名称 大小 圆角 用途 必需 Icon-72.png 72 X 72 20px 用于在iPad桌面中显示 必需 Icon-50.png 50 X 50 ? 用于iPad中的Spotlight搜索 Icon-29.png 29 X 29 10px 设置页面 通用程序: 图标名称 大小 圆角 用途 必需 Icon-72.png 72 X 72 20px 用于在iPad桌面中显示 必需 Icon.png 57 X 57 10px 用于程序商店和在iPhone&#x2F;iPod Touch中显示 必需 Icon-50.png 50 X 50 10px 用于iPad中的Spotlight搜索 Icon-29.png 29 X 29 20px 用于设置和Spotlight搜索 取消图标上的高光系统会默认会在图标上自动加上半透明的高光半圆，如果我们不想要这个效果或者图标本身已经包含了这个高光效果，我们可以在项目配置里把系统的高光功能取消掉：xcode3.2x建的项目：在info plist里加一个配置项，key为“Icon already includes gloss and bevel effects”， 类型为bool，然后打上钩就，这样系统就不会自动加高光；xcode4建的项目：在项目target的summary标签页下找到App Icons项，在“Prerendered”打上钩再找到“Icon files (iOS 5)”项目（如果有的话），展开，把里面的“Icon already includes gloss effects”也设置成“YES”：这样程序中的高光效果就取消了。 itunes connect上的图标我们在itunes connect网站上创建应用时也要求上传图标，上传后 itunes connect也会给图标加上高光效果。这不用担心，如果我们的程序已经取消了高光效果，在程序上传后，网站上图标的高光效果也会自动取消掉的。","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS设置真机上的应用程序名称","date":"2025-06-11T03:09:37.000Z","path":"2025/06/11/iOS设置真机上的应用程序名称.html","text":"iOS设置真机上的应用程序名称： 步骤如下: 在工程文件下面的XXXX-Info.plist，修改 Bundle display name即可 哈哈，好简单","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS iPad iPhone程序增加启动画面","date":"2025-06-11T03:07:03.000Z","path":"2025/06/11/iOS-iPad-iPhone程序增加启动画面.html","text":"为iPad和iPhone程序增加启动画面非常简单，基本思路就是增加启动图片资源Default.png即可，只是要根据不同的分辨率和旋转方向需要有不同的图片尺寸。 目前的iOS设备有三种不同的分辨率： iPad 768x1024iPhone4 640x960iPhone 320x480如果一个程序，既要支持iPad又要支持iPhone，那么它需要包含下面几个图片： Default-Portrait.png iPad专用竖向启动画面 768x1024或者768x1004Default-Landscape.png iPad专用横向启动画面 1024x768或者1024x748Default-PortraitUpsideDown.png iPad专用竖向启动画面(Home按钮在屏幕上面)，可省略 768x1024或者768x1004Default-LandscapeLeft.png iPad专用横向启动画面(可省略), 1024x768或者1024x748Default-LandscapeRight.png iPad专用横向启动画面(可省略), 1024x768或者1024x748Default.png iPhone默认启动图片，如果没有提供上面几个iPad专用启动图片，则在iPad上运行时也使用Default.png（不推荐） 320x480或者320x460[email protected] iPhone4启动图片640x960或者640x920为了在iPad上使用上述的启动画面，你还需要在xxxx_info.plist中加入key(根据下拉菜单中的可选项选择): UISupportedInterfaceOrientations 或 Supported interface orientations同时，为其加入值(根据下拉菜单中的可选项选择): UIInterfaceOrientationPortrait 或 Portrait (bottom home button)UIInterfacOrientationPortraitUpsideDown 或 Portrait (top home button)UIInterfaceOrientationLandscapeLeft 或 Landscape (left home button)UIInterfaceOrientationLandscapeRight 或 Landscape (right home button)","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS 状态栏的尺寸","date":"2025-06-11T03:06:58.000Z","path":"2025/06/11/iOS-状态栏的尺寸.html","text":"状态栏尺寸的获取方式： 1234CGRect statusFrame;statusFrame = [[UIApplication sharedApplication] statusBarFrame];CGFloat statusHeight = statusFrame.size.height;CGFloat statusWidth = statusFrame.size.width;","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"mac关闭指定端口","date":"2025-06-11T03:06:53.000Z","path":"2025/06/11/mac关闭指定端口.html","text":"先执行如下命令: 1lsof -i:端口号 会有类似下面的结果： 123COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEWebProces 42624 davidzhang 5u IPv4 0x907152bbf7b2a875 0t0 TCP localhost:64438-&gt;localhost:radan-http (ESTABLISHED)WebProces 42624 davidzhang 10u IPv4 0x907152bbf7b64a05 0t0 TCP localhost:64439-&gt;localhost:radan-http (ESTABLISHED) 然后执行： 1kill -9 42624 结束进程就搞定了","tags":[{"name":"Unix","slug":"Unix","permalink":"https://blog.gowhich.com/tags/Unix/"},{"name":"MacOS","slug":"MacOS","permalink":"https://blog.gowhich.com/tags/MacOS/"}]},{"title":"C/C++ 预处理器的粘合剂：##运算符","date":"2025-06-11T03:00:03.000Z","path":"2025/06/11/C-C++-预处理器的粘合剂：井井运算符.html","text":"实例代码: 12345678910111213/* glue.c -- 使用##运算符 */#include &lt;stdio.h&gt;#define XNAME(n) x ## n#define PRINT_XN(n) printf(&quot;x&quot; #n &quot; = %d\\n&quot;, x ## n)int main(void)&#123; int XNAME(1) = 14; int XNAME(2) = 20; PRINT_XN(1); PRINT_XN(2); return 0;&#125; 运行结果如下： 12x1 = 14x2 = 20","tags":[{"name":"C/C++","slug":"C-C","permalink":"https://blog.gowhich.com/tags/C-C/"}]},{"title":"C/C++ 利用宏参数创建字符串","date":"2025-06-11T02:59:10.000Z","path":"2025/06/11/C-C++-利用宏参数创建字符串.html","text":"代码示例： 12345678910/* subst.c -- 在字符串中进行替换 */#include &lt;stdio.h&gt;#define PSOR(x) printf(&quot;The square of &quot; #x &quot; is %d\\n&quot;, ((x)*(x)))int main(void)&#123; int y = 5; PSOR(y); PSOR(2 + 4); return 0;&#125; 运行结果为： 12The square of y is 25The square of 2 + 4 is 36","tags":[{"name":"C/C++","slug":"C-C","permalink":"https://blog.gowhich.com/tags/C-C/"}]},{"title":"C/C++ 联合（union）及联合（union）与结构体（struct）的区别","date":"2025-06-11T02:59:06.000Z","path":"2025/06/11/C-C++-联合（union）及联合（union）与结构体（struct）的区别.html","text":"联合(union) 联合说明和联合变量定义联合也是一种新的数据类型, 它是一种特殊形式的变量。联合说明和联合变量定义与结构十分相似。其形式为:union 联合名{ 数据类型 成员名; 数据类型 成员名; …} 联合变量名;联合表示几个变量公用一个内存位置, 在不同的时间保存不同的数据类型 和不同长度的变量。下例表示说明一个联合a_bc: 1234union a_bc&#123; int i; char mm;&#125;; 再用已说明的联合可定义联合变量。例如用上面说明的联合定义一个名为lgc的联合变量, 可写成: 1union a_bc lgc; 在联合变量lgc中, 整型量i和字符mm公用同一内存位置。当一个联合被说明时, 编译程序自动地产生一个变量, 其长度为联合中最大的变量长度。联合访问其成员的方法与结构相同。同样联合变量也可以定义成数组或指针,但定义为指针时, 也要用”-&gt;;”符号, 此时联合访问成员可表示成:联合名-&gt;;成员名另外, 联合既可以出现在结构内, 它的成员也可以是结构。例如: 12345678struct&#123; int age; char *addr; union&#123; int i; char *ch; &#125;x;&#125;y[10]; 若要访问结构变量y[1]中联合x的成员i, 可以写成: 1y[1].x.i; 若要访问结构变量y[2]中联合x的字符串指针ch的第一个字符可写成: 1*y[2].x.ch; 若写成”y[2].x.*ch;”是错误的。 结构和联合的区别结构和联合有下列区别: 结构和联合都是由多个不同的数据类型成员组成, 但在任何同一时刻, 联合转只存放了一个被选中的成员, 而结构的所有成员都存在。 对于联合的不同成员赋值, 将会对其它成员重写, 原来成员的值就不存在了, 而对于结构的不同成员赋值是互不影响的。 下面举一个例了来加对深联合的理解。 例4: 1234567891011121314151617main() &#123; union &#123; /*定义一个联合*/ int i; struct &#123; /*在联合中定义一个结构*/ char first; char second; &#125; half; &#125; number; number.i = 0x4241; /*联合成员赋值*/ printf(&quot;%c%c\\n&quot;, number.half.first, mumber.half.second); number.half.first = &#x27;a&#x27;; /*联合中结构成员赋值*/ number.half.second = &#x27;b&#x27;; printf(&quot;%x\\n&quot;, number.i); getch();&#125; 输出结果为: 12AB6261 从上例结果可以看出: 当给i赋值后, 其低八位也就是first和second的值;当给first和second赋字符后, 这两个字符的ASCII码也将作为i 的低八位和高八位。","tags":[{"name":"C/C++","slug":"C-C","permalink":"https://blog.gowhich.com/tags/C-C/"}]},{"title":"C/C++ \"suggest parentheses around comparison in operand of\"错误","date":"2025-06-11T02:57:08.000Z","path":"2025/06/11/C-C++-suggest-parentheses-around-comparison-in-operand-of-错误.html","text":"详细错误记录： 123456./dualview.c:57: error: two or more data types in declaration specifiers./dualview.c:87: error: conflicting types for ‘show_settings’./dualview.c:57: error: previous declaration of ‘show_settings’ was here./dualview.c: In function ‘show_settings1’:./dualview.c:104: warning: suggest parentheses around comparison in operand of &amp;./dualview.c:106: warning: suggest parentheses around comparison in operand of &amp; 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129/* dualview.c -- 位字段和位运算 */#include &lt;stdio.h&gt;/* 位字段常量 *//* 是否透明和是否可见 */#define YES 1#define NO 0/* 边框线的样式 */#define SOLID 0#define DOTTED 1#define DASHED 2/* 三原色 */#define BLUE 4#define GREEN 2#define RED 1/* 混合颜色 */#define BLACK 0#define YELLOW (RED | GREEN)#define MAGENTA (RED | BLUE)#define CYAN (GREEN | BLUE)#define WHITE (RED | GREEN | BLUE)/* 位运算中使用的常量 */#define OPAQUE 0x1#define FILL_BLUE 0x8#define FILL_GREEN 0x4#define FILL_RED 0x2#define FILL_MASK 0xE#define BORDER 0x100#define BORDER_BLUE 0x800#define BORDER_GREEN 0x400#define BORDER_RED 0x200#define BORDER_MASK 0xE00#define B_SOLID 0#define B_DOTTED 0x1000#define B_DASHED 0x2000#define STYLE_NASK 0x3000const char * colors[8] = &#123;&quot;black&quot;,&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;magenta&quot;,&quot;cyan&quot;,&quot;white&quot;&#125;;struct box_props&#123; unsigned int opaque :1; unsigned int fill_color :3; unsigned int :4; unsigned int show_border :1; unsigned int border_color :3; unsigned int border_style :2; unsigned int :2;&#125;;union Views/* 把数据看做结构或者unsigned short 变量 */&#123; struct box_props st_view; unsigned int ui_view;&#125;void show_settings(const struct box_props *pb);void show_settings1(unsigned short);char *itobs(int n, char *ps);/* 把short值以二进制字符串的形式显示 */int main(void)&#123; /* 创建 Views对象，初始化结构box view */ union Views box = &#123;&#123;YES, YELLOW, YES, GREEN, DASHED&#125;&#125;; char bin_str[8 * sizeof(unsigned int) + 1]; printf(&quot;Original box settings:\\n&quot;); show_settings(&amp;box.st_view); printf(&quot;\\nBox settings using unsigned int view:\\n&quot;); show_settings1(box.ui_view); printf(&quot;bits are %s\\n&quot;, itobs(box.ui_view,bin_str)); box.ui_view &amp;= ~FILL_MASK;/* 把代表填充色的位清0 */ box.ui_view |= (FILL_BLUE | FILL_GREEN);/* 重置填充色 */ box.ui_view ^= OPAQUE;/* 转置指示是否透明的位 */ box.ui_view |= BORDER_RED;/* 错误的方法 */ box.ui_view &amp;= ~STYLE_NASK;/* 清楚样式位 */ box.ui_view |= B_DOTTED;/* 把样式设置为点 */ show_settings(&amp;box.st_view); printf(&quot;\\nBox settings using unsigned int view:\\n&quot;); show_settings1(box.ui_view); printf(&quot;bits are %s\\n&quot;, itobs(box.ui_view,bin_str)); return 0;&#125;void show_settings(const struct box_props *pb)&#123; printf(&quot;Box is %s\\n&quot;, pb-&gt;opaque == YES ? &quot;opaque&quot; : &quot;transparent&quot;); printf(&quot;The fill color is %s.\\n&quot;, colors[pb-&gt;fill_color]); printf(&quot;Border %s.\\n&quot;, pb-&gt;show_border == YES ? &quot;shown&quot; : &quot;not shown&quot;); printf(&quot;The border color is %s\\n&quot;, colors[pb-&gt;border_color]); printf(&quot;The border style is &quot;); switch(pb-&gt;border_style) &#123; case SOLID:printf(&quot;solid. \\n&quot;);break; case DOTTED:printf(&quot;dotted.\\n&quot;);break; case DASHED:printf(&quot;dashed.\\n&quot;);break; default:printf(&quot;unknown type.\\n&quot;); &#125;&#125;void show_settings1(unsigned short us)&#123; printf(&quot;box is %s.\\n&quot;, us &amp; OPAQUE == OPAQUE ? &quot;opaque&quot; : &quot;transparent&quot;); printf(&quot;The fill color is %s\\n&quot;, colors[(us &gt;&gt; 1) &amp; 07]); printf(&quot;Border %s.\\n&quot;, us &amp; BORDER == BORDER ? &quot;shown&quot; : &quot;not shown&quot;); printf(&quot;The border style is \\n&quot;); switch(us &amp; STYLE_NASK) &#123; case B_SOLID : printf(&quot;solid.\\n&quot;);break; case B_DOTTED : printf(&quot;dotted.\\n&quot;);break; case B_DASHED : printf(&quot;dashed.\\n&quot;);break; default:printf(&quot;unknown type.\\n&quot;); &#125; printf(&quot;The border color is %s.\\n&quot;, colors[(us &gt;&gt; 9) &amp; 07]);&#125;/* 把int转换为二进制字符串 */char *itobs(int n, char *ps)&#123; int i; static int size = 8 * sizeof(unsigned int); for (i = size -1; i &gt;= 0; i--,n &gt;&gt;= 1) &#123; ps[i] = (01 &amp; n) + &#x27;0&#x27;; &#125; ps[size] = &#x27;\\0&#x27;; return ps;&#125;","tags":[{"name":"C/C++","slug":"C-C","permalink":"https://blog.gowhich.com/tags/C-C/"}]},{"title":"PHP闭包（Closure）初探","date":"2025-06-11T02:52:29.000Z","path":"2025/06/11/PHP闭包（Closure）初探.html","text":"匿名函数 提到闭包就不得不想起匿名函数，也叫闭包函数（closures），貌似PHP闭包实现主要就是靠它。声明一个匿名函数是这样： 12$func = function() &#123; &#125;; //带结束符 可以看到，匿名函数因为没有名字，如果要使用它，需要将其返回给一个变量。匿名函数也像普通函数一样可以声明参数，调用方法也相同： 123456$func = function( $param ) &#123; echo $param;&#125;;$func( &#x27;some string&#x27; );//输出：//some string 顺便提一下，PHP在引入闭包之前，也有一个可以创建匿名函数的函数：create function，但是代码逻辑只能写成字符串，这样看起来很晦涩并且不好维护，所以很少有人用。 实现闭包 将匿名函数在普通函数中当做参数传入，也可以被返回。这就实现了一个简单的闭包。下边有三个例子 1234567891011121314151617181920212223242526272829303132//例一//在函数里定义一个匿名函数，并且调用它function printStr() &#123; $func = function( $str ) &#123; echo $str; &#125;; $func( &#x27;some string&#x27; );&#125;printStr();//例二//在函数中把匿名函数返回，并且调用它function getPrintStrFunc() &#123; $func = function( $str ) &#123; echo $str; &#125;; return $func;&#125;$printStrFunc = getPrintStrFunc();$printStrFunc( &#x27;some string&#x27; );//例三//把匿名函数当做参数传递，并且调用它function callFunc( $func ) &#123; $func( &#x27;some string&#x27; );&#125;$printStrFunc = function( $str ) &#123; echo $str;&#125;;callFunc( $printStrFunc );//也可以直接将匿名函数进行传递。如果你了解js，这种写法可能会很熟悉callFunc( function( $str ) &#123; echo $str;&#125; ); 连接闭包和外界变量的关键字：USE闭包可以保存所在代码块上下文的一些变量和值。PHP在默认情况下，匿名函数不能调用所在代码块的上下文变量，而需要通过使用use关键字。换一个例子看看： 12345678910111213function getMoney() &#123; $rmb = 1; $dollar = 6; $func = function() use ( $rmb ) &#123; echo $rmb; echo $dollar; &#125;; $func();&#125;getMoney();//输出：//1//报错，找不到dorllar变量 可以看到，dollar没有在use关键字中声明，在这个匿名函数里也就不能获取到它，所以开发中要注意这个问题。 有人可能会想到，是否可以在匿名函数中改变上下文的变量，但我发现是不可以的： 1234567891011121314function getMoney() &#123; $rmb = 1; $func = function() use ( $rmb ) &#123; echo $rmb; //把$rmb的值加1 $rmb++; &#125;; $func(); echo $rmb;&#125;getMoney();//输出：//1//1 原来use所引用的也只不过是变量的一个副本而已。但是我想要完全引用变量，而不是复制。要达到这种效果，其实在变量前加一个 &amp; 符号就可以了： 1234567891011121314function getMoney() &#123; $rmb = 1; $func = function() use ( &amp;$rmb ) &#123; echo $rmb; //把$rmb的值加1 $rmb++; &#125;; $func(); echo $rmb;&#125;getMoney();//输出：//1//2 这样匿名函数就可以引用上下文的变量了。如果将匿名函数返回给外界，匿名函数会保存use所引用的变量，而外界则不能得到这些变量，这样形成‘闭包’这个概念可能会更清晰一些。根据描述改变一下上面的例子： 1234567891011121314151617function getMoneyFunc() &#123; $rmb = 1; $func = function() use ( &amp;$rmb ) &#123; echo $rmb; //把$rmb的值加1 $rmb++; &#125;; return $func;&#125;$getMoney = getMoneyFunc();$getMoney();$getMoney();$getMoney();//输出：//1//2//3 来源：http://my.oschina.net/u/867608/blog/126694?from=mail-notify","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"MacVim配置文件","date":"2025-06-11T02:52:22.000Z","path":"2025/06/11/MacVim配置文件.html","text":"我的MacVim配置文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357&quot;设置菜单语言set langmenu=zh_cn&quot; =========&quot; 功能函数&quot; =========&quot; 获取当前目录func GetPWD() return substitute(getcwd(), &quot;&quot;, &quot;&quot;, &quot;g&quot;)endf&quot; =========&quot; 环境配置&quot; =========&quot; 保留历史记录set history=400&quot; 命令行于状态行set ch=1set stl=\\ [File]\\ %F%m%r%h%y[%&#123;&amp;fileformat&#125;,%&#123;&amp;fileencoding&#125;]\\ %w\\ \\ [PWD]\\ %r%&#123;GetPWD()&#125;%h\\ %=\\ [Line]\\ %l,%c\\ %=\\ %P set ls=2 &quot; 始终显示状态行&quot; 制表符set tabstop=4set expandtabset smarttabset shiftwidth=4set softtabstop=4&quot; 状态栏显示目前所执行的指令set showcmd &quot; 行控制set linebreakset nocompatibleset textwidth=80set wrap&quot; 行号和标尺set numberset rulerset rulerformat=%15(%c%V\\ %p%%%)&quot; 控制台响铃:set noerrorbells:set novisualbell:set t_vb= &quot;close visual bell&quot; 插入模式下使用 &lt;BS&gt;、&lt;Del&gt; &lt;C-W&gt; &lt;C-U&gt;set backspace=indent,eol,start&quot; 标签页set tabpagemax=20set showtabline=2&quot; 缩进set autoindentset cindentset smartindent&quot; 自动重新读入set autoread&quot; 代码折叠set foldmethod=syntax&quot;set foldmethod=indent&quot; 自动切换到文件当前目录set autochdir&quot;在查找时忽略大小写 set ignorecase set incsearch set hlsearch&quot;显示匹配的括号set showmatch&quot;实现全能补全功能，需要打开文件类型检测&quot;filetype plugin indent on&quot;打开vim的文件类型自动检测功能filetype on&quot;在所有模式下都允许使用鼠标，还可以是n,v,i,c等set mouse=a&quot; 恢复上次文件打开位置set viminfo=&#x27;10,\\&quot;100,:20,%,n~/.viminfoau BufReadPost * if line(&quot;&#x27;\\&quot;&quot;) &gt; 0|if line(&quot;&#x27;\\&quot;&quot;) &lt;= line(&quot;&#123;1&#125;quot;)|exe(&quot;norm &#x27;\\&quot;&quot;)|else|exe &quot;norm &#123;1&#125;quot;|endif|endif&quot; =====================&quot; 多语言环境&quot; 默认为 UTF-8 编码&quot; =====================if has(&quot;multi_byte&quot;) set encoding=utf-8 &quot; English messages only &quot;language messages zh_CN.utf-8 if has(&#x27;win32&#x27;) language english let &amp;termencoding=&amp;encoding endif set fencs=ucs-bom,utf-8,gbk,cp936,latin1 set formatoptions+=mM set nobomb &quot; 不使用 Unicode 签名 if v:lang =~? &#x27;^\\(zh\\)\\|\\(ja\\)\\|\\(ko\\)&#x27; set ambiwidth=double endifelse echoerr &quot;Sorry, this version of (g)vim was not compiled with +multi_byte&quot;endif&quot; =========&quot; 图形界面&quot; =========if has(&#x27;gui_running&#x27;) &quot; 只显示菜单 set guioptions=mcr &quot; 高亮光标所在的行 set cursorline &quot; 编辑器配色 &quot;colorscheme zenburn &quot;colorscheme dusk if has(&quot;win32&quot;) &quot; Windows 兼容配置 source $VIMRUNTIME/mswin.vim &quot; f11 最大化 map &lt;f11&gt; :call libcallnr(&#x27;fullscreen.dll&#x27;, &#x27;ToggleFullScreen&#x27;, 0)&lt;cr&gt; &quot; 字体配置 exec &#x27;set guifont=&#x27;.iconv(&#x27;Courier_New&#x27;, &amp;enc, &#x27;gbk&#x27;).&#x27;:h11:cANSI&#x27; exec &#x27;set guifontwide=&#x27;.iconv(&#x27;微软雅黑&#x27;, &amp;enc, &#x27;gbk&#x27;).&#x27;:h11&#x27; endif if has(&quot;unix&quot;) &amp;&amp; !has(&#x27;gui_macvim&#x27;) set guifont=Courier\\ 10\\ Pitch\\ 11 set guifontwide=YaHei\\ Consolas\\ Hybrid\\ 11 endif if has(&quot;mac&quot;) || has(&quot;gui_macvim&quot;) &quot;set guifont=Courier\\ New:h18.00 &quot;set guifontwide=YaHei\\ Consolas\\ Hybrid:h16.00 &quot;set guifont=Monaco:h16 set guifont=Droid\\ Sans\\ Mono:h14 set guifontwide=YouYuan:h14 if has(&quot;gui_macvim&quot;) &quot;set transparency=4 set lines=200 columns=142 let s:lines=&amp;lines let s:columns=&amp;columns func! FullScreenEnter() set lines=999 columns=999 set fu endf func! FullScreenLeave() let &amp;lines=s:lines let &amp;columns=s:columns set nofu endf func! FullScreenToggle() if &amp;fullscreen call FullScreenLeave() else call FullScreenEnter() endif endf endif endifendif&quot; Under the Mac(MacVim)if has(&quot;gui_macvim&quot;) &quot; Mac 下，按 \\ff 切换全屏 map &lt;Leader&gt;&lt;Leader&gt; :call FullScreenToggle()&lt;cr&gt; &quot; Set input method off set imdisable &quot; Set QuickTemplatePath let g:QuickTemplatePath = $HOME.&#x27;/.vim/templates/&#x27; lcd ~/Desktop/ &quot; 自动切换到文件当前目录 set autochdir &quot; Set QuickTemplatePath let g:QuickTemplatePath = $HOME.&#x27;/.vim/templates/&#x27;endif&quot; =========&quot; 插件&quot; =========filetype plugin indent on&quot; =========&quot; AutoCmd&quot; =========if has(&quot;autocmd&quot;) filetype plugin indent on &quot; 括号自动补全 func! AutoClose() :inoremap ( ()&lt;ESC&gt;i :inoremap ) &lt;c-r&gt;=ClosePair(&#x27;)&#x27;)&lt;CR&gt; &quot;:inoremap &quot; &quot;&quot;&lt;ESC&gt;i &quot;:inoremap &#x27; &#x27;&#x27;&lt;ESC&gt;i :inoremap &#123; &#123;&#125;&lt;ESC&gt;i :inoremap &#125; &lt;c-r&gt;=ClosePair(&#x27;&#125;&#x27;)&lt;CR&gt; :inoremap [ []&lt;ESC&gt;i :inoremap ] &lt;c-r&gt;=ClosePair(&#x27;]&#x27;)&lt;CR&gt; endf func! ClosePair(char) if getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 1] == a:char return &quot;\\&lt;Right&gt;&quot; else return a:char endif endf augroup vimrcEx au! autocmd FileType text setlocal textwidth=80 autocmd BufReadPost * \\ if line(&quot;&#x27;\\&quot;&quot;) &gt; 0 &amp;&amp; line(&quot;&#x27;\\&quot;&quot;) &lt;= line(&quot;&#123;1&#125;quot;) | \\ exe &quot;normal g`\\&quot;&quot; | \\ endif augroup END &quot;auto close quotation marks for PHP, Javascript, etc, file au FileType php,c,python,javascript exe AutoClose() &quot; Auto Check Syntax &quot;au BufWritePost,FileWritePost *.js,*.php call CheckSyntax(1) &quot; JavaScript 语法高亮 au FileType html,javascript let g:javascript_enable_domhtmlcss = 1 &quot; 给 Javascript 文件添加 Dict if has(&#x27;gui_macvim&#x27;) || has(&#x27;unix&#x27;) au FileType javascript setlocal dict+=~/.vim/dict/javascript.dict else au FileType javascript setlocal dict+=$VIM/vimfiles/dict/javascript.dict endif &quot; 格式化 JavaScript 文件 &quot;au FileType javascript map &lt;f12&gt; :call g:Jsbeautify()&lt;cr&gt; au FileType javascript set omnifunc=javascriptcomplete#CompleteJS &quot; 给 CSS 文件添加 Dict if has(&#x27;gui_macvim&#x27;) || has(&#x27;unix&#x27;) au FileType css setlocal dict+=~/.vim/dict/css.dict else au FileType css setlocal dict+=$VIM/vimfiles/dict/css.dict endif &quot; 增加 ActionScript 语法支持 au BufNewFile,BufRead *.as setf actionscript &quot; 自动最大化窗口 if has(&#x27;gui_running&#x27;) if has(&quot;win32&quot;) au GUIEnter * simalt ~x &quot;elseif has(&quot;unix&quot;) &quot;au GUIEnter * winpos 0 0 &quot;set lines=999 columns=999 endif endifendif&quot;acp 自动补全插件let g:AutoComplPop_Behavior = &#123; \\ &#x27;c&#x27;: [ &#123;&#x27;command&#x27; : &quot;\\&lt;C-x&gt;\\&lt;C-o&gt;&quot;,\\ &#x27;pattern&#x27; : &quot;.&quot;,\\ &#x27;repeat&#x27; : 0&#125;\\ ] \\&#125;&quot; =========&quot; 快捷键&quot; =========map cal :Calendar&lt;cr&gt;let NERDTreeWinSize=22map ntree :NERDTree &lt;cr&gt;map nk :NERDTreeClose &lt;cr&gt;map &lt;leader&gt;n :NERDTreeToggle&lt;cr&gt;map cse :ColorSchemeExplorer&quot; 标签相关的快捷键 Ctrlmap tn :tabnext&lt;cr&gt;map tp :tabprevious&lt;cr&gt;map tc :tabclose&lt;cr&gt;map &lt;C-t&gt; :tabnew&lt;cr&gt;map &lt;C-p&gt; :tabprevious&lt;cr&gt;map &lt;C-n&gt; :tabnext&lt;cr&gt;map &lt;C-k&gt; :tabclose&lt;cr&gt;map &lt;C-Tab&gt; :tabnext&lt;cr&gt;&quot; 新建 XHTML 、PHP、Javascript 文件的快捷键nmap &lt;C-c&gt;&lt;C-h&gt; :NewQuickTemplateTab xhtml&lt;cr&gt;nmap &lt;C-c&gt;&lt;C-p&gt; :NewQuickTemplateTab php&lt;cr&gt;nmap &lt;C-c&gt;&lt;C-j&gt; :NewQuickTemplateTab javascript&lt;cr&gt;nmap &lt;C-c&gt;&lt;C-c&gt; :NewQuickTemplateTab css&lt;cr&gt;&quot; 在文件名上按gf时，在新的tab中打开map gf :tabnew &lt;cfile&gt;&lt;cr&gt;&quot;jquery 配色au BufRead,BufNewFile *.js set syntax=jquery&quot; jsLint for Vimlet g:jslint_highlight_color = &#x27;#996600&#x27;&quot; 指定 jsLint 调用路径，通常不用更改let g:jslint_command = $HOME . &#x27;\\/.vim\\/jsl\\/jsl&#x27;&quot; 指定 jsLint 的启动参数，可以指定相应的配置文件let g:jslint_command_options = &#x27;-nofilelisting -nocontext -nosummary -nologo -process&#x27;&quot; 返回当前时间func! GetTimeInfo() &quot;return strftime(&#x27;%Y-%m-%d %A %H:%M:%S&#x27;) return strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;)endfunction&quot; 插入模式按 Ctrl + D(ate) 插入当前时间imap &lt;C-d&gt; &lt;C-r&gt;=GetTimeInfo()&lt;cr&gt;&quot; ==================&quot; plugin list&quot; ==================&quot;Color Scheme Explorer&quot;jsbeauty \\ff&quot;NERDTree&quot;Calendar&quot;conquer_term&quot;nerd_commenter&quot;setup for C and C++filetype plugin onset nocp","tags":[{"name":"Vim","slug":"Vim","permalink":"https://blog.gowhich.com/tags/Vim/"}]},{"title":"iOS UILabel(label控件)的详细使用及特殊效果","date":"2025-06-11T02:52:15.000Z","path":"2025/06/11/iOS-UILabel(label控件)的详细使用及特殊效果.html","text":"详细使用： 123456789101112131415UILabel *label = [[UILabelalloc] initWithFrame:CGRectMake(0, 0, 75, 40)]; //声明UIlbel并指定其位置和长宽label.backgroundColor = [UIColorclearColor]; //设置label的背景色，这里设置为透明色。label.font = [UIFont fontWithName:@&quot;Helvetica-Bold&quot; size:13]; //设置label的字体和字体大小。 label.transform = CGAffineTransformMakeRotation(0.1); //设置label的旋转角度label.text = @“helloworld”; //设置label所显示的文本label.textColor = [UIColorwhiteColor]; //设置文本的颜色label.shadowColor = [UIColorcolorWithWhite:0.1falpha:0.8f]; //设置文本的阴影色彩和透明度。label.shadowOffset = CGSizeMake(2.0f, 2.0f); //设置阴影的倾斜角度。label.textAlignment = UITextAlignmentCenter; //设置文本在label中显示的位置，这里为居中。//换行技巧：如下换行可实现多行显示，但要求label有足够的宽度。label.lineBreakMode = UILineBreakModeWordWrap; //指定换行模式label.numberOfLines = 2; // 指定label的行数//lable的旋转label.transform = CGAffineTransformMakeRotation(0.2); //设置label的旋转角度[self.view addSubview:label]; //将label载入 label的美化和特效： 这里使用FXLabel来实现特殊效果，如上图的“每日”二字就是用FXLabel来实现的，但要加入FXLbal.h和FXLabel.m两个文件，具体代码如下。 123456789101112FXLabel *label = [[FXLabelalloc] initWithFrame:CGRectMake(0, 0, 100, 30)];label.backgroundColor = [UIColorclearColor];label.font = [UIFontfontWithName:@&quot;Helvetica-Bold&quot;size:15];label.text = [secondTitle objectAtIndex:i];label.textColor = [UIColorgrayColor];label.shadowColor = [UIColorcolorWithWhite:1.0falpha:0.8f];label.shadowOffset = CGSizeMake(1.0f, 2.0f);label.shadowBlur = 1.0f;label.innerShadowColor = [UIColorcolorWithWhite:0.0falpha:0.8f]; label.innerShadowOffset = CGSizeMake(1.0f, 2.0f); label.textAlignment = UITextAlignmentLeft;[view addSubview:label]; 其用法和UILabel相差不大，很好理解，代码大家可以直接调用，具体属性自己修改。 FXLabel下面地址：https://github.com/nicklockwood/FXLabel 来源：http://wuchaorang.2008.blog.163.com/blog/static/48891852201232014339972/","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS window（窗口）、视图（view）的学习","date":"2025-06-11T02:47:28.000Z","path":"2025/06/11/iOS-window（窗口）、视图（view）的学习.html","text":"要在屏幕上显示内容首先要创建一个窗口承载内容，要创建一个窗口，需要一个边框（frame），含有边框信息的底层 结构就CGRect。每个能够在屏幕上显示自己的对象都有一个边框，定义了他的显示区域，不过许多高层的视图类会自动计算这一信息。其他的那些类则在视图初始化时通过一个initWithFrame的初始化方法来设置。 再来认识一个类：UIScreen。UIScreen类代表了屏幕，通过这个类我们可以获取一些想要的东东。可使用下面的代码测试一下： 123456789CGrect screenBounds = [ [UIScreen mainScreen]bounds];//返回的是带有状态栏的Rect CGRect viewBounds = [ [UIScreen mainScreen]applicationFrame];//不包含状态栏的Rect //screenBounds 与 viewBounds 均是相对于设备屏幕来说的 //所以 screenBounds.origin.x== 0.0 ; screenBounds.oringin.y = 0.0; screenBounds.size.width == 320; screenBounds.size.height == 480(或者其他分辨率有所差异) //所以 screenBounds.origin.x== 0.0 ; screenBounds.oringin.y = 20.0;(因为状态栏的高度是20像素) screenBounds.size.width == 320; screenBounds.size.height == 480 UIView 下面来认识一下UIView类，这个类继承自UIResponder,看这个名字我们就知道它是负责显示的画布，如果说把window比作画框的话。我们 就是不断地在画框上移除、更换或者叠加画布，或者在画布上叠加其他画布，大小当然 由绘画者来决定了。有了画布，我们就可以在上面任意施为了。这个类在UIView.h里面。 1UIView* myView =[[ UIView alloc]initWithFrame:CGRectMake(0.0,0.0,200.0,400.0)];//这里创建了一块画布，定义了相对于父窗口的位置， 以及大小。 UIWindow UIWindow继承自UIView，关于这一点可能有点逻辑障碍，画框怎么继承自画布呢？不要过于去专牛角尖，画框的形状不就是跟画布一样吗？拿一块画布然后用一些方法把它加强，是不是可以当一个画框用呢？这也是为什么 一个view可以直接加到另一个view上去的原因了。看一下系统的初始化过程（在application didFinishLauchingWithOptions里面）： 123self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] autorelease]; self.window.backgroundColor = [UIColor grayColor];//给window设置一个背景色 [self.window makeKeyAndVisible];//让window显示出来 实战演练一下： 1)新建一个工程选择Empty Application 名字为practice 2)在application didFinishLaunchingWithOptions里面，你会发现系统已经建好一个画框了，我们现在就用系统帮我们建好的画框，你当然也可以自己建一个画框，不过没这个必要了，忘了讲了，一个应用程序只能有一个画框。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&#123; self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]]; // Override point for customization after application launch. CGRect bound = [[UIScreen mainScreen]bounds]; NSLog(@&quot;boundwith:%f boundheight:%f&quot;,bound.size.width,bound.size.height); NSLog(@&quot;boundx:%f boundy:%f&quot;,bound.origin.x,bound.origin.y); CGRect appBound = [[UIScreen mainScreen]applicationFrame]; NSLog(@&quot;appBoundwith:%f boundheight:%f&quot;,appBound.size.width,appBound.size.height); NSLog(@&quot;appBoundx:%f boundy:%f&quot;,appBound.origin.x,appBound.origin.y); //画第一块画布然涂成蓝色，大小是320 X 100 CGRect CGone = CGRectMake(0.0, 0.0, 320, 100);//画个矩形，初始化位置与大小 UIView *v_one = [[UIView alloc]initWithFrame:CGone];//初始化view v_one.backgroundColor = [UIColor blueColor];// 涂成蓝色 [self.window addSubview:v_one];//直接加到画框上 //第二块注意它的位置 CGRect CGtwo = CGRectMake(0.0, 100, 160, 100);//画个矩形、初始化位置与大小 UIView *v_two = [[UIView alloc]initWithFrame:CGtwo];//初始化view v_two.backgroundColor = [UIColor redColor];//涂成红色 [self.window addSubview:v_two];//叠加到画框 //第三块注意他的位置 CGRect CGthree = CGRectMake(160, 100, 160, 100);// UIView *v_three = [[UIView alloc]initWithFrame:CGthree];// v_three.backgroundColor = [UIColor greenColor];// [self.window addSubview:v_three];// //第四块注意它的位置 CGRect CGfour = CGRectMake(0.0, 260, 320, 200);// UIView *v_four = [[UIView alloc]initWithFrame:CGfour];// v_four.backgroundColor = [UIColor orangeColor];// [self.window addSubview:v_four];// //第五块，计算一下它的位置，看看它的效果， //你可以让试一下把这段代码移到第一快初始化的上面试试，会有意想不到的效果 CGRect CGfive = CGRectMake(100, 150, 160, 200); UIView *v_five = [[UIView alloc]initWithFrame:CGfive]; v_five.backgroundColor = [UIColor yellowColor]; [self.window addSubview:v_five]; self.window.backgroundColor = [UIColor grayColor];// [self.window makeKeyAndVisible];// //最后记得release v_one = nil; v_two = nil; v_three = nil; v_four = nil; v_five = nil; return YES; //self.window.backgroundColor = [UIColor whiteColor]; //[self.window makeKeyAndVisible]; //return YES;&#125; 取得画面工作区域的大小 iOS 可以在很多 Apple 的装置上执行，然而每个装置所提供的工作区域大小 Application Frame 也不尽香同，下面提供一个简单的方法，帮助你可以快速找出目前工作区域的画面的大小，程式码如下。 1,首先是状态列 Status Bar 的部份。 1234//取得StatusBar的位置和大小[self.view addSubview:theToolbar]; CGRect statusBarRect = [[UIApplication sharedApplication]statusBarFrame];NSLog(@\\&quot;%@\\&quot;, NSStringFromCGRect(statusBarRect)); 2,再来是可工作区域的大小，如果你的应用程式包含状态列，那么可工作区域的大小就会是整个画面的减去状态列所剩下的区域。 123//取得工作区域的位置和大小CGRect workSpaceRect = [[UIScreen mainScreen]applicationFrame];NSLog(@\\&quot;%@\\&quot;, NSStringFromCGRect(workSpaceRect)); 3,最后就是整个画面的大小 123//取得整个画面的位置和大小CGRect windowRect = [[UIScreen mainScreen]bounds];NSLog(@\\&quot;%@\\&quot;, NSStringFromCGRect(windowRect)); 上述程式码皆是将取得的大小范围资讯储存在 CGRect 型态的变数中，再将此变数以字串的方式显示出来。 一些 UIView 中管理 Subview 常用的方法 一个 UIView 里面可以包含许多的 Subview（其他的 UIView），而这些 Subview 彼此之间是有所谓的阶层关系，这有点类似绘图软体中图层的概念，下面程式码示演示了几个在管理图层（Subview）上常用的方法，其程式码如下。首先是大家最常使用的新增和移除 Subview。 1234//将Subview从当前的UIView中移除[Subview removeFromSuperview];//替UIView增加一个Subview[UIView addSubview:Subview]; 在 UIView 中将 Subview 往前或是往后移动一个图层，往前移动会覆盖住较后层的 Subview，而往后移动则会被较上层的 Subview 所覆盖。 1234//将Subview往前移动一个图层（与它的前一个图层对调位置）[UIView bringSubviewToFront:Subview];//将Subview往后移动一个图层（与它的后一个图层对调位置）[UIView sendSubviewToBack:Subview]; 在 UIView 中使用索引 Index 交换两的 Subview 彼此的图层层级。 12//交换两个图层[UIView exchangeSubviewAtIndex:indexA withSubviewAtIndex:indexB]; 使用 Subview 的变数名称取得它在 UIView 中的索引值（Index ）。 12//取得IndexNSInteger index = [[UIView subviews] indexOfObject:Subview名称]; 替 Subview 加上 NSInteger 的註记 （Tag），好让之后它们分辨彼此 12//加上註记[Subview setTag:NSInteger]; 最后是取得 UIView 中所有的 Subview，呼叫此方法会传回一个 NSArray，并以由后往前的顺序列出这些 Subview，下图中是列出范例图片里 Root 中所有的 Subview。 12//取的UIView下的所有Subview[UIView subviews]","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS CGRectMake方法","date":"2025-06-11T02:47:23.000Z","path":"2025/06/11/iOS-CGRectMake方法.html","text":"代码： 12345678CG_INLINE CGRect CGRectMake(CGFloat x, CGFloat y, CGFloat width, CGFloat height) &#123; CGRect rect; rect.origin.x = x; rect.origin.y = y; rect.size.width = width; rect.size.height = height; return rect; &#125; 这个方法就是make一个rect，定好origin（起点，左上角），宽与高，就可以画出一个位置与大小确定的rect（矩形）这个函数被声明为内联函 数，一是因为它比较小，二是因为在画界面时我们要求一定的效率。这个函数还是藏在刚刚那个头文件里面：CGGeometry.h","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS 三个结构体","date":"2025-06-11T02:47:17.000Z","path":"2025/06/11/iOS-三个结构体.html","text":"三个结构体：CGPoint、CGSize、CGRect CGPoint 123456/* Points. */ struct CGPoint &#123; CGFloat x; CGFloat y; &#125;; typedef struct CGPoint CGPoint; CGSize 123456/* Sizes. */ struct CGSize &#123; CGFloat width; CGFloat height; &#125;; typedef struct CGSize CGSize; 3.CGRect 123456/* Rectangles. */ struct CGRect &#123; CGPoint origin;//偏移是相对父窗口的 CGSize size; &#125;; typedef struct CGRect CGRect; 这三个结构体均在一个头文件里：CGGeometry.h","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"iOS 监测网络链接状态","date":"2025-06-11T02:44:13.000Z","path":"2025/06/11/iOS-监测网络链接状态.html","text":"使用之前请从Apple网站下载示例：点此下载 然后将Reachability.h 和 Reachability.m 加到自己的项目中，并引用 SystemConfiguration.framework，就可以使用了。 Reachability 中定义了3种网络状态： 12345678910111213// the network state of the device for Reachability 1.5.typedef enum &#123; NotReachable = 0, //无连接 ReachableViaCarrierDataNetwork, //使用3G/GPRS网络 ReachableViaWiFiNetwork //使用WiFi网络&#125; NetworkStatus;// the network state of the device for Reachability 2.0.typedef enum &#123; NotReachable = 0, //无连接 ReachableViaWiFi, //使用3G/GPRS网络 ReachableViaWWAN //使用WiFi网络&#125; NetworkStatus; 比如检测某一特定站点的接续状况，可以使用下面的代码： 123456789101112Reachability *r = [Reachability reachabilityWithHostName:@“www.apple.com”];switch ([r currentReachabilityStatus]) &#123; case NotReachable: // 没有网络连接 break; case ReachableViaWWAN: // 使用3G网络 break; case ReachableViaWiFi: // 使用WiFi网络 break;&#125; 检测当前网络环境： 123456789// 是否wifi+ (BOOL) IsEnableWIFI &#123; return ([[Reachability reachabilityForLocalWiFi] currentReachabilityStatus] != NotReachable);&#125;// 是否3G+ (BOOL) IsEnable3G &#123; return ([[Reachability reachabilityForInternetConnection] currentReachabilityStatus] != NotReachable);&#125; 连接状态实时通知 网络连接状态的实时检查，通知在网络应用中也是十分必要的。接续状态发生变化时，需要及时地通知用户。由于Reachability1.5版与2.0版有一些变化，这里分开来说明使用方法。 Reachability 1.5 My.AppDelegate.h123456789#import &quot;Reachability.h&quot;@interface MyAppDelegate : NSObject &lt;UIApplicationDelegate&gt; &#123; NetworkStatus remoteHostStatus;&#125;@property NetworkStatus remoteHostStatus;@end My.AppDelegate.m12345678910111213141516171819202122232425262728293031323334353637383940#import &quot;MyAppDelegate.h&quot;@implementation MyAppDelegate@synthesize remoteHostStatus;// 更新网络状态- (void)updateStatus &#123; self.remoteHostStatus = [[Reachability sharedReachability] remoteHostStatus];&#125;// 通知网络状态- (void)reachabilityChanged:(NSNotification *)note &#123; [self updateStatus]; if (self.remoteHostStatus == NotReachable) &#123; UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@&quot;AppName&quot;, nil) message:NSLocalizedString(@&quot;NotReachable&quot;, nil) delegate:nil cancelButtonTitle:@&quot;OK&quot; otherButtonTitles: nil]; [alert show]; [alert release]; &#125;&#125;// 程序启动器，启动网络监视- (void)applicationDidFinishLaunching:(UIApplication *)application &#123; // 设置网络检测的站点 [[Reachability sharedReachability] setHostName:@&quot;www.apple.com&quot;]; [[Reachability sharedReachability] setNetworkStatusNotificationsEnabled:YES]; // 设置网络状态变化时的通知函数 [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(reachabilityChanged:) name:@&quot;kNetworkReachabilityChangedNotification&quot; object:nil]; [self updateStatus];&#125;- (void)dealloc &#123; // 删除通知对象 [[NSNotificationCenter defaultCenter] removeObserver:self]; [window release]; [super dealloc];&#125; Reachability 2.0 MyAppDelegate.h1234567@class Reachability;@interface MyAppDelegate : NSObject &lt;UIApplicationDelegate&gt; &#123; Reachability *hostReach;&#125;@end MyAppDelegate.m123456789101112131415161718192021222324252627- (void)reachabilityChanged:(NSNotification *)note &#123; Reachability* curReach = [note object]; NSParameterAssert([curReach isKindOfClass: [Reachability class]]); NetworkStatus status = [curReach currentReachabilityStatus]; if (status == NotReachable) &#123; UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;AppName&quot; message:@&quot;NotReachable&quot; delegate:nil cancelButtonTitle:@&quot;YES&quot; otherButtonTitles:nil]; [alert show]; [alert release]; &#125;&#125;- (void)applicationDidFinishLaunching:(UIApplication *)application &#123; // ... // 监测网络情况 [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(reachabilityChanged:) name: kReachabilityChangedNotification object: nil]; hostReach = [[Reachability reachabilityWithHostName:@&quot;www.google.com&quot;] retain]; [hostReach startNotifer]; // ...&#125; 来源：http://www.cnblogs.com/mrhgw/archive/2012/08/01/2617760.html","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS 图表 CorePlot 折线图实例 填充图实例","date":"2025-06-11T02:44:07.000Z","path":"2025/06/11/iOS-图表-CorePlot-折线图实例-填充图实例.html","text":"最近在搞数据展示，需要将数据用图表展示出来，结果还是没有达到自己理想的效果，先将自己的不完美版本，记录一下，直接贴出代码 detailViewController.h12345678910111213141516171819202122232425262728#import &lt;UIKit/UIKit.h&gt;#import &quot;CorePlot-CocoaTouch.h&quot;@interface DetailsViewController : UIViewController&lt;CPTPlotDataSource, CPTAxisDelegate&gt;&#123; CPTXYGraph *graph; //画板 CPTScatterPlot *dataSourceLinePlot;//线 NSMutableArray *dataForPlot1; //坐标数组 NSTimer *timer1; //定时器 int j; int r; int maxX; int maxY; int minX; int minY;&#125;@property (retain, nonatomic) NSMutableArray *dataForPlot1;@property (strong, nonatomic) NSString *value;@property (strong, nonatomic) NSString *key;@property (strong, nonatomic) NSMutableArray *dataArray;@property (strong, nonatomic) CPTXYGraph *graph;@property (strong, nonatomic) NSMutableArray *points;@property (strong, nonatomic) NSMutableArray *xArr;@property (strong, nonatomic) NSMutableArray *yArr;//折线图-(void) lineChart;//填充图-(void) fillFigure;@end detailViewController.h（里面有两个函数，是分别调用折线图和填充图的） detailViewController.h123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354#import &quot;DetailsViewController.h&quot;@interface DetailsViewController ()@end@implementation DetailsViewController@synthesize value;@synthesize key;@synthesize dataForPlot1;@synthesize graph;@synthesize points;@synthesize yArr;@synthesize xArr;- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil&#123; self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]; if (self) &#123; //构造数据 self.points = [[NSMutableArray alloc] init]; NSUInteger i; self.xArr = [[NSMutableArray alloc] init]; self.yArr = [[NSMutableArray alloc] init]; for(i=0;i&lt;60;i++)&#123; id x = [NSNumber numberWithFloat: 1+i*0.5]; id y = [NSNumber numberWithFloat: 1.2 * rand()/(float)RAND_MAX+1.2]; [self.xArr addObject:x]; [self.yArr addObject:y]; [self.points addObject:[NSMutableDictionary dictionaryWithObjectsAndKeys:x,@&quot;x&quot;,y,@&quot;y&quot;, nil]]; NSNumber *tmpX = [NSNumber numberWithFloat:[x intValue]]; NSNumber *tmpY = [NSNumber numberWithFloat:[y intValue]]; maxX = MAX([tmpX intValue], maxX); minX = MIN([tmpX intValue], minX); maxY = MAX([tmpY intValue], maxY); minY = MIN([tmpY intValue], minY); &#125; NSLog(@&quot;maxX = %d&quot;,maxX); NSLog(@&quot;minX = %d&quot;,minX); NSLog(@&quot;maxY = %d&quot;,maxY); NSLog(@&quot;minY = %d&quot;,minY);// NSLog(@&quot;xArr = %@&quot;,self.xArr);// NSLog(@&quot;yArr = %@&quot;,self.yArr); &#125; return self;&#125;- (void)viewDidLoad&#123; [super viewDidLoad]; self.title = self.value; [self lineChart]; &#125;//GridLine-(void) gridLine&#123; &#125;//折线图-(void) lineChart&#123; graph = [[CPTXYGraph alloc] initWithFrame:CGRectZero]; CPTTheme *theme = [CPTTheme themeNamed:kCPTDarkGradientTheme]; [graph applyTheme:theme]; CPTGraphHostingView *hostingView = [[CPTGraphHostingView alloc] initWithFrame:self.view.bounds]; //设置图表的边框 //左边的padding设置为0 graph.paddingLeft = 0; //顶部的的padding设置0 graph.paddingTop = 0; //右边的padding设置为0 graph.paddingRight = 0; //底部的padding设置为0 graph.paddingBottom = 0; //坐标区域的边框设置 //左边的padding设置为45.0 graph.plotAreaFrame.paddingLeft = 40.0 ; //顶部的padding设置为40.0 graph.plotAreaFrame.paddingTop = 10.0 ; //右边的padding设置为5.0 graph.plotAreaFrame.paddingRight = 10.0 ; //底部的padding设置为80.0 graph.plotAreaFrame.paddingBottom = 10.0 ; hostingView.hostedGraph = graph; //定义绘图空间 CPTXYPlotSpace *plotSpace = (CPTXYPlotSpace *) graph.defaultPlotSpace; plotSpace.allowsUserInteraction = NO; //设置x，y坐标范围 plotSpace.xRange = [CPTPlotRange plotRangeWithLocation:CPTDecimalFromFloat(minX) length:CPTDecimalFromFloat(maxX)]; plotSpace.yRange = [CPTPlotRange plotRangeWithLocation:CPTDecimalFromFloat(minY) length:CPTDecimalFromFloat(maxY+2)]; //散点图的绘制 CPTScatterPlot *boundLinePlot = [[CPTScatterPlot alloc] init]; CPTMutableLineStyle *lineStyle = [CPTMutableLineStyle lineStyle]; lineStyle.miterLimit = 1.0f; lineStyle.lineWidth = 3.0f; lineStyle.lineColor = [CPTColor blueColor]; boundLinePlot.dataLineStyle = lineStyle; boundLinePlot.identifier = @&quot;lineChart&quot;; boundLinePlot.dataSource = self; [graph addPlot:boundLinePlot]; //设置坐标轴 CPTXYAxisSet *axisSet = (CPTXYAxisSet *) graph.axisSet; CPTXYAxis *x = axisSet.xAxis; x.majorIntervalLength = CPTDecimalFromString(@&quot;10&quot;); x.orthogonalCoordinateDecimal = CPTDecimalFromString(@&quot;0&quot;); x.minorTicksPerInterval = 10;// NSArray *xexclusionRanges = [NSArray arrayWithObjects:// [CPTPlotRange plotRangeWithLocation:CPTDecimalFromFloat(1.99) length:CPTDecimalFromFloat(0.02)],// [CPTPlotRange plotRangeWithLocation:CPTDecimalFromFloat(0.99) length:CPTDecimalFromFloat(0.02)],// [CPTPlotRange plotRangeWithLocation:CPTDecimalFromFloat(2.99) length:CPTDecimalFromFloat(0.02)], nil];// x.labelExclusionRanges = xexclusionRanges; CPTXYAxis *y = axisSet.yAxis; y.majorIntervalLength = CPTDecimalFromString(@&quot;1&quot;); y.orthogonalCoordinateDecimal = CPTDecimalFromString(@&quot;1&quot;); y.minorTicksPerInterval = 1; [self.view addSubview:hostingView];&#125;//填充图-(void) fillFigure&#123; //创建图表 graph = [[CPTXYGraph alloc] initWithFrame:self.view.bounds]; //给图表添加一个主题 CPTTheme *theme = [CPTTheme themeNamed:kCPTDarkGradientTheme]; [graph applyTheme:theme]; //创建画板，将图表添加到画板 CPTGraphHostingView *hostingView = [[CPTGraphHostingView alloc] initWithFrame:self.view.bounds]; hostingView.hostedGraph = graph; [self.view addSubview:hostingView]; //设置图表的边框 //左边的padding设置为0 graph.paddingLeft = 0; //顶部的的padding设置0 graph.paddingTop = 0; //右边的padding设置为0 graph.paddingRight = 0; //底部的padding设置为0 graph.paddingBottom = 0; //坐标区域的边框设置 //左边的padding设置为45.0 graph.plotAreaFrame.paddingLeft = 40.0 ; //顶部的padding设置为40.0 graph.plotAreaFrame.paddingTop = 40.0 ; //右边的padding设置为5.0 graph.plotAreaFrame.paddingRight = 15.0 ; //底部的padding设置为80.0 graph.plotAreaFrame.paddingBottom = 80.0 ; //设置坐标范围 CPTXYPlotSpace *plotSpace = (CPTXYPlotSpace *)graph.defaultPlotSpace; plotSpace.allowsUserInteraction = YES; // plotSpace.xRange = [CPTPlotRange ]; plotSpace.xRange = [CPTPlotRange plotRangeWithLocation:CPTDecimalFromFloat(0.0) length:CPTDecimalFromFloat(200.0)]; plotSpace.yRange = [CPTPlotRange plotRangeWithLocation:CPTDecimalFromFloat(0.0) length:CPTDecimalFromFloat(200.0)]; //设置坐标刻度大小 CPTXYAxisSet *axisSet = (CPTXYAxisSet *) graph.axisSet ; CPTXYAxis *x = axisSet.xAxis ; //x 轴：不显示小刻度线 x. minorTickLineStyle = nil ; // 大刻度线间距： 50 单位 x. majorIntervalLength = CPTDecimalFromString (@&quot;50&quot;); // 坐标原点： 0 x. orthogonalCoordinateDecimal = CPTDecimalFromString ( @&quot;0&quot; ); CPTXYAxis *y = axisSet.yAxis ; //y 轴：不显示小刻度线 y. minorTickLineStyle = nil ; // 大刻度线间距： 50 单位 y. majorIntervalLength = CPTDecimalFromString ( @&quot;50&quot; ); // 坐标原点： 0 y. orthogonalCoordinateDecimal = CPTDecimalFromString (@&quot;0&quot;); //创建绿色区域 dataSourceLinePlot = [[CPTScatterPlot alloc] init]; dataSourceLinePlot.identifier = @&quot;Green Plot&quot;; //设置绿色区域边框的样式 CPTMutableLineStyle *lineStyle = [dataSourceLinePlot.dataLineStyle mutableCopy]; //设置线的宽度 lineStyle.lineWidth = 1.f; //设置线的颜色 lineStyle.lineColor = [CPTColor greenColor]; //添加线到绿色区域中 dataSourceLinePlot.dataLineStyle = lineStyle; //设置透明实现添加动画 dataSourceLinePlot.opacity = 0.0f; //设置数据元代理 dataSourceLinePlot.dataSource = self; //绿色区域添加到图表中 [graph addPlot:dataSourceLinePlot]; // 创建一个颜色渐变：从 建变色 1 渐变到 无色 CPTGradient *areaGradient = [ CPTGradient gradientWithBeginningColor :[CPTColor greenColor] endingColor :[CPTColor colorWithComponentRed:0.65 green:0.65 blue:0.16 alpha:0.2]]; // 渐变角度： -90 度（顺时针旋转） areaGradient.angle = -90.0f ; // 创建一个颜色填充：以颜色渐变进行填充 CPTFill *areaGradientFill = [ CPTFill fillWithGradient :areaGradient]; // 为图形设置渐变区 dataSourceLinePlot.areaFill = areaGradientFill; dataSourceLinePlot.areaBaseValue = CPTDecimalFromString ( @&quot;0.0&quot; ); dataSourceLinePlot.interpolation = CPTScatterPlotInterpolationLinear ; dataForPlot1 = [[NSMutableArray alloc] init]; // j = 200; // r = 0; // timer1 = [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(dataOpt) userInfo:nil repeats:YES]; // [timer1 fire]; [self plotData];&#125;//添加数据-(void) plotData&#123; if ([dataSourceLinePlot.identifier isEqual:@&quot;Green Plot&quot;]) &#123; NSString *xp1 = [NSString stringWithFormat:@&quot;%d&quot;,1]; NSString *yp1 = [NSString stringWithFormat:@&quot;%d&quot;,10]; NSMutableDictionary *point1 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp1, @&quot;x&quot;, yp1, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point1 atIndex:0]; NSString *xp2 = [NSString stringWithFormat:@&quot;%d&quot;,10]; NSString *yp2 = [NSString stringWithFormat:@&quot;%d&quot;,25]; NSMutableDictionary *point2 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp2, @&quot;x&quot;, yp2, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point2 atIndex:1]; NSString *xp3 = [NSString stringWithFormat:@&quot;%d&quot;,30]; NSString *yp3 = [NSString stringWithFormat:@&quot;%d&quot;,15]; NSMutableDictionary *point3 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp3, @&quot;x&quot;, yp3, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point3 atIndex:2]; NSString *xp4 = [NSString stringWithFormat:@&quot;%d&quot;,50]; NSString *yp4 = [NSString stringWithFormat:@&quot;%d&quot;,80]; NSMutableDictionary *point4 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp4, @&quot;x&quot;, yp4, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point4 atIndex:3]; NSString *xp5 = [NSString stringWithFormat:@&quot;%d&quot;,70]; NSString *yp5 = [NSString stringWithFormat:@&quot;%d&quot;,60]; NSMutableDictionary *point5 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp5, @&quot;x&quot;, yp5, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point5 atIndex:4]; NSString *xp6 = [NSString stringWithFormat:@&quot;%d&quot;,90]; NSString *yp6 = [NSString stringWithFormat:@&quot;%d&quot;,100]; NSMutableDictionary *point6 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp6, @&quot;x&quot;, yp6, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point6 atIndex:5]; NSString *xp7 = [NSString stringWithFormat:@&quot;%d&quot;,110]; NSString *yp7 = [NSString stringWithFormat:@&quot;%d&quot;,70]; NSMutableDictionary *point7 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp7, @&quot;x&quot;, yp7, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point7 atIndex:6]; NSString *xp8 = [NSString stringWithFormat:@&quot;%d&quot;,130]; NSString *yp8 = [NSString stringWithFormat:@&quot;%d&quot;,80]; NSMutableDictionary *point8 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp8, @&quot;x&quot;, yp8, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point8 atIndex:7]; NSString *xp9 = [NSString stringWithFormat:@&quot;%d&quot;,200]; NSString *yp9 = [NSString stringWithFormat:@&quot;%d&quot;,135]; NSMutableDictionary *point9 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp9, @&quot;x&quot;, yp9, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point9 atIndex:8]; &#125;&#125;//使用CorePlot的委托方法 呈现图形 - lineChart-(NSUInteger)numberOfRecordsForPlot:(CPTPlot *)plot&#123; return [self.points count];&#125;-(NSNumber *)numberForPlot:(CPTPlot *)plot field:(NSUInteger)fieldEnum recordIndex:(NSUInteger)index&#123; NSString *key = (fieldEnum == CPTScatterPlotFieldX ? @&quot;x&quot; : @&quot;y&quot;); NSNumber *num = [[self.points objectAtIndex:index] valueForKey:key]; return num;&#125;//使用CorePlot的委托方法 呈现图形 - fillFigure//-(NSUInteger)numberOfRecordsForPlot:(CPTPlot *)plot&#123;// return [dataForPlot1 count];//&#125;////-(NSNumber *)numberForPlot:(CPTPlot *)plot field:(NSUInteger)fieldEnum recordIndex:(NSUInteger)index&#123;// NSNumber *num;// //让视图偏移// if ( [(NSString *)plot.identifier isEqualToString:@&quot;Green Plot&quot;] ) &#123;// NSString *key = (fieldEnum == CPTScatterPlotFieldX ? @&quot;x&quot; : @&quot;y&quot;);// // num = [[dataForPlot1 objectAtIndex:index] valueForKey:key];// if ( fieldEnum == CPTScatterPlotFieldX ) &#123;// num = [NSNumber numberWithDouble:[num doubleValue] - r];// &#125;// &#125;// //添加动画效果// CABasicAnimation *fadeInAnimation = [CABasicAnimation animationWithKeyPath:@&quot;opacity&quot;];// fadeInAnimation.duration = 1.0f;// fadeInAnimation.removedOnCompletion = NO;// fadeInAnimation.fillMode = kCAFillModeForwards;// fadeInAnimation.toValue = [NSNumber numberWithFloat:2.0];// [dataSourceLinePlot addAnimation:fadeInAnimation forKey:@&quot;animateOpacity&quot;];// return num;//&#125;- (void) dataOpt&#123; //添加随机数 if ([dataSourceLinePlot.identifier isEqual:@&quot;Green Plot&quot;]) &#123; NSString *xp = [NSString stringWithFormat:@&quot;%d&quot;,j]; NSString *yp = [NSString stringWithFormat:@&quot;%d&quot;,(rand()%100)]; NSMutableDictionary *point1 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp, @&quot;x&quot;, yp, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point1 atIndex:0]; &#125; //刷新画板 [graph reloadData]; j = j + 20; r = r + 20;&#125;- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation&#123; return (interfaceOrientation != UIInterfaceOrientationPortraitUpsideDown);&#125;- (void)didReceiveMemoryWarning&#123; [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated.&#125;@end","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS 小提示 respondsToSelector","date":"2025-06-11T02:44:01.000Z","path":"2025/06/11/iOS-小提示-respondsToSelector.html","text":"respondsToSelector的大概方法如下： 12if ([NSArray respondsToSelector:@selector(arrayWithObjects:)])&#123;&#125; 就是NSArray是否会执行arrayWithObjects:方法，一般在执行代理函数之前先这样respondsToSelector检测一下。","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"10 iOS Libraries to Make Your Life Easier(10个iOS库)","date":"2025-06-11T02:34:26.000Z","path":"2025/06/11/10-iOS-Libraries-to-Make-Your-Life-Easier(10个iOS库).html","text":"The iOS SDK that developers use to build iPhone and iPad apps is relatively low level, requiring the developer to do a lot of work to get their app up and running. Fortunately there are lots of third party libraries available that provide useful functionality that can make your life as an iOS developer much easier. Here we discuss 10 of the best:（阐述IOS库的是很有用的） MBProgressHUD – Progress Indicator Library（进展指示符库） Many official Apple apps have a nice translucent progress display. Unfortunately it’s an undocumented API, and therefore using it is likely to get your app rejected from the app store. This library provides a drop in replacement that looks almost identical. It also provides some additional options, such as a visual progress indicator, and a progress completion message. Integrating it into your project is as simple as adding a couple of files, so you’ve got no excuse not to! ASIHttpRequest – HTTP Network Library（HTTP Network库） The iPhone’s network API can be a little verbose. the ASI library simplifies network communication greatly, and offers advanced tools such as file uploads, redirect handling, authentication, form submission, and caching. If you’re doing anything HTTP related in your iPhone app then this library will make your life so much easier! Here’s how simple it makes fetching a website asynchronously: 12345678910111213- (void) loadAppDevMag&#123; NSURL *url = [NSURL URLWithString:@&quot;http://www.appdevmag.com&quot;]; ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url]; [request setDelegate:self]; [request startAsynchronous];&#125;- (void)requestFinished:(ASIHTTPRequest *)request&#123; // Use when fetching text data NSString *responseString = [request responseString];&#125; JSON Framework – JSON Support（JSON支持） If your app interacts with any web services you’ll more than likely come across JSON encoded data. Surprisingly there’s no support for JSON in the native iOS libraries, but the JSON framework provides everything you need, including a parser to turn JSON strings into objects, and a generator to create JSON strings from objects. This library is so popular, and JSON so common, that it’s actually included in many of the other libraries features in this post already. Here’s a quick example: 123456// JSON string -&gt; NSDictionaryNSString *jsonString = @&quot;&#123;\\&quot;foo\\&quot;: \\&quot;bar\\&quot;&#125;&quot;;NSDictionary *dictionary = [jsonString JSONValue];NSLog(@&quot;Dictionary value for \\&quot;foo\\&quot; is \\&quot;%@\\&quot;&quot;, [dictionary objectForKey:@&quot;foo&quot;]);// NSDictionary -&gt; JSON stringNSString *newJsonString = [dictionary JSONRepresentation]; Flurry – Detailed Usage Statistics（详尽的使用统计） By adding the flurry SDK to your project you’ll automatically get a load of usage statistics about your application, such as how many users you have, how active they are, and where they are in the world. The real power of flurry though is that it allows you to specify your own events to track, and log errors. All of this information is then available in a Google Analytics style dashboard, so you can see what your users are doing with your app, and what problems they’re running into. You really should be using some kind of usage tracking library, and although alternatives do exist, such as Google Analytics for Mobile and Localytics, Flurry has worked really well for me. RegexKitLite – Regular Expression Support（正则表达式支持） Regular Expressions are a really powerful tool, and the absence of support for regular expressions in the iPhone SDK seems to be a glaring omission. Fortunately the RexexKitLite library is here to help. It’s a powerful fully featured regex library that’s simple to use. Here’s the sample code to match a phone number: 12345// finds phone number in format nnn-nnn-nnnnNSString *regEx = @&quot;[0-9]&#123;3&#125;-[0-9]&#123;3&#125;-[0-9]&#123;4&#125;&quot;;for(NSString *match in [textView.text componentsMatchedByRegex:regEx]) &#123; NSLog(@&quot;Phone number is %@&quot;, match);&#125; Facebook iOS SDK – Facebook API Library（Facebook API 库） Facebook login (previously called Facebook Connect) is used all over the web as a way for users to login to services by using their existing Facebook account, saving them from having to create lots of separate accounts. This library allows you to do the same with your iPhone apps. It also has full support for both the Facebook Graph API and the older REST api, which give you access to the social graph and related Facebook information of your users, and make it easy to implement features such as friend finders and inviters. This library is used by a lot of big name apps for their Facebook integration, so if you want to use Facebook as your primary authentication method or you’d just like to add a friend invite feature this library is well worth checking out. SDWebImage – Simple Web Image Support（网络图片支持） SDWebImage is a library for dealing with images on the web. It allows you to use images on the web as easily as local files already packaged with your application. It automatically handles caching, and also supports advanced features such as placeholder images and a download queue. Once you’ve added it to your project you can set the image for a UIWebView as simply as: 1[imageView setImageWithURL:[NSURL URLWithString:@&quot;http://example.com/image.png&quot;]]; Similar functionality is provided by the Three20 library, mentioned later, but if you’re after a simple library that focuses on doing one thing well, and you’re using web based images in your project, then SDBWebImage is what you need. GData client – iPhone library for all of Google’s services（iPhone上所有Google相关服务的类库） Google’s official GData library allows you to access many of Google’s services, including contacts, calendar, analytics, picasa, translate and YouTube. The project is well documented, and contains lots of example applications. With all of the great services Google offer there are so many different ways that this library could be used to enhance an existing application, and there are probably lots of interesting apps that could be built off the back of the example apps included in this library. If you’re an iOS developer stuck for ideas then this is where I’d suggest you look! CorePlot – 2D Graph Plotter（2D图形绘图仪） CorePlot makes makes it extremely easy to visualize your data in a variety of ways, and produces very attractive graphs. It supports bar graphs, pie charts, line graphs, and complex mathematical function plotting among others. The library is well documented, and the website contains lots of examples of where it’s already being used, including stock price applications, game scores, personal finance apps, and for web analytics visualization. Three20 – General iOS Library（通用iOS库） The Three20 library came out of the official Facebook iPhone app. It’s a fairly big and full featured library, including low level components such as a HTTP cache, and many higher level UI components such as a photo viewer and web based table view. It can be a little tricky to integrate Three20 into existing projects, but if you’re starting a project from scratch Three20 can really give you a big head start, especially for projects that make heavy use of the web. Whether it’s interacting with a web API, visualizing data, loading images from the web, or creating social features in your app, the libraries listed here make developing such features easier and less time consuming. If you’re an iOS developer and you haven’t made use of any of these libraries then you should definitely check them out before starting your next project. If you have used any of them, or one that we haven’t mentioned, then please let us know your experiences in the comments.（有了更多的库，会让你的开发更容易，生活更美好）","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"关于一个nginx的一个错误解释“nginx – getgrnam (“presmini”) failed”","date":"2025-06-11T02:34:08.000Z","path":"2025/06/11/关于一个nginx的一个错误解释“nginx–getgrnam(“presmini”)failed”.html","text":"I got this error after installing nginx and trying to run passenger for my ruby apps. I understood that I needed to run nginx as the same user I was using to run my ruby apps. To do this, I had to use the “user” directive in the nginx.conf file to define the startup user to be “presmini” (the same user running my ruby apps). What I screwed up was that the failure（他也遇到了，其实我也遇到了） 1[emerg]: getgrnam(“presmini”) failed in /opt/nginx/conf/nginx.conf:1 上面是错误提示的说明。 is that I wasn’t explicity defining a group in the nginx.conf file, and so it was defaulting to something that does exist. Since I’m on a mac, I just changed the “user” directive in the nginx.conf file to: 原因是没有添加组 1user presmini staff 修改成类似这样的就可以了","tags":[{"name":"NGINX","slug":"NGINX","permalink":"https://blog.gowhich.com/tags/NGINX/"}]},{"title":"MAC OS X PHP5.3 with FPM","date":"2025-06-11T02:33:56.000Z","path":"2025/06/11/MAC-OS-X-PHP5.3-with-FPM.html","text":"I’ve been considering diving into nginx for a bit now. Rumors of it’s speed and Cyrillic error messages have intrigued me. With recent forays into node.js apps and their requirement for a free port, I wanted to find a nice solution that complimented the evented speed of node.js without exposing a port publicly for each app. As it turns out Nginx is suited quite nicely to this. But that wasn’t where it ended. I found nginx to have a much more interesting and dynamic config language. And even beyond that it gave me a good excuse to learn more about running PHP as a FastCGI process and how PHP-FPM (baked in as of 5.3.3) fits into the picture. Not sure if MEMP is the correct acronym, but since I’ve seen talk of LEMP servers, I’ll run with it.（似乎说了一下为什么要使用PHP-FPM） MacPorts. If you’re not already familiar with it, I recommend reading up before proceeding. Since I already have MySQL set up and configured I won’t bother covering it here. It’s pretty well documented around the webs. The main focus here is going to be getting nginx installed and setting up PHP as a service to it with an emphasis on local development. No need to tweak this for production on my Macbook Pro.(这里说明了一下MacPorts是什么，给他带了什么好处) PHP 5.3.3 introduced PHP-FPM (FastCGI Process Manager) to the codebase. Building it requires a few extra config flags and generates a php-fpm binary. The binary will manage spawning cgi processes and handling the FastCGI passthru from nginx. Currently MacPorts does not have an option to build PHP with PHP-FPM. After some hacking on the current Portfile I arrived at a working solution. It includes the correct flags, a dependency on libevent, and a startup item.(这里介绍了一下什么是PHP-FPM) First things first. 1234sudo port selfupdate# recommended but probably not a requirementsudo port upgrade outdatedsudo port uninstall inactive (If you’ve already got the php5 package installed, uninstall it and it’s cohorts to ensure a clean install process going forward.)This is a bit of a hack and there’s probably a better way, like submitting a proper patch to MacPorts, but this will get the job done for today. 12# replace this file with the Portfile from the gist below/opt/local/var/macports/sources/rsync.macports.org/release/ports/lang/php5/Portfile Then run the regular port install. 1sudo port install nginx php5 +fastcgi php5-apc php5-mysql +mysqlnd Next we’ll need to set up the configs. There’s two basic configs that require attention. First is the nginx config. Since this is just for a local development env we can be pretty lean on what we need. 下面是关于nginx的配置 12345678910111213141516171819202122232425262728293031323334# /opt/local/etc/nginx/nginx.confworker_processes 1;error_log /var/log/nginx/error.log;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; server &#123; listen 80; server_name ~^local\\.(?.+?)\\.com$; root /Users/jason/Sites/$site/web; index index.php index.html; location = /favicon.ico &#123; log_not_found off; &#125; location ~ \\.php$ &#123; fastcgi_pass unix:/tmp/php-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; &#125;&#125; This is the config that I’m currently using as my generic site config. It has a few nice features. First the server name is matched against a regular expression. So any site that matches local.xxxx.com will be parsed and use the xxxx as a sub-directory in my Sites folder. This is nice. So I only need to create a new directory and add my local.xxxx.com domain to &#x2F;etc&#x2F;hosts pointed at 127.0.0.1 and I can immediately begin developing. Gone are the days of creating a new v-hosts file, enabling it, and restarting apache every time I want to play with a new site’s code. The other nicety here is we’re using a unix socket for the fastcgi passthru. This is unnoticeably faster on my Mac, but again frees up the need to be concerned with another open port on my system.It’s worth noting that any fastcgi_param that you define in this config is available within PHP as a $_SERVER variable.The second config is the FPM config. Copy &#x2F;opt&#x2F;local&#x2F;etc&#x2F;php-fpm.conf.default to &#x2F;opt&#x2F;local&#x2F;etc&#x2F;php-fpm.conf and open it up. Here are the important ones to modify:（下面是关于php-fpm的配置） 1234567891011pid = /opt/local/var/run/php-fpm.piderror_log = /opt/local/var/log/php-fpm.loglisten = /tmp/php-fpm.socklisten.owner = _wwwlisten.group = _wwwpm.max_children = 1pm.start_servers = 1pm.min_spare_servers = 1pm.max_spare_servers = 1pm.max_requests = 500slowlog = /opt/local/var/log/php-fpm.log.slow It’s pretty straight-forward. Lean cus we can. Save and continue.At this point we’ve got all the pieces in place. We just need a way to start&#x2F;stop&#x2F;restart nginx and FPM. I looked for a cleaner way to accomplish this but in the end it came down to a handful of aliases. Add these to your ~&#x2F;.profile.（配置啊启动和关闭nginx，fpm） 123456789# nginxalias nginx_start=&#x27;sudo launchctl load /Library/LaunchDaemons/org.macports.nginx.plist&#x27; alias nginx_stop=&#x27;sudo launchctl unload /Library/LaunchDaemons/org.macports.nginx.plist&#x27; alias nginx_restart=&#x27;nginx_stop; nginx_start;&#x27; # php-fpmalias fpm_start=&#x27;sudo launchctl load /Library/LaunchDaemons/org.macports.php-fpm.plist&#x27;alias fpm_stop=&#x27;sudo launchctl unload /Library/LaunchDaemons/org.macports.php-fpm.plist&#x27;alias fpm_restart=&#x27;fpm_stop; fpm_start&#x27; （到这里，果然牛逼，直接放在自己的命令行里面） Reopen the Terminal window to enable the new aliases. Start or restart nginx and FPM as the case may be. At this point you should be able to create a site directory, add a domain to &#x2F;etc&#x2F;hosts and drop in an index.php with phpinfo(); to verify that PHP is working.Hopefully this will be of some use to other aspiring MEMP devs out there. 来源：http://blog.jasonmooberry.com/2010/12/memp-php-5-3-with-fpm-and-nginx-via-macports/","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"},{"name":"Unix","slug":"Unix","permalink":"https://blog.gowhich.com/tags/Unix/"}]},{"title":"Mac OS X下安装nginx+php及测试","date":"2025-06-10T07:46:40.000Z","path":"2025/06/10/Mac-OS-X下安装nginx+php及测试.html","text":"—先安装XCode，这样才有GCC等必要开发工具包 默认XCode安装完成不会添加命令行支持，需要在XCode的“偏好设置–&gt;下载–&gt;选择下载命令行支持” –命令行在 “应用程序–&gt; 实用工具–&gt;终端” 安装依赖的库建议通过Macports来进行安装，（附MacPorts安装使用说明）。只需要执行如下指令： 1sudo port install pcre 如果你已经通过自己下载pcre包来make &amp; make install，很有可能会由于安装的pcre路径问题，在安装其他软件时会出问题。想要删除安装好的pcre，则只需要在下载下来的pcre解压文件夹下，执行make uninstall。 安装Nginx方法一：仍然通过Macports，执行下面语句就ok 1sudo port install nginx spawn-fcgi 方法二: 123456$curl -O http://nginx.org/download/nginx-0.8.53.tar.gz$tar zxvf nginx-0.8.53.tar.gz$cd nginx-0.8.53$./configure --prefix=/usr/local/nginx --conf-path=/usr/local/nginx/conf/nginx.conf$make$sudo make install 配置文件为：/usr/local/nginx/conf/nginx.conf默认安装在/usr/local/nginx启动：输入以下命令启动Nginx，然后浏览器输入地址 http://localhost 进行测试，看到很大的字体的Welcome to nginx!就代表安装成功了 1/usr/local/nginx/sbin/nginx 推荐关闭方式： 1/usr/local/nginx/sbin/nginx -s stop 其他关闭方式： 123ps -ef | grep nginx # 找到pidsudo kill pid 安装PHP1sudo port install php5 +fastcgi fcgi php5-gd php5-mysql php5-sqlite php5-eaccelerator php5-curl php5-iconv 配置文件12cd /opt/local/etc/php5sudo cp php.ini-development php.ini 将时区修改为：date.timezone = Asia/Chongqing错误级别修改为：error\\_reporting = E\\_ALL &amp; ~E\\_NOTICE 启动： 1sudo /opt/local/bin/spawn-fcgi -C 2 -p 9000 -f /opt/local/bin/php-cgi 遇到NGINX PHP “No input file specified”问题，解决方法：1、 php.ini（&#x2F;opt&#x2F;local&#x2F;etc&#x2F;php5&#x2F;php.ini或者&#x2F;etc&#x2F;php5&#x2F;cgi&#x2F;php.ini）的配置中这两项 12cgi.fix_pathinfo=1 （这个是自己添加的）doc_root= （这行本来就有） 并修改下面： 123456location ~ \\.php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /var/www/sitepath$fastcgi_script_name; include fastcgi_params;&#125; /var/www/sitepath部分路径需要根据你主机主目录的实际情况填写，也可以用$document_root代替，其值实为PHP配置文件中的basedir一值。 测试方法： 在nginx的html目录下（默认为&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html），新建一个文件test.php，输入以下测试代码： 1234567891011&lt;?php//测试mysql$link = mysql_connect(&#x27;localhost&#x27;, &#x27;root&#x27;, &#x27;mysql密码&#x27;);if (!$link) &#123; echo &quot;mysql fail!&quot;;&#125; else &#123; echo &quot;mysql succees&quot;;&#125;mysql_close();//输出php信息phpinfo(); 通过http://localhost/test.php 访问，如果能正常显示，那恭喜你，ok了。 附nginx, php, mysql快捷启动代码，建议复制保存为startup.sh，每次通过执行.&#x2F;startup.sh，然后输入管理员密码，就一次性开启了三项服务： 1234#!/bin/shsudo /usr/local/nginx/sbin/nginxsudo /opt/local/bin/spawn-fcgi -C 2 -p 9000 -f /opt/local/bin/php-cgisudo /usr/local/mysql/bin/mysqld_safe &amp; 再附上nginx, php, mysql快捷关闭代码，建议复制保存为shutdown.sh，每次通过执行.&#x2F;shutdown.sh就关闭了三项服务： 1234#!/bin/shsudo /usr/local/nginx/sbin/nginx -s stop;`ps -ef | grep php | head -n1|awk &#x27;&#123;print &quot;sudo kill &quot;$2&#125;&#x27;`;sudo /usr/local/mysql/bin/mysqladmin -uroot -pms shutdown;","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"},{"name":"Unix","slug":"Unix","permalink":"https://blog.gowhich.com/tags/Unix/"},{"name":"NGINX","slug":"NGINX","permalink":"https://blog.gowhich.com/tags/NGINX/"}]},{"title":"iOS plist文件的增删操作","date":"2025-06-10T07:46:27.000Z","path":"2025/06/10/iOS-plist文件的增删操作.html","text":"我最近在使用plist存数数据，方便后面的数据浏览 很是苦恼于是自己就查遍各方资料，弄了一个简单的类函数,方便自己的更新数据 detailViewController.h123456789101112131415161718192021222324#import &lt;Foundation/Foundation.h&gt;#import &lt;UIKit/UIKit.h&gt;@interface personIndex : NSObject@property (strong, nonatomic) NSArray *personArr;@property (strong, nonatomic) NSMutableArray *personMulArr;//清空原有数据-(void) deletePlist;//响应错误-(void) showAlert;//获取远端数据-(void) getRemoteData;//创建plist文件-(void) createPlist;//写入数据到plist文件-(void) writePlist;//解析json数据-(NSArray *) readJsonData:(NSMutableData *)data;//下载数据-(void) executeDown;@end detailViewController.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152#import &quot;personIndex.h&quot;@implementation personIndex@synthesize personArr;@synthesize personMulArr;-(void) executeDown&#123; [self deletePlist]; [self getRemoteData]; [self createPlist]; [self writePlist];&#125;//将数据写入plist-(void) writePlist&#123; NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsDirectory = [paths objectAtIndex:0]; NSString *path = [documentsDirectory stringByAppendingPathComponent:@&quot;test.plist&quot;]; NSFileManager *fileManager = [NSFileManager defaultManager]; if ([fileManager fileExistsAtPath: path])&#123;//如果文件存在，写入数据 //创建字典 NSMutableDictionary *dictplist = [[NSMutableDictionary alloc ] init]; for(id item in self.personArr)&#123; //设置属性值 [dictplist setValue:[NSString stringWithFormat:@&quot;%@&quot;,[item valueForKey:@&quot;zh_name&quot;]] forKey:[NSString stringWithFormat:@&quot;%@&quot;,[item valueForKey:@&quot;id&quot;]]]; &#125; //写入文件 if(![dictplist writeToFile:path atomically:YES])&#123; [self showAlert:@&quot;同步数据失败&quot;]; &#125; &#125;else&#123; NSString *appFile = [documentsDirectory stringByAppendingPathComponent: [NSString stringWithFormat: @&quot;test.plist&quot;] ]; //创建字典 NSMutableDictionary *dictplist = [[NSMutableDictionary alloc ] init]; for(id item in self.personArr)&#123; //设置属性值 [dictplist setValue:[NSString stringWithFormat:@&quot;%@&quot;,[item valueForKey:@&quot;zh_name&quot;]] forKey:[NSString stringWithFormat:@&quot;%@&quot;,[item valueForKey:@&quot;id&quot;]]]; &#125; ///写入文件 if(![dictplist writeToFile:appFile atomically:YES])&#123; [self showAlert:@&quot;同步数据失败&quot;]; &#125; &#125;&#125;-(void) deletePlist&#123; NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsDirectory = [paths objectAtIndex:0]; NSString *path = [documentsDirectory stringByAppendingPathComponent:@&quot;test.plist&quot;]; NSFileManager *fileManager = [NSFileManager defaultManager]; [fileManager removeItemAtPath:path error:nil];&#125;-(NSMutableDictionary *) readPlist&#123; NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsDirectory = [paths objectAtIndex:0]; NSString *path = [documentsDirectory stringByAppendingPathComponent:@&quot;test.plist&quot;]; NSFileManager *fileManager = [NSFileManager defaultManager]; NSMutableDictionary *data = [[NSMutableDictionary alloc] initWithContentsOfFile: path]; if ([fileManager fileExistsAtPath: path])&#123;//如果文件存在，写入数据 data = [[NSMutableDictionary alloc] initWithContentsOfFile: path]; &#125;else&#123; // If the file doesn’t exist, create an empty dictionary data = [[NSMutableDictionary alloc] init]; &#125; return data;&#125;//创建plist文件-(void) createPlist&#123; NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsDirectory = [paths objectAtIndex:0]; NSString *path = [documentsDirectory stringByAppendingPathComponent:@&quot;test.plist&quot;]; NSFileManager *fileManager = [NSFileManager defaultManager]; if (![fileManager fileExistsAtPath: path])&#123; [documentsDirectory stringByAppendingPathComponent: [NSString stringWithFormat: @&quot;test.plist&quot;]]; &#125;&#125;-(void) getRemoteData&#123; NSURL *url = [[NSURL alloc] initWithString:@&quot;http://222.73.93.70:3002/person/actorlist?order_by=index&amp;start_date=2012-06-01&amp;end_date=2012-07-01&amp;start=1&amp;offset=10&amp;app_key=KSKdzSyeb99YdLwTMrzvuLumNYCM6pzT4Z3f27R4L3qq6jCs&quot;]; NSURLRequest *request = [[NSURLRequest alloc] initWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:60]; NSURLResponse *response = [[NSURLResponse alloc] init]; NSError *error = [[NSError alloc] init]; NSMutableData *receivedData = (NSMutableData *)[NSURLConnection sendSynchronousRequest:request returningResponse:&amp;response error:&amp;error]; self.personArr = [self readJsonData:receivedData];&#125;-(NSArray *) readJsonData:(NSMutableData *)data&#123; //NSJSONSerialization提供了将JSON数据转换为Foundation对象（一般都是NSDictionary和NSArray） //和Foundation对象转换为JSON数据（可以通过调用isValidJSONObject来判断Foundation对象是否可以转换为JSON数据）。 NSArray *personList = [[NSArray alloc] init]; if(data == nil)&#123; [self showAlert:@&quot;更新数据失败&quot;]; &#125;else&#123; NSError *error; NSDictionary *personDictionary = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers error:&amp;error]; NSDictionary *personInfo = [personDictionary objectForKey:@&quot;data&quot;]; personList = [personInfo objectForKey:@&quot;list&quot;]; &#125; return personList;&#125;-(NSArray *) readStringJsonData:(NSMutableData *)data&#123; //NSJSONSerialization提供了将JSON数据转换为Foundation对象（一般都是NSDictionary和NSArray） //和Foundation对象转换为JSON数据（可以通过调用isValidJSONObject来判断Foundation对象是否可以转换为JSON数据）。 NSError *error; NSDictionary *personDictionary = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers error:&amp;error]; NSDictionary *personInfo = [personDictionary objectForKey:@&quot;data&quot;]; NSArray *personList = [personInfo objectForKey:@&quot;list&quot;]; return personList;&#125;-(void) showAlert:(NSString *)stringData&#123; UIAlertView *alrt = [[UIAlertView alloc] initWithTitle:@&quot;同步数据失败&quot; message:[NSString stringWithFormat:@&quot;%@&quot;,stringData] delegate:self cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil]; [alrt show];&#125;@end","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS中获取程序目录路径","date":"2025-06-10T07:46:19.000Z","path":"2025/06/10/iOS中获取程序目录路径.html","text":"获取程序Documents目录路径12NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, YES);NSString *documentsDirectory = [paths objectAtIndex:0]; 获取程序app文件所在目录路径1NSHomeDirectory(); 获取程序tmp目录路径1NSTemporaryDirectory(); 获取程序应用包路径1[[NSBundle mainBundle] resourcePath]; 或 1[[NSBundle mainBundle] pathForResource: @&quot;info&quot; ofType: @&quot;txt&quot;]; 来源：http://www.cnblogs.com/kaixuan/archive/2011/05/31/2064796.html","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS 字典对象 常用方法总结 NSDictionary 和 NSMutableDictionary","date":"2025-06-10T07:30:47.000Z","path":"2025/06/10/iOS-字典对象常用方法总结NSDictionary和NSMutableDictionary.html","text":"NSDictionary的常用方法有 +(id)dictionaryWithObjectsAndKeys:obj1,key1,obj2,key2,……nil顺序添加对象和键值来创建一个字典，注意结尾是nil -(id)initWithObjectsAndKeys::obj1,key1,obj2,key2,……nil初始化一个新分配的字典，顺序添加对象和值，结尾是nil -(unsigned int)count返回字典中的记录数 -(NSEnumerator*)keyNSEnumerator返回字典中的所有键到一个 NSEnumerator 对象 -(NSArray*)keysSortedByValueUsingSelector:(SEL)selector将字典中所有键按照selector 指定的方法进行排序，并将结果返回 -(NSEnumerator*)objectEnumerator返回字典中所有的值到一个 NSEnumetator 类型对象 -(id)objectForKey:key返回指定key 值的对象 NSMutableDictionary的常用方法有： +(id)dictionaryWithCapacity:size创建一个size大小的可变字典 -(id)initWithCapacity:size初始化一个size 大小的可变字典 -(void)removeAllObjects删除字典中所有元素 -(void)removeObjectForKey:key删除字典中key位置的元素 -(void)setObject:obj forKey:key添加 (key , obj)到字典中去；若key已经存在，则替换值为 obj","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS SBJson解析Json文件","date":"2025-06-10T07:30:39.000Z","path":"2025/06/10/iOS-SBJson解析Json文件.html","text":"最近在搞到，如何解析json文件，使用ios自带的函数很容易解析出来，但是对于中文的问题，一直困扰着我，于是查看了各种相关资料，最后我的解决方法如下： 1，让我找到了一个兼容ARC机制的类库，SBJson，现在地址：https://github.com/stig/json-framework/downloads，最近的一个版本支持ARC 2，将其下载过来后，引入到项目中，#import “SBJson.h” 3，使用方法是 1234567891011121314151617181920-(void) test&#123; NSLog(@&quot;test 开始运行&quot;); NSString *testString = [[NSString alloc]initWithString:@&quot;&#123;\\&quot;customer\\&quot;:[&#123;\\&quot;name\\&quot;:\\&quot;roamer\\&quot;,\\&quot;ycount\\&quot;:\\&quot;232.4\\&quot;,\\&quot;sumcount\\&quot;:\\&quot;322.3\\&quot;&#125;,&#123;\\&quot;name\\&quot;:\\&quot;王三\\&quot;,\\&quot;ycount\\&quot;:\\&quot;221.2\\&quot;,\\&quot;sumcount\\&quot;:\\&quot;1123.2\\&quot;&#125;,&#123;\\&quot;name\\&quot;:\\&quot;李四\\&quot;,\\&quot;ycount\\&quot;:\\&quot;1221.2\\&quot;,\\&quot;sumcount\\&quot;:\\&quot;12123.2\\&quot;&#125;]&#125;&quot;]; SBJsonParser *parser = [[SBJsonParser alloc] init]; NSLog(@&quot;%@&quot;,testString); NSError *error = nil; NSMutableDictionary *root = [[NSMutableDictionary alloc] initWithDictionary:[parser objectWithString:testString error:&amp;error]]; //注意转换代码 SBJsonWriter *jsonWriter = [[SBJsonWriter alloc] init]; NSString *jsonString = [jsonWriter stringWithObject:root]; NSLog(@&quot;%@&quot;,jsonString); //注意转换代码 NSMutableArray * customers = [root objectForKey:@&quot;customer&quot;]; NSLog(@&quot;%@&quot;,customers); for(NSMutableDictionary * member in customers)&#123; NSLog(@&quot;%@&quot;,[[member objectForKey:@&quot;name&quot;] description]); &#125;&#125; 上面只是一个，自己写的json格式的字符串，自己可以使用来自远程获取的数据，做一下测试","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS Objective-C 判断对象的类型","date":"2025-06-10T07:29:18.000Z","path":"2025/06/10/iOS-Objective-C-判断对象的类型.html","text":"所有继承 NSObject 的的对象可以调用isKindOfClass 方法 1(BOOL)isKindOfClass:(Class)aClass 例如: 1BOOL test = [obj isKindOfClass:[SomeClass class]];","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS NSURLConnection 同步下载获取数据","date":"2025-06-10T07:14:52.000Z","path":"2025/06/10/iOS-NSURLConnection-同步下载获取数据.html","text":"同步下载（交互不好，容易出现卡死现象，一般下载数据较小或有特定需求才使用）。 发送同步请求后，程序将停止用户交互，直到服务器返回数据完成后，才进行下一步的操作。 步骤： 创建NSURL1NSURL *url = [[NSURL alloc] initWithString:@&quot;http://www.baidu.com/&quot;]; 通过URL创建NSURLRequest1NSURLRequest *request = [[NSURLRequest alloc] initWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:15]; cachePolicy 缓存协议是个枚举类型： NSURLRequestUseProtocolCachePolicy 基础策略 NSURLRequestReloadIgnoringLocalCacheData 忽略本地缓存 NSURLRequestReturnCacheDataElseLoad 首先使用缓存，如果没有本地缓存，才从原地址下载 NSURLRequestReturnCacheDataDontLoad 使用本地缓存，从不下载，如果本地没有缓存，则请求失败。此策略多用于离线操作 NSURLRequestReloadIgnoringLocalAndRemoteCacheData 无视任何的缓存策略，无论是本地还是远程，总是从原地址重新下载 NSURLRequestReloadRevalidatingCacheData 如果本地缓存是有效的则不下载。其他任何情况都从原地址重新下载 建立网络连接NSURLConnection，同步请求数据 1NSData *receivedData = (NSMutableData *)[NSURLConnection sendSynchronousRwquest:request returningResponse:&amp;response error:&amp;error]; 以上三步后，就需要将receivedData进行解析，一般是XML&#x2F;JSON 实例演示： detailViewController.h1234567891011121314151617#import &lt;UIKit/UIKit.h&gt;@interface vlinkagePersonViewController : UIViewController&lt;UITableViewDelegate,UITableViewDataSource&gt;//生成content的key值@property (strong, nonatomic) NSArray *keys;//生成content的value值@property (strong, nonatomic) NSArray *objects;//列表内容@property (strong, nonatomic) NSDictionary *content;//艺人的数据@property (retain, nonatomic) NSMutableData *personData;//艺人的数组数据@property (retain, nonatomic) NSArray *person;@end detailViewController.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#import &quot;vlinkagePersonViewController.h&quot;@interface vlinkagePersonViewController ()@end@implementation vlinkagePersonViewController@synthesize content;@synthesize personData;@synthesize person;- (void)viewDidLoad&#123; [super viewDidLoad]; // Do any additional setup after loading the view, typically from a nib. NSURL *url = [[NSURL alloc] initWithString:@&quot;http://xxx.xxx.xxx.xxx:xxx/person/actorlist?order_by=index&amp;start_date=2012-06-01&amp;end_date=2012-07-01&amp;start=1&amp;offset=10&amp;app_key=KSKdzSyeb99YdLwTMrzvuLumNYCM6pzT4Z3f27R4L3qq6jCs&quot;]; NSURLRequest *request = [[NSURLRequest alloc] initWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:60]; NSURLResponse *response = [[NSURLResponse alloc] init]; NSError *error = [[NSError alloc] init]; NSMutableData *receivedData = (NSMutableData *)[NSURLConnection sendSynchronousRequest:request returningResponse:&amp;response error:&amp;error]; self.person = [self readJsonData:receivedData]; if([self.person isKindOfClass:[NSDictionary class]])&#123; NSLog(@&quot;NSDictionary&quot;); &#125; if([self.person isKindOfClass:[NSArray class]])&#123; NSLog(@&quot;NSArray&quot;); &#125;&#125;-(NSArray *) readJsonData:(NSMutableData *)data&#123; //NSJSONSerialization提供了将JSON数据转换为Foundation对象（一般都是NSDictionary和NSArray） //和Foundation对象转换为JSON数据（可以通过调用isValidJSONObject来判断Foundation对象是否可以转换为JSON数据）。 NSError *error; NSDictionary *personDictionary = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers error:&amp;error]; NSDictionary *personInfo = [personDictionary objectForKey:@&quot;data&quot;]; NSArray *personList = [personInfo objectForKey:@&quot;list&quot;]; return personList;&#125;- (void)didReceiveMemoryWarning&#123; [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated.&#125;-(NSInteger)tableView:(UITableView*)tableView numberOfRowsInSection:(NSInteger)section&#123; return [self.person count];&#125;-(UITableViewCell*)tableView:(UITableView*)tableView cellForRowAtIndexPath:(NSIndexPath*)indexPath&#123; static NSString *CellIdentifier = @&quot;Cell&quot;; UITableViewCell*cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier]; if(cell == nil)&#123; cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier]; &#125; NSDictionary *dic=[self.person objectAtIndex:indexPath.row]; NSString *name=[dic objectForKey:@&quot;zh_name&quot;]; cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator; cell.textLabel.text = name; return cell; &#125;@end 结果还会将数据显示到table中","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS NSURLConnection异步下载数据","date":"2025-06-10T07:14:42.000Z","path":"2025/06/10/iOS-NSURLConnection异步下载数据.html","text":"异步下载支持应用程序在后台下载数据，在等待下载完成的过程中不会阻塞代码的运行 代码如下： detailViewController.h123456789101112131415#import &lt;UIKit/UIKit.h&gt;@interface vlinkagePersonViewController : UIViewController&lt;UITableViewDelegate,UITableViewDataSource&gt;//生成content的key值@property (strong, nonatomic) NSArray *keys;//生成content的value值@property (strong, nonatomic) NSArray *objects;//列表内容@property (strong, nonatomic) NSDictionary *content;//艺人的数据@property (retain, nonatomic) NSMutableData *personData;@end detailViewController.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#import &quot;vlinkagePersonViewController.h&quot;@interface vlinkagePersonViewController ()@end@implementation vlinkagePersonViewController@synthesize content;@synthesize personData;- (void)viewDidLoad&#123; [super viewDidLoad]; // Do any additional setup after loading the view, typically from a nib. NSURL *url = [[NSURL alloc] initWithString:@&quot;http://xxx.xxx.xxx.xxx:xxx/person/actorlist?order_by=index&amp;start_date=2012-06-01&amp;end_date=2012-07-01&amp;start=1&amp;offset=10&amp;app_key=KSKdzSyeb99YdLwTMrzvuLumNYCM6pzT4Z3f27R4L3qq6jCs&quot;]; NSURLRequest *request = [[NSURLRequest alloc] initWithURL:url cachePolicy:NSURLRequestReloadIgnoringCacheData timeoutInterval:60]; NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:request delegate:self]; if(!connection)&#123; NSLog(@&quot;链接失败!&quot;); &#125;else&#123; self.personData = [NSMutableData data]; self.content = [[NSDictionary alloc] init]; &#125; NSLog(@&quot;content = %@&quot;,self.content);&#125;//回掉方法-(void) connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response&#123; NSLog(@&quot;didReceiveResponse&quot;); [self.personData setLength:0];&#125;//将接收到的数据存储到字符串中-(void) connection:(NSURLConnection *)connection didReceiveData:(NSData *)data&#123; NSLog(@&quot;didReceiveData&quot;); [self.personData appendData:data];&#125;//下载已经完成- (void)connectionDidFinishLoading: (NSURLConnection *) connection&#123; NSLog(@&quot;connectionDidFinishLoading&quot;); //调用函数解析下载到的json格式的数据 [self readJsonData]; NSLog(@&quot;content %@&quot;,self.content);&#125;//下载失败-(void) connection:(NSURLConnection *)connection didFailWithError:(NSError *)error&#123; UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:[error localizedDescription] message:[error localizedFailureReason] delegate:self cancelButtonTitle:@&quot;OK!&quot; otherButtonTitles:nil]; [errorAlert show]; &#125;-(void) readJsonData&#123; //NSJSONSerialization提供了将JSON数据转换为Foundation对象（一般都是NSDictionary和NSArray） //和Foundation对象转换为JSON数据（可以通过调用isValidJSONObject来判断Foundation对象是否可以转换为JSON数据）。 NSError *error; NSDictionary *personDictionary = [NSJSONSerialization JSONObjectWithData:self.personData options:NSJSONReadingMutableContainers error:&amp;error]; NSDictionary *personInfo = [personDictionary objectForKey:@&quot;data&quot;]; NSDictionary *personList = [personInfo objectForKey:@&quot;list&quot;]; self.content = personList; NSLog(@&quot;personList %@&quot;,personList);&#125;- (void)didReceiveMemoryWarning&#123; [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated.&#125;-(NSInteger)tableView:(UITableView*)tableView numberOfRowsInSection:(NSInteger)section&#123; return 1;&#125;-(UITableViewCell*)tableView:(UITableView*)tableView cellForRowAtIndexPath:(NSIndexPath*)indexPath&#123; static NSString *CellIdentifier = @&quot;Cell&quot;; UITableViewCell*cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier]; if(cell == nil)&#123; cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier]; cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator; &#125; cell.textLabel.text=@&quot;话题&quot;; return cell; &#125;@end 输出的结果是： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281292013-04-26 16:45:55.174 vlinkagePerson3[67809:c07] content = &#123;&#125;2013-04-26 16:45:55.501 vlinkagePerson3[67809:c07] didReceiveResponse2013-04-26 16:45:55.501 vlinkagePerson3[67809:c07] didReceiveData2013-04-26 16:45:55.502 vlinkagePerson3[67809:c07] connectionDidFinishLoading2013-04-26 16:45:55.502 vlinkagePerson3[67809:c07] personList ( &#123; id = 175; &quot;is_attention&quot; = 0; score = &quot;7.84948333&quot;; &quot;zh_name&quot; = &quot;\\U5b59\\U4fea&quot;; &#125;, &#123; id = 1582; &quot;is_attention&quot; = 0; score = &quot;7.78961667&quot;; &quot;zh_name&quot; = &quot;\\U949f\\U6c49\\U826f&quot;; &#125;, &#123; id = 17577; &quot;is_attention&quot; = 0; score = &quot;7.69375000&quot;; &quot;zh_name&quot; = &quot;\\U5f20\\U6839\\U7855&quot;; &#125;, &#123; id = 35; &quot;is_attention&quot; = 0; score = &quot;7.60104167&quot;; &quot;zh_name&quot; = &quot;\\U6768\\U5e42&quot;; &#125;, &#123; id = 3880; &quot;is_attention&quot; = 0; score = &quot;7.56774167&quot;; &quot;zh_name&quot; = &quot;\\U6797\\U4f9d\\U6668&quot;; &#125;, &#123; id = 94; &quot;is_attention&quot; = 0; score = &quot;7.56668333&quot;; &quot;zh_name&quot; = &quot;\\U674e\\U5c0f\\U7490&quot;; &#125;, &#123; id = 504; &quot;is_attention&quot; = 0; score = &quot;7.48178333&quot;; &quot;zh_name&quot; = &quot;\\U5f20\\U6aac&quot;; &#125;, &#123; id = 3571; &quot;is_attention&quot; = 0; score = &quot;7.46722500&quot;; &quot;zh_name&quot; = &quot;\\U9a6c\\U5929\\U5b87&quot;; &#125;, &#123; id = 228; &quot;is_attention&quot; = 0; score = &quot;7.45210000&quot;; &quot;zh_name&quot; = &quot;\\U5b8b\\U4e39\\U4e39&quot;; &#125;, &#123; id = 329; &quot;is_attention&quot; = 0; score = &quot;7.44270833&quot;; &quot;zh_name&quot; = &quot;\\U80e1\\U6b4c&quot;; &#125;)2013-04-26 16:45:55.503 vlinkagePerson3[67809:c07] content ( &#123; id = 175; &quot;is_attention&quot; = 0; score = &quot;7.84948333&quot;; &quot;zh_name&quot; = &quot;\\U5b59\\U4fea&quot;; &#125;, &#123; id = 1582; &quot;is_attention&quot; = 0; score = &quot;7.78961667&quot;; &quot;zh_name&quot; = &quot;\\U949f\\U6c49\\U826f&quot;; &#125;, &#123; id = 17577; &quot;is_attention&quot; = 0; score = &quot;7.69375000&quot;; &quot;zh_name&quot; = &quot;\\U5f20\\U6839\\U7855&quot;; &#125;, &#123; id = 35; &quot;is_attention&quot; = 0; score = &quot;7.60104167&quot;; &quot;zh_name&quot; = &quot;\\U6768\\U5e42&quot;; &#125;, &#123; id = 3880; &quot;is_attention&quot; = 0; score = &quot;7.56774167&quot;; &quot;zh_name&quot; = &quot;\\U6797\\U4f9d\\U6668&quot;; &#125;, &#123; id = 94; &quot;is_attention&quot; = 0; score = &quot;7.56668333&quot;; &quot;zh_name&quot; = &quot;\\U674e\\U5c0f\\U7490&quot;; &#125;, &#123; id = 504; &quot;is_attention&quot; = 0; score = &quot;7.48178333&quot;; &quot;zh_name&quot; = &quot;\\U5f20\\U6aac&quot;; &#125;, &#123; id = 3571; &quot;is_attention&quot; = 0; score = &quot;7.46722500&quot;; &quot;zh_name&quot; = &quot;\\U9a6c\\U5929\\U5b87&quot;; &#125;, &#123; id = 228; &quot;is_attention&quot; = 0; score = &quot;7.45210000&quot;; &quot;zh_name&quot; = &quot;\\U5b8b\\U4e39\\U4e39&quot;; &#125;, &#123; id = 329; &quot;is_attention&quot; = 0; score = &quot;7.44270833&quot;; &quot;zh_name&quot; = &quot;\\U80e1\\U6b4c&quot;; &#125;)","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"一些iOS高效开源类库","date":"2025-06-10T05:43:48.000Z","path":"2025/06/10/一些iOS高效开源类库.html","text":"KissXml——xml解析库相关教程：http://www.iteye.com/topic/625849http://sencho.blog.163.com/blog/static/83056228201151743110540/很方便的一个xml解析器，支持Xpath查询。 skpsmtpmessage——Quick SMTP邮件发送svn checkout http://skpsmtpmessage.googlecode.com/svn/trunk/ skpsmtpmessage-read-onlygithub: git clone https://github.com/kailoa/iphone-smtp.git相关教程：http://disanji.net/2011/01/28/skpsmtpmessage-open-source-framework/skpsmtpmessage 是由Skorpiostech, Inc.为我们带来的一个SMTP协议的开源实现，使用Objective-c 实现，iOS系统的项目可以直接调用。 jsonframework——JSON支持相关教程：http://blog.csdn.net/xiaoguan2008/article/details/6732683它是一个开源框架，基于BSD协议发布。由于json-framework是开放源代码的，当你需要使用它时你只需将json的源代码加入到你的工程中。 ASIHttpRequest——HTTP Network库ASIHttpRequest库极大的简化了网络通 信，提供更先进的工具，例如文件上传工具，重定向处理工具、验证工具、等等。 MBProgressHUD——进展指示符库苹果的应用程序一般都会用一种优雅的，半透明的进度显示效果，不过这个API是不公开的，因此你要是用了，很可能被清除出AppStore。而 MBProgressHUD提供了一个替代方案，而且在用户角度上，实现的效果根本看不出和官方程序有什么差别。同时还提供了其他附加功能，比如虚拟进展 指示符，以及完成提示信息。整合到项目里也很容易，这里不细谈了。 zxing——二维码扫描库支持条形码&#x2F;二维码扫描的图形处理库，这是一个java库，在android上的功能比较完整。同时该库也支持ios，但只能支持二位条形码的扫描。 kal——iPhone日历控件一个类似于ios系统默认日历开源日历库，支持添加事件，自定义日历样式等功能。 Facebook iOS SDK——Facebook API类库大体来讲就是iPhone上的Facebook login，完全支持Facebook Graph API和the older REST api。 shareKit——分享库相关demo：http://www.cocoachina.com/bbs/read.php?tid-71760.html分享到开心，豆瓣，腾讯，新浪微博的api所用到的强大的分享库。 SDWebImage——简化网络图片处理用SDWebImage调用网站上的图片，跟本地调用内置在应用包里的图片一样简单。操作也很简单。 GData client——iPhone上所有Google相关服务的类库名字就说明一切了。跟Google相关的，值得一提的是，这个项目很开放。有很多示例程序供下载。 CorePlot——2D图形绘图仪CorePlot有很多解决方案将你的数据可视。同时也会提供各种迷人的图形效果，比如棒状图、饼状图、线状图等等，在他们网站上也提供了大量的范例图形，很多股票价格应用，游戏分数，个人财务管理都在用。 Three20——类似于Facebook的优秀的UI库Three20类库是Facebook自己做的，大而全是他最大的特色。把他整合到已有的项目中可能得费点周折，不过如果一开始你就用上了Three20，尤其是牵扯到很多web相关的项目的时候，你就能深刻体会到神马叫给力了。 FMDatabase——SQLite的Objective-C封装是SQLite的C API對初學者來說實在太麻煩太瑣碎，難度太高。FMDB說穿了其實只是把C API包裝成簡單易用的Objective-C类。對于SQLite初學者來說，大大減低了上手的難度。有了FMDB，寫程式時只要專心在SQLite的語法上，而不用去理那堆有看沒有懂的C API，實在是件快樂的事情。 来源:http://blog.csdn.net/jiarusun000/article/details/7170577","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS 演示使用Core","date":"2025-06-10T05:42:06.000Z","path":"2025/06/10/iOS-演示使用Core.html","text":"Core-Plot的安装见我的另外一篇文章 iOS 使用 Core Plot 绘制统计图表入门, 创建图表以及将图表放到视图上的方法是： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899- (void)viewDidLoad&#123; [super viewDidLoad]; // Do any additional setup after loading the view. NSLog(@&quot;title = %@&quot;,self.title); //创建图表 graph = [[CPTXYGraph alloc] initWithFrame:self.view.bounds]; //给图表添加一个主题 CPTTheme *theme = [CPTTheme themeNamed:kCPTDarkGradientTheme]; [graph applyTheme:theme]; //创建画板，将图表添加到画板 CPTGraphHostingView *hostingView = [[CPTGraphHostingView alloc] initWithFrame:self.view.bounds]; hostingView.hostedGraph = graph; [self.view addSubview:hostingView]; //设置图表的边框 //左边的padding设置为0 graph.paddingLeft = 0; //顶部的的padding设置0 graph.paddingTop = 0; //右边的padding设置为0 graph.paddingRight = 0; //底部的padding设置为0 graph.paddingBottom = 0; //坐标区域的边框设置 //左边的padding设置为45.0 graph.plotAreaFrame.paddingLeft = 40.0 ; //顶部的padding设置为40.0 graph.plotAreaFrame.paddingTop = 40.0 ; //右边的padding设置为5.0 graph.plotAreaFrame.paddingRight = 15.0 ; //底部的padding设置为80.0 graph.plotAreaFrame.paddingBottom = 80.0 ; //设置坐标范围 CPTXYPlotSpace *plotSpace = (CPTXYPlotSpace *)graph.defaultPlotSpace; plotSpace.allowsUserInteraction = YES; plotSpace.xRange = [CPTPlotRange plotRangeWithLocation:CPTDecimalFromFloat(0.0) length:CPTDecimalFromFloat(200.0)]; plotSpace.yRange = [CPTPlotRange plotRangeWithLocation:CPTDecimalFromFloat(0.0) length:CPTDecimalFromFloat(200.0)]; //设置坐标刻度大小 CPTXYAxisSet *axisSet = (CPTXYAxisSet *) graph.axisSet ; CPTXYAxis *x = axisSet.xAxis ; //x 轴：不显示小刻度线 x. minorTickLineStyle = nil ; // 大刻度线间距： 50 单位 x. majorIntervalLength = CPTDecimalFromString (@&quot;50&quot;); // 坐标原点： 0 x. orthogonalCoordinateDecimal = CPTDecimalFromString ( @&quot;0&quot; ); CPTXYAxis *y = axisSet.yAxis ; //y 轴：不显示小刻度线 y. minorTickLineStyle = nil ; // 大刻度线间距： 50 单位 y. majorIntervalLength = CPTDecimalFromString ( @&quot;50&quot; ); // 坐标原点： 0 y. orthogonalCoordinateDecimal = CPTDecimalFromString (@&quot;0&quot;); //创建绿色区域 dataSourceLinePlot = [[CPTScatterPlot alloc] init]; dataSourceLinePlot.identifier = @&quot;Green Plot&quot;; //设置绿色区域边框的样式 CPTMutableLineStyle *lineStyle = [dataSourceLinePlot.dataLineStyle mutableCopy]; //设置线的宽度 lineStyle.lineWidth = 1.f; //设置线的颜色 lineStyle.lineColor = [CPTColor greenColor]; //添加线到绿色区域中 dataSourceLinePlot.dataLineStyle = lineStyle; //设置透明实现添加动画 dataSourceLinePlot.opacity = 0.0f; //设置数据元代理 dataSourceLinePlot.dataSource = self; //绿色区域添加到图表中 [graph addPlot:dataSourceLinePlot]; // 创建一个颜色渐变：从 建变色 1 渐变到 无色 CPTGradient *areaGradient = [ CPTGradient gradientWithBeginningColor :[CPTColor greenColor] endingColor :[CPTColor colorWithComponentRed:0.65 green:0.65 blue:0.16 alpha:0.2]]; // 渐变角度： -90 度（顺时针旋转） areaGradient.angle = -90.0f ; // 创建一个颜色填充：以颜色渐变进行填充 CPTFill *areaGradientFill = [ CPTFill fillWithGradient :areaGradient]; // 为图形设置渐变区 dataSourceLinePlot.areaFill = areaGradientFill; dataSourceLinePlot.areaBaseValue = CPTDecimalFromString ( @&quot;0.0&quot; ); dataSourceLinePlot.interpolation = CPTScatterPlotInterpolationLinear ; dataForPlot1 = [[NSMutableArray alloc] init]; [self plotData];&#125; 里面调用了一个方法:plotData 有了上面的操作，其他的就是添加数据和显示数据了 下面给出方法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273//添加数据-(void) plotData&#123; if ([dataSourceLinePlot.identifier isEqual:@&quot;Green Plot&quot;]) &#123; NSString *xp1 = [NSString stringWithFormat:@&quot;%d&quot;,1]; NSString *yp1 = [NSString stringWithFormat:@&quot;%d&quot;,10]; NSMutableDictionary *point1 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp1, @&quot;x&quot;, yp1, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point1 atIndex:0]; NSString *xp2 = [NSString stringWithFormat:@&quot;%d&quot;,10]; NSString *yp2 = [NSString stringWithFormat:@&quot;%d&quot;,25]; NSMutableDictionary *point2 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp2, @&quot;x&quot;, yp2, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point2 atIndex:1]; NSString *xp3 = [NSString stringWithFormat:@&quot;%d&quot;,30]; NSString *yp3 = [NSString stringWithFormat:@&quot;%d&quot;,15]; NSMutableDictionary *point3 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp3, @&quot;x&quot;, yp3, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point3 atIndex:2]; NSString *xp4 = [NSString stringWithFormat:@&quot;%d&quot;,50]; NSString *yp4 = [NSString stringWithFormat:@&quot;%d&quot;,80]; NSMutableDictionary *point4 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp4, @&quot;x&quot;, yp4, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point4 atIndex:3]; NSString *xp5 = [NSString stringWithFormat:@&quot;%d&quot;,70]; NSString *yp5 = [NSString stringWithFormat:@&quot;%d&quot;,60]; NSMutableDictionary *point5 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp5, @&quot;x&quot;, yp5, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point5 atIndex:4]; NSString *xp6 = [NSString stringWithFormat:@&quot;%d&quot;,90]; NSString *yp6 = [NSString stringWithFormat:@&quot;%d&quot;,100]; NSMutableDictionary *point6 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp6, @&quot;x&quot;, yp6, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point6 atIndex:5]; NSString *xp7 = [NSString stringWithFormat:@&quot;%d&quot;,110]; NSString *yp7 = [NSString stringWithFormat:@&quot;%d&quot;,70]; NSMutableDictionary *point7 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp7, @&quot;x&quot;, yp7, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point7 atIndex:6]; NSString *xp8 = [NSString stringWithFormat:@&quot;%d&quot;,130]; NSString *yp8 = [NSString stringWithFormat:@&quot;%d&quot;,80]; NSMutableDictionary *point8 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp8, @&quot;x&quot;, yp8, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point8 atIndex:7]; NSString *xp9 = [NSString stringWithFormat:@&quot;%d&quot;,200]; NSString *yp9 = [NSString stringWithFormat:@&quot;%d&quot;,135]; NSMutableDictionary *point9 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:xp9, @&quot;x&quot;, yp9, @&quot;y&quot;, nil]; [dataForPlot1 insertObject:point9 atIndex:8]; &#125;&#125;-(NSUInteger)numberOfRecordsForPlot:(CPTPlot *)plot&#123; return [dataForPlot1 count];&#125;-(NSNumber *)numberForPlot:(CPTPlot *)plot field:(NSUInteger)fieldEnum recordIndex:(NSUInteger)index&#123; NSString *key = (fieldEnum == CPTScatterPlotFieldX ? @&quot;x&quot; : @&quot;y&quot;); NSNumber *num; //让视图偏移 if ( [(NSString *)plot.identifier isEqualToString:@&quot;Green Plot&quot;] ) &#123; num = [[dataForPlot1 objectAtIndex:index] valueForKey:key]; if ( fieldEnum == CPTScatterPlotFieldX ) &#123; num = [NSNumber numberWithDouble:[num doubleValue] - r]; &#125; &#125; //添加动画效果 CABasicAnimation *fadeInAnimation = [CABasicAnimation animationWithKeyPath:@&quot;opacity&quot;]; fadeInAnimation.duration = 1.0f; fadeInAnimation.removedOnCompletion = NO; fadeInAnimation.fillMode = kCAFillModeForwards; fadeInAnimation.toValue = [NSNumber numberWithFloat:2.0]; [dataSourceLinePlot addAnimation:fadeInAnimation forKey:@&quot;animateOpacity&quot;]; return num;&#125; 头文件的代码如下： 123456789101112131415161718#import &lt;UIKit/UIKit.h&gt;#import &quot;CorePlot-CocoaTouch.h&quot;@interface DetailsViewController : UIViewController&lt;CPTPlotDataSource, CPTAxisDelegate&gt;&#123; CPTXYGraph *graph; //画板 CPTScatterPlot *dataSourceLinePlot;//线 NSMutableArray *dataForPlot1; //坐标数组 NSTimer *timer1; //定时器 int j; int r; &#125;@property (retain, nonatomic) NSMutableArray *dataForPlot1;@property (strong, nonatomic) NSString *title;@property (strong, nonatomic) NSMutableArray *dataArray;@end","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"XCode帮助文档离线使用","date":"2025-06-10T05:39:10.000Z","path":"2025/06/10/XCode帮助文档离线使用.html","text":"1.在线查看帮助文件： Xcode下查看帮助文件，菜单Help-Developer Documentation在右上角搜索框中即可检索，但速度很慢，在线查看。 2.下载帮助文件到本地： 要想下载帮助文件，菜单Xcode-preferences-Documentation 右键Get Info可以看到Feed URL找到.atom文件地址，用FF浏览器访问可以看到下载列表，用迅雷下载即可。 atom链接如下，复制到浏览器地址栏即可见到下载列表（用IE浏览器好像不行） http://developer.apple.com/rss/com.apple.adc.documentation.AppleiPhone4\\_2.atom http://developer.apple.com/rss/com.apple.adc.documentation.AppleSnowLeopard.atom http://developer.apple.com/rss/com.apple.adc.documentation.AppleXcode3\\_2.atom 也可直接用下面的链接下载 http://devimages.apple.com/docsets/20101122/com.apple.adc.documentation.AppleLegacy.CoreReference.xar http://devimages.apple.com/docsets/20101122/com.apple.ADC\\_Reference\\_Library.DeveloperTools.xar http://devimages.apple.com/docsets/20101122/com.apple.adc.documentation.AppleSnowLeopard.JavaReference.xar http://devimages.apple.com/docsets/20101122/com.apple.adc.documentation.AppleSnowLeopard.CoreReference.Xcode4.xar http://devimages.apple.com/docsets/20101122/com.apple.adc.documentation.AppleiOS4\\_2.iOSLibrary.Xcode4.xar 3.下载后，拷贝到Mac的&#x2F;Developer&#x2F;Documentations&#x2F;Docset目录下， 使用终端命令： 1sudo xar -xf 下载的文件名.xar 将其解压，然后修复权限: 1sudo chown -R -P devdocs 解压后的文件名.docset 打开Xcode就可以离线浏览了。","tags":[{"name":"XCode","slug":"XCode","permalink":"https://blog.gowhich.com/tags/XCode/"}]},{"title":"Yii redirect 和createUrl的路由设置","date":"2025-06-10T04:05:23.000Z","path":"2025/06/10/Yii redirect 和createUrl的路由设置.html","text":"$this-&gt;redirect这里的$this是当前的controller。可能是应用程序的也可能是模块下的这里仅解一下第一个参url，当url是一个字符串时，它会自己动跳转，如$this-&gt;redirect(&#39;/&#39;); 会跳转到站点根，如果你的当前主机为localhost,那么他就会跳到http://localhost/ 再者$this-&gt;redirect(&#39;/books&#39;);，则会跳到http://localhost/books 在应用程序的controller中，也可以使用$this-&gt;redirect(&#39;books&#39;);也会跳到http://localhost/books 但是当你在module中这样使用，则会出现另一种情况，当你打开urlManager，并设置了隐藏脚本文件，如果你当前的访问地址为 http://localhost/admin/default/index 当使用$this-&gt;redirect(&#39;books&#39;); 跳转， 跳转后地址则是 http://localhost/admin/default/books 这里只是说一下，redirect的简单跳转，我个人建议，如果不是跳到其他项目，或外站$this-&gt;redirect(&#39;http://yiibook.com&#39;);，建议都使用下面的方法 url使用数组当url为数组时，会调用urlManager来根据路由组织跳转的路径，这种情况比较理想，而且会根据路由的修改而改变如果有一条路由为 1&#x27;book&#x27;=&gt;&#x27;admin/default/index&#x27; 格式为：’路由’&#x3D;&gt;’真实地址’,即指定了访问book，就相当于方问admin模型下的default控制器的index操作方法。既然使用了路由，主要是为了让url更友好，并隐藏真实地址那么，当想使用$this-&gt;redirect跳转到这个路由时，需要指定真实地址，如 1$this-&gt;redirect(array(&#x27;admin/default/index&#x27;)); 这样就会跳到这个地址了，而且url显示的确是book，而当你修路由名称时,如‘books’&#x3D;&gt;’admin&#x2F;default&#x2F;index’，或干脆去掉这个路径，都不用修改你的程序在模块中的情况，如果你当前在admin模块的controller中，使用跳转，则可以不用写moduleId直接使用$this-&gt;redirect(array(‘default&#x2F;index’)); 也是ok的，这样你的module也不会依赖于moduleId了再有如果你当前也在admin模块下的default控制器中，也可以使用$this-&gt;redirect(array(‘index’));进行跳转，不依赖于控制器的名字我们再看一下带参数的路由 1&#x27;book&lt;id:\\d+&gt;&#x27;=&gt;&#x27;admin/default/index&#x27; 那么，url需要为这个路径传递一个参数id，如 1$this-&gt;redirect(array(&#x27;admin/default/index&#x27;, &#x27;id&#x27;=&gt;1)); url格式为array(‘真实路径’, ‘参数名’&#x3D;&gt;’参数值’，’参数名2’&#x3D;&gt;’参数值2’, ….);Yii中许多组件或方法都有支持这种url的格式，如CMenu等等。 createUrl，有$this-&gt;createUrl和Yii::app()-&gt;createUrl，createUrl它会根据真实地址，组织成路由格式的地址根据上面的路由，创建url 1$this-&gt;createUrl(&#x27;admin/default/index&#x27;) 带参数情况 1$this-&gt;createUrl(&#x27;admin/default/index&#x27;, array(&#x27;id&#x27;=&gt;1)); admin模块中，使用 1$this-&gt;createUrl(&#x27;default/index&#x27;); 或 1$this-&gt;create(&#x27;index&#x27;); 不要使用Yii::app()-&gt;createUrl，避免依赖于具体的路由 注意一下redirect与createUrl的参数区别。","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"},{"name":"Yii","slug":"Yii","permalink":"https://blog.gowhich.com/tags/Yii/"}]},{"title":"Yii框架关于时区的设置","date":"2025-06-10T04:03:43.000Z","path":"2025/06/10/Yii框架关于时区的设置.html","text":"时区设置方法： 在php.ini 文件中添加 1date.timezone = &quot;Asia/Chongqing&quot; 或者 php中处理代码时候 需要 echo gmdate(&#39;Y-m-d H:m:s&#39;, time()+8\\*3600); 在php脚本中加入代码 date\\_default\\_timezone\\_set(&quot;Asia/Shanghai&quot;); 最简便的方法，在config/main.php 里 123return [ &#x27;timeZone&#x27; =&gt; &#x27;Asia/Chongqing&#x27;,];","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"},{"name":"Yii","slug":"Yii","permalink":"https://blog.gowhich.com/tags/Yii/"}]},{"title":"iOS plist的使用","date":"2025-06-10T03:52:11.000Z","path":"2025/06/10/iOS-plist的使用.html","text":"1，创建按command +N快捷键创建，或者File —&gt; New —&gt; New File，选择Mac OS X下的Property List创建plist文件名为plistdemo。 打开plistdemo文件，在空白出右键,右键选择Add row 添加数据,添加成功一条数据后，在这条数据上右键看到 value Type选择Dictionary。点加号添加数据。 创建完成之后用source code查看到plist文件是一个xml格式的文件。 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;&lt;plist version=&quot;1.0&quot;&gt;&lt;dict&gt; &lt;key&gt;one&lt;/key&gt; &lt;array&gt; &lt;string&gt;chenglong&lt;/string&gt; &lt;string&gt;lilianjie&lt;/string&gt; &lt;string&gt;zhenzidan&lt;/string&gt; &lt;string&gt;shixiaolong&lt;/string&gt; &lt;/array&gt; &lt;key&gt;two&lt;/key&gt; &lt;array&gt; &lt;string&gt;liushishi&lt;/string&gt; &lt;string&gt;tangyan&lt;/string&gt; &lt;string&gt;zhangziyi&lt;/string&gt; &lt;string&gt;yangmi&lt;/string&gt; &lt;/array&gt;&lt;/dict&gt;&lt;/plist&gt; 读取数据的方式，和方法可以参考下面的代码： 1234567891011121314151617181920- (void)viewDidLoad&#123; [super viewDidLoad]; //取得person.plist绝对路径 //person.plist本身是一个NSDictionary,以键-值的形式存储字符串数组 NSString *path=[[NSBundle mainBundle] pathForResource:@&quot;person&quot; ofType:@&quot;plist&quot;]; //转换成NSDictionary对象 NSDictionary *dict=[[NSDictionary alloc] initWithContentsOfFile:path]; self.names=dict; //重置 [self resetSearch]; //重新载入数据 [self.table reloadData]; &#125; 我是直接放在了viewDidLoad这个方法中","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS使用Core Plot绘制统计图表入门","date":"2025-06-10T03:34:31.000Z","path":"2025/06/10/iOS使用Core-Plot绘制统计图表入门.html","text":"iOS(iPhone&#x2F;iPad) 下图形组件有两个有名的，s7graphview 和 Core Plot ，它们都是在Google上托管的代码，听说 Core Plot 比较强，因为前者仅支持曲线图，后者呢曲线图、饼图、柱状图等通吃，且较活跃。那就专注下 Core Plot 的使用。它提供了 MacOSX 和 iOS 下的组件库，我只用到它的 iOS 图表库。 Core Plot能画出来图表的效果应该多看看：http://code.google.com/p/core-plot/wiki/PlotExamples，相信看过之后绝大多数的 iOS下的图表可以用它来满足你了。 配置其实很简单的，先从 http://code.google.com/p/core-plot/downloads/list下载最新版的CorePlot，比如当前是：CorePlot_0.4.zip，解压开，然后就两步： 把目录 CorePlot_0.4&#x2F;Binaries&#x2F; iOS中的libCorePlotCocoaTouch.a和整个子目录CorePlotHeaders从Finder中一并拖入到当前项目中，选择Copyitem into destination group’s folder (if needed)，Add to targets里选上相应的target。此时你可以在项目的target中Build Phases页里 Link Binary With Libraries中看到有了libCorePlot-CocoaTouch.a. 再到相应Target的 Build Settings页里，Other Linker Flags项中加上 -ObjC -all_load 选择新项目的“info-&gt;Build”，在“Header Search Paths”中添加Core Plot头文件搜索路径，如：&#x2F;Users&#x2F;davidzhang&#x2F;project&#x2F;core-plot&#x2F;framework。注意要选中“Recursive”小勾（英文原文中没有提这一点）。同时，在Other Linker Flags中要增加两个选项：-ObjC和-all_load（英文原文中遗漏了第2个选项）。 原文档的安装说明是： Install Binaries for iOS Copy the CorePlotHeaders to your Xcode project Copy libCorePlotCocoaTouch.a to your Xcode project Add to Other Linker Flags in your target build settings: -ObjC -all_load Add the QuartzCore framework to the project. Add a CPTGraph to your application. See the example apps in Source Code to see how, or read the documentation. 贴一下我的实例代码： DetailViewController.h123456#import &lt;UIKit/UIKit.h&gt;#import &quot;CorePlot-CocoaTouch.h&quot;@interface DetailsViewController : UIViewController&lt;CPTPlotDataSource, CPTAxisDelegate&gt;@property (strong, nonatomic) NSString *title;@property (strong, nonatomic) NSMutableArray *dataArray;@end DetailViewController.m12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#import &quot;DetailsViewController.h&quot;@interface DetailsViewController ()@end@implementation DetailsViewController@synthesize title,dataArray;-(void)viewDidAppear:(BOOL)animated&#123; //初始化数组，并放入十个 0 － 20 间的随机数 self.dataArray = [[NSMutableArray alloc] init]; for(int i=0; i&lt; 10; i++)&#123; [self.dataArray addObject:[NSNumber numberWithInt:rand()%20]]; &#125; CGRect frame = CGRectMake(10,10, 300,100); //图形要放在一个 CPTGraphHostingView 中，CPTGraphHostingView 继承自 UIView CPTGraphHostingView *hostView = [[CPTGraphHostingView alloc] initWithFrame:frame]; //把 CPTGraphHostingView 加到你自己的 View 中 [self.view addSubview:hostView]; hostView.backgroundColor = [UIColor blueColor]; //在 CPTGraph 中画图，这里的 CPTXYGraph 是个曲线图 //要指定 CPTGraphHostingView 的 hostedGraph 属性来关联 CPTXYGraph *graph = [[CPTXYGraph alloc] initWithFrame:hostView.frame]; hostView.hostedGraph = graph; CPTScatterPlot *scatterPlot = [[CPTScatterPlot alloc] initWithFrame:graph.bounds]; [graph addPlot:scatterPlot]; scatterPlot.dataSource = self; //设定数据源，需应用 CPTPlotDataSource 协议 //设置 PlotSpace，这里的 xRange 和 yRange 要理解好，它决定了点是否落在图形的可见区域 //location 值表示坐标起始值，一般可以设置元素中的最小值 //length 值表示从起始值上浮多少，一般可以用最大值减去最小值的结果 //其实我倒觉得，CPTPlotRange:(NSRange) range 好理解些，可以表示值从 0 到 20 CPTXYPlotSpace *plotSpace = (CPTXYPlotSpace *) scatterPlot.plotSpace; plotSpace.xRange = [CPTPlotRange plotRangeWithLocation:CPTDecimalFromFloat(0) length:CPTDecimalFromFloat([self.dataArray count]-1)]; plotSpace.yRange = [CPTPlotRange plotRangeWithLocation:CPTDecimalFromFloat(0) length:CPTDecimalFromFloat(20)]; //下面省去了坐标与线型及其他图形风格的代码// // [plotSpace release];// [graph release];// [hostView release];&#125;//询问有多少个数据，在 CPTPlotDataSource 中声明的- (NSUInteger) numberOfRecordsForPlot:(CPTPlot *)plot &#123; return [self.dataArray count];&#125;//询问一个个数据值，在 CPTPlotDataSource 中声明的- (NSNumber *) numberForPlot:(CPTPlot *)plot field:(NSUInteger)fieldEnum recordIndex:(NSUInteger)index &#123; if(fieldEnum == CPTScatterPlotFieldY)&#123; //询问 Y 值时 return [self.dataArray objectAtIndex:index]; &#125;else&#123; //询问 X 值时 return [NSNumber numberWithInt:index]; &#125;&#125;- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil&#123; self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]; if (self) &#123; // Custom initialization &#125; return self;&#125;- (void)viewDidLoad&#123; [super viewDidLoad]; // Do any additional setup after loading the view. NSLog(@&quot;title = %@&quot;,self.title);&#125;- (void)didReceiveMemoryWarning&#123; [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated.&#125;@end","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"PHP创建Feed/RSS订阅","date":"2025-06-10T03:23:00.000Z","path":"2025/06/10/PHP创建Feed-RSS订阅.html","text":"好多都是第三方的，自己闲麻烦，自己就整理了一套自己一个rss类，对需要的朋友给个帮助吧，也方便了自己，呵呵 直接贴代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171&lt;?phpclass Rss extends CController&#123; //public public $rss_ver = &quot;2.0&quot;; public $channel_title = &#x27;&#x27;; public $channel_link = &#x27;&#x27;; public $channel_description = &#x27;&#x27;; public $language = &#x27;zh_CN&#x27;; public $copyright = &#x27;&#x27;; public $webMaster = &#x27;&#x27;; public $pubDate = &#x27;&#x27;; public $lastBuildDate = &#x27;&#x27;; public $generator = &#x27;GoWhich RSS Generator&#x27;; public $content = &#x27;&#x27;; public $items = []; /** * 添加基本信息 * @param string $title * @param string $link * @param string $description */ public function __construct($title, $link, $description) &#123; $this-&gt;channel_title = $title; $this-&gt;channel_link = $link; $this-&gt;channel_description = $description; $this-&gt;pubDate = Date(&#x27;Y-m-d H:i:s&#x27;, time()); $this-&gt;lastBuildDate = Date(&#x27;Y-m-d H:i:s&#x27;, time()); &#125; /** * 添加一个节点 * @param string $title * @param string $link * @param string $description * @param date $pubDate */ public function addItem($title, $link, $description, $pubDate) &#123; $this-&gt;items[] = [&#x27;title&#x27; =&gt; $title, &#x27;link&#x27; =&gt; $link, &#x27;descrīption&#x27; =&gt; $description, &#x27;pubDate&#x27; =&gt; $pubDate]; &#125; /** * 构建xml元素 */ public function buildRSS() &#123; $s = &lt;&lt;&lt;RSS&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;\\n&lt;rss version=&quot;2.0&quot;&gt;\\nRSS; // start channel $s .= &quot;&lt;channel&gt;\\n&quot;; $s .= &quot;&lt;title&gt;&lt;![CDATA[&#123;$this-&gt;channel_title&#125;]]&gt;&lt;/title&gt;\\n&quot;; $s .= &quot;&lt;link&gt;&lt;![CDATA[&#123;$this-&gt;channel_link&#125;]]&gt;&lt;/link&gt;\\n&quot;; $s .= &quot;&lt;descrīption&gt;&lt;![CDATA[&#123;$this-&gt;channel_description&#125;]]&gt;&lt;/descrīption&gt;\\n&quot;; $s .= &quot;&lt;language&gt;&#123;$this-&gt;language&#125;&lt;/language&gt;\\n&quot;; if (!empty($this-&gt;copyright)) &#123; $s .= &quot;&lt;copyright&gt;&lt;![CDATA[&#123;$this-&gt;copyright&#125;]]&gt;&lt;/copyright&gt;\\n&quot;; &#125; if (!empty($this-&gt;webMaster)) &#123; $s .= &quot;&lt;webMaster&gt;&lt;![CDATA[&#123;$this-&gt;webMaster&#125;]]&gt;&lt;/webMaster&gt;\\n&quot;; &#125; if (!empty($this-&gt;pubDate)) &#123; $s .= &quot;&lt;pubDate&gt;&#123;$this-&gt;pubDate&#125;&lt;/pubDate&gt;\\n&quot;; &#125; if (!empty($this-&gt;lastBuildDate)) &#123; $s .= &quot;&lt;lastBuildDate&gt;&#123;$this-&gt;lastBuildDate&#125;&lt;/lastBuildDate&gt;\\n&quot;; &#125; if (!empty($this-&gt;generator)) &#123; $s .= &quot;&lt;generator&gt;&#123;$this-&gt;generator&#125;&lt;/generator&gt;\\n&quot;; &#125; // start items for ($i = 0; $i &lt; count($this-&gt;items); $i++) &#123; $s .= &quot;&lt;item&gt;\\n&quot;; $s .= &quot;&lt;title&gt;&lt;![CDATA[&#123;$this-&gt;items[$i][&#x27;title&#x27;]&#125;]]&gt;&lt;/title&gt;\\n&quot;; $s .= &quot;&lt;link&gt;&lt;![CDATA[&#123;$this-&gt;items[$i][&#x27;link&#x27;]&#125;]]&gt;&lt;/link&gt;\\n&quot;; $s .= &quot;&lt;descrīption&gt;&lt;![CDATA[&#123;$this-&gt;items[$i][&#x27;descrīption&#x27;]&#125;]]&gt;&lt;/descrīption&gt;\\n&quot;; $s .= &quot;&lt;pubDate&gt;&#123;$this-&gt;items[$i][&#x27;pubDate&#x27;]&#125;&lt;/pubDate&gt;\\n&quot;; $s .= &quot;&lt;/item&gt;\\n&quot;; &#125; // close channel $s .= &quot;&lt;/channel&gt;\\n&lt;/rss&gt;&quot;; $this-&gt;content = $s; &#125; /** * 输出rss内容 */ public function show() &#123; if (empty($this-&gt;content)) &#123; $this-&gt;buildRSS(); &#125; return $this-&gt;content; &#125; /** * 设置版权 * @param unknown $copyright */ public function setCopyRight($copyright) &#123; $this-&gt;copyright = $copyright; &#125; /** * 设置管理员 * @param unknown $master */ public function setWebMaster($master) &#123; $this-&gt;webMaster = $master; &#125; /** * 设置发布时间 * @param date $date */ public function setpubDate($date) &#123; $this-&gt;pubDate = $date; &#125; /** * 设置建立时间 * @param unknown $date */ public function setLastBuildDate($date) &#123; $this-&gt;lastBuildDate = $date; &#125; /** * 将rss保存为文件 * @param String $fname * @return boolean */ public function saveToFile($fname) &#123; $handle = fopen($fname, &#x27;wb&#x27;); if (false === $handle) &#123; return false; &#125; fwrite($handle, $this-&gt;content); fclose($handle); &#125; /** * 获取文件的内容 * @param String $fname * @return boolean */ public function getFile($fname) &#123; $handle = fopen($fname, &#x27;r&#x27;); if (false === $handle) &#123; return false; &#125; while (!feof($handle)) &#123; echo fgets($handle); &#125; fclose($handle); &#125;&#125; 如果还是不都清楚可以到github上自己下载好了 github地址：https://github.com/zhangda89/php-library/blob/master/Rss.php","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"CURL模拟登录新浪微博","date":"2025-06-10T02:44:49.000Z","path":"2025/06/10/CURL模拟登录新浪微博.html","text":"使用curl登录很简单，关键是破解它的加密方式 这个加密方式是如何破解的，我才用的是nodejs的方式，直接执行里面的js的函数，让他自己进行加密解密，除掉了自己浪费时间去解密的方法 搭建nodejs，然后自己调用接口去传递参数解密，这个过程我写在了我的一篇文章里面 nodejs搭建web服务器 ,其实就是我的一个解密的接口，可以按照此方法进行搭建。 下面给出，最简单的部分，就是使用curl获取新浪微博的cookie 这里给出我的代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121&lt;?phpclass Control&#123; /** * 获取新浪微博的登录的加密数据 * */ public static function getEntryData($servertime, $nonce, $password) &#123; return self::curlRequest(&#x27;http://xxx.xxx.xxx.xxx:8006/weibo?servertime=&#x27; . $servertime . &#x27;&amp;nonce=&#x27; . $nonce . &#x27;&amp;password=&#x27; . $password, &#x27;&#x27;, &#x27;&#x27;); // return self::curlRequest(&#x27;http://10.211.55.5:8006/weibo?servertime=&#x27;.$servertime.&#x27;&amp;nonce=&#x27;.$nonce.&#x27;&amp;password=&#x27;.$password,&#x27;&#x27;,&#x27;&#x27;); &#125; /** * CURL请求 辅助登录的 * @param String $url 请求地址 * @param Array $data 请求数据 */ public static function curlRequest($url, $data = &#x27;&#x27;, $cookieFile = &#x27;&#x27;) &#123; $ch = curl_init(); $option = [ CURLOPT_URL =&gt; $url, CURLOPT_HEADER =&gt; 0, CURLOPT_RETURNTRANSFER =&gt; 1, CURLOPT_HTTPHEADER =&gt; [&#x27;Expect:&#x27;], CURLOPT_SSL_VERIFYPEER =&gt; false, CURLOPT_USERAGENT =&gt; &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4&#x27;, ]; if ($cookieFile) &#123; $option[CURLOPT_COOKIEJAR] = $cookieFile; $option[CURLOPT_COOKIEFILE] = $cookieFile; &#125; if ($data) &#123; $option[CURLOPT_POST] = 1; $option[CURLOPT_POSTFIELDS] = $data; &#125; curl_setopt_array($ch, $option); $response = curl_exec($ch); if (curl_errno($ch) &gt; 0) &#123; //echo &quot;CURL ERROR:$url &quot;.curl_error($ch); &#125; curl_close($ch); return $response; &#125; /** * * 微博登录 * @param string $username * @param string $password * @param string $cookie_file */ public static function loginWeibo($username, $password, $cookie_file) &#123; if (!empty($username) &amp;&amp; !empty($password)) &#123; $preLoginData = self::curlRequest(&#x27;http://login.sina.com.cn/sso/prelogin.php?entry=account&amp;callback=sinaSSOController.preloginCallBack&amp;su=&#x27; . base64_encode($username) . &#x27;&amp;rsakt=mod&amp;checkpin=1&amp;client=ssologin.js(v1.4.5)&#x27;, &#x27;&#x27;, $cookie_file); preg_match(&#x27;/sinaSSOController.preloginCallBack\\((.*)\\)/&#x27;, $preLoginData, $preArr); $jsonArr = json_decode($preArr[1], true); if (is_array($jsonArr)) &#123; $postArr = [ &#x27;entry&#x27; =&gt; &#x27;weibo&#x27;, &#x27;gateway&#x27; =&gt; 1, &#x27;from&#x27; =&gt; &#x27;&#x27;, &#x27;savestate&#x27; =&gt; 7, &#x27;useticket&#x27; =&gt; 1, &#x27;pagerefer&#x27; =&gt; &#x27;&#x27;, &#x27;vsnf&#x27; =&gt; 1, &#x27;su&#x27; =&gt; base64_encode(urlencode($username)), &#x27;service&#x27; =&gt; &#x27;sso&#x27;, &#x27;servertime&#x27; =&gt; $jsonArr[&#x27;servertime&#x27;], &#x27;nonce&#x27; =&gt; $jsonArr[&#x27;nonce&#x27;], &#x27;pwencode&#x27; =&gt; &#x27;rsa2&#x27;, &#x27;rsakv&#x27; =&gt; $jsonArr[&#x27;rsakv&#x27;], &#x27;prelt&#x27; =&gt; 0, &#x27;sp&#x27; =&gt; self::getEntryData($jsonArr[&#x27;servertime&#x27;], $jsonArr[&#x27;nonce&#x27;], $password), &#x27;encoding&#x27; =&gt; &#x27;UTF-8&#x27;, &#x27;url&#x27; =&gt; &#x27;http://weibo.com/ajaxlogin.php?framelogin=1&amp;callback=parent.sinaSSOController.feedBackUrlCallBack&#x27;, &#x27;returntype&#x27; =&gt; &#x27;META&#x27;, ]; $loginData = self::curlRequest(&#x27;http://login.sina.com.cn/sso/login.php?client=ssologin.js(v1.4.5)&#x27;, $postArr, $cookie_file); if ($loginData) &#123; $matchs = []; preg_match(&#x27;/replace\\([\\&#x27;|\\&quot;](.*?)[\\&#x27;|\\&quot;]\\)/&#x27;, $loginData, $matchs); $loginResult = self::curlRequest($matchs[1], &#x27;&#x27;, $cookie_file); $loginResultArr = []; preg_match(&#x27;/feedBackUrlCallBack\\((.*?)\\)/&#x27;, $loginResult, $loginResultArr); if (!empty($loginResultArr[1])) &#123; $userInfo = json_decode($loginResultArr[1]); if ($userInfo-&gt;result) &#123; // echo &quot;Login Success \\n&quot;; //throw new Exception(&#x27;Login Success&#x27;); &#125; &#125; else &#123; // echo &quot;Login Failure \\n&quot;; //throw new Exception(&#x27;Login Failure&#x27;); &#125; &#125; else &#123; //echo &quot;Login SinaWeibo Failure \\n&quot;; //throw new Exception(&#x27;Login SinaWeibo Failure&#x27;); &#125; &#125; else &#123; //echo &quot;preLoginData \\n&quot;; //throw new Exception(&quot;$preLoginData&quot;); &#125; &#125; else &#123; //echo &quot;Param Error. \\n&quot;; //throw new Exception(&#x27;Param Error.&#x27;); &#125; &#125;&#125; 获取加密的部分，其实我已经在我的上篇博文写过了，可以参考一下 nodejs搭建web服务器","tags":[{"name":"CURL","slug":"CURL","permalink":"https://blog.gowhich.com/tags/CURL/"}]},{"title":"Nodejs搭建web服务器","date":"2025-06-10T02:40:46.000Z","path":"2025/06/10/Nodejs搭建web服务器.html","text":"nodejs的安装其实是很简单的，官方文档是有直接安装的文件的，之后linux下的稍微麻烦一点，不过只要解压一下，然后直接安装，也是比较简单的。 如果不懂的可以参考我的这篇文章nodejs的安装，测试，hello world 下面演示我的web服务器 第一个是引导文件： 直接看代码好了 index.js 12345678910var server = require(&#x27;./server&#x27;);var router = require(&#x27;./router&#x27;);var requestHandlers = require(&#x27;./requestHandlers&#x27;);var handle = &#123;&#125;;handle[&quot;/&quot;] = requestHandlers.start;handle[&quot;/start&quot;] = requestHandlers.start;handle[&quot;/upload&quot;] = requestHandlers.upload;handle[&quot;/weibo&quot;] = requestHandlers.weibo;handle[&quot;/baiduindex&quot;] = requestHandlers.baiduindex;server.start(router.route,handle); 看到上面的代码中，require了三个文件，下面我分别给出这三个文件 server.js 123456789101112131415var http = require(&#x27;http&#x27;);var url = require(&#x27;url&#x27;);var querystring = require(&quot;querystring&quot;);function start(route,handle)&#123; function onRequest(request,response)&#123; var url_array = url.parse(request.url,true); var pathname = url_array.pathname; var query_param = url_array.query; route(handle, pathname, response, query_param); &#125; http.createServer(onRequest).listen(8006); console.log(&quot;Server has started. listen:8006&quot;);&#125;exports.start = start; router.js 123456789101112function route(handle,pathname, response, query_param)&#123;// console.log(&quot;About to route a request for &quot;+pathname); if(typeof handle[pathname] === &quot;function&quot;)&#123; return handle[pathname](response, query_param); &#125;else&#123;// console.log(&quot;No request handler found for &quot; + pathname); response.writeHead(404, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;); response.write(&quot;404 Not found&quot;); response.end(); &#125;&#125;exports.route = route; requestHandlers.js 1234567891011121314151617181920212223242526272829303132var querystring = require(&quot;querystring&quot;);var sinaweibo = require(&quot;./sinaWeibo&quot;);var baidu = require(&quot;./baiduIndex&quot;);function start(response, query_param)&#123;// console.log(&quot;Request handler &#x27;start&#x27; was called.&quot;); return &quot;Hello Start&quot;;&#125;function upload(response, query_param)&#123;// console.log(&quot;Request handler &#x27;upload&#x27; was called.&quot;); response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;); response.write(&quot;You&#x27;ve sent: &quot; + postData +&quot; &quot; + querystring.parse(postData).text); response.end();&#125;function weibo(response, query_param)&#123; var content = sinaweibo.GetRSA(query_param.servertime,query_param.nonce,query_param.password); response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;); response.write(content); response.end();&#125;function baiduindex(response, query_param)&#123; var content = baidu.execEval(query_param.input,query_param.key); response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;); response.write(content); response.end();&#125;exports.start = start;exports.upload = upload;exports.weibo = weibo;exports.baiduindex = baiduindex; 在requestHandlers.js文件中，又引入了两个文件，分别是关于sinaWeibo和baiduIndex 在这两个文件中分别是关于对应的一个操作，如果你要针对于自己的操作，也可以自己加入到里面来。 sinaWeibo.jsvar sinaSSOEncoder = sinaSSOEncoder || &#123;&#125;;(function()&#123; var hexcase = 0; var chrsz = 8; this.hex_sha1 = function(s)&#123;return binb2hex(core_sha1(str2binb(s),s.length * chrsz));&#125;; var core_sha1 = function(x, len) &#123; x[len &gt;&gt; 5] |= 0x80 &lt;&lt; (24 - len % 32); x[((len + 64 &gt;&gt; 9) &lt;&lt; 4) + 15] = len; var w = Array(80); var a = 1732584193; var b = -271733879; var c = -1732584194; var d = 271733878; var e = -1009589776; for(var i = 0; i &lt; x.length; i += 16) &#123; var olda = a; var oldb = b; var oldc = c; var oldd = d; var olde = e; for(var j = 0; j &lt; 80; j++) &#123; if(j &lt; 16) w[j] = x[i + j]; else w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1); var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j))); e = d; d = c; c = rol(b, 30); b = a; a = t; &#125; a = safe_add(a, olda); b = safe_add(b, oldb); c = safe_add(c, oldc); d = safe_add(d, oldd); e = safe_add(e, olde); &#125; return Array(a, b, c, d, e); &#125;; /* * Perform the appropriate triplet combination function for the current * iteration */ var sha1_ft = function(t, b, c, d) &#123; if(t &lt; 20) return (b &amp; c) | ((~b) &amp; d); if(t &lt; 40) return b ^ c ^ d; if(t &lt; 60) return (b &amp; c) | (b &amp; d) | (c &amp; d); return b ^ c ^ d; &#125;; /* * Determine the appropriate additive constant for the current iteration */ var sha1_kt = function(t) &#123; return (t &lt; 20) ? 1518500249 : (t &lt; 40) ? 1859775393 : (t &lt; 60) ? -1894007588 : -899497514; &#125;; /* * Add integers, wrapping at 2^32. This uses 16-bit operations internally * to work around bugs in some JS interpreters. */ var safe_add = function(x, y) &#123; var lsw = (x &amp; 0xFFFF) + (y &amp; 0xFFFF); var msw = (x &gt;&gt; 16) + (y &gt;&gt; 16) + (lsw &gt;&gt; 16); return (msw &lt;&lt; 16) | (lsw &amp; 0xFFFF); &#125;; /* * Bitwise rotate a 32-bit number to the left. */ var rol = function(num, cnt) &#123; return (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (32 - cnt)); &#125;; var str2binb = function(str) &#123; var bin = Array(); var mask = (1 &lt;&lt; chrsz) - 1; for(var i = 0; i &lt; str.length * chrsz; i += chrsz) bin[i&gt;&gt;5] |= (str.charCodeAt(i /chrsz) &amp; mask) &lt;&lt; (24 - i%32); return bin; &#125;; var binb2hex = function(binarray) &#123; var hex_tab = hexcase ? &quot;0123456789ABCDEF&quot; : &quot;0123456789abcdef&quot;; var str = &quot;&quot;; for(var i = 0; i &lt; binarray.length * 4; i++)&#123; str += hex_tab.charAt((binarray[i&gt;&gt;2] &gt;&gt; ((3 - i%4)*8+4)) &amp; 0xF) + hex_tab.charAt((binarray[i&gt;&gt;2] &gt;&gt; ((3 - i%4)*8 )) &amp; 0xF); &#125; return str; &#125;; this.base64 = &#123; encode:function(input) &#123; input = &quot;&quot; + input; // Convert to string for encode if (input == &quot;&quot;) return &quot;&quot;; var output = &#x27;&#x27;; var chr1, chr2, chr3 = &#x27;&#x27;; var enc1, enc2, enc3, enc4 = &#x27;&#x27;; var i = 0; do &#123; chr1 = input.charCodeAt(i++); chr2 = input.charCodeAt(i++); chr3 = input.charCodeAt(i++); enc1 = chr1 &gt;&gt; 2; enc2 = ((chr1 &amp; 3) &lt;&lt; 4) | (chr2 &gt;&gt; 4); enc3 = ((chr2 &amp; 15) &lt;&lt; 2) | (chr3 &gt;&gt; 6); enc4 = chr3 &amp; 63; if (isNaN(chr2))&#123; enc3 = enc4 = 64; &#125; else if (isNaN(chr3))&#123; enc4 = 64; &#125; output = output+this._keys.charAt(enc1)+this._keys.charAt(enc2)+this._keys.charAt(enc3)+this._keys.charAt(enc4); chr1 = chr2 = chr3 = &#x27;&#x27;; enc1 = enc2 = enc3 = enc4 = &#x27;&#x27;; &#125; while (i &lt; input.length); return output; &#125;, _keys: &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#x27; &#125;;&#125;).call(sinaSSOEncoder);//RSA;(function()&#123; /********************* jsbn.js start ************************/ // Copyright (c) 2005 Tom Wu // All Rights Reserved. // See &quot;LICENSE&quot; for details. // Basic JavaScript BN library - subset useful for RSA encryption. // Bits per digit var dbits; // JavaScript engine analysis var canary = 0xdeadbeefcafe; var j_lm = ((canary&amp;0xffffff)==0xefcafe); // (public) Constructor function BigInteger(a,b,c) &#123; if(a != null) if(&quot;number&quot; == typeof a) this.fromNumber(a,b,c); else if(b == null &amp;&amp; &quot;string&quot; != typeof a) this.fromString(a,256); else this.fromString(a,b); &#125; // return new, unset BigInteger function nbi() &#123; return new BigInteger(null); &#125; // am: Compute w_j += (x*this_i), propagate carries, // c is initial carry, returns final carry. // c &lt; 3*dvalue, x &lt; 2*dvalue, this_i &lt; dvalue // We need to select the fastest one that works in this environment. // am1: use a single mult and divide to get the high bits, // max digit bits should be 26 because // max internal value = 2*dvalue^2-2*dvalue (&lt; 2^53) function am1(i,x,w,j,c,n) &#123; while(--n &gt;= 0) &#123; var v = x*this[i++]+w[j]+c; c = Math.floor(v/0x4000000); w[j++] = v&amp;0x3ffffff; &#125; return c; &#125; // am2 avoids a big mult-and-extract completely. // Max digit bits should be &lt;= 30 because we do bitwise ops // on values up to 2*hdvalue^2-hdvalue-1 (&lt; 2^31) function am2(i,x,w,j,c,n) &#123; var xl = x&amp;0x7fff, xh = x&gt;&gt;15; while(--n &gt;= 0) &#123; var l = this[i]&amp;0x7fff; var h = this[i++]&gt;&gt;15; var m = xh*l+h*xl; l = xl*l+((m&amp;0x7fff)&lt;&lt;15)+w[j]+(c&amp;0x3fffffff); c = (l&gt;&gt;&gt;30)+(m&gt;&gt;&gt;15)+xh*h+(c&gt;&gt;&gt;30); w[j++] = l&amp;0x3fffffff; &#125; return c; &#125; // Alternately, set max digit bits to 28 since some // browsers slow down when dealing with 32-bit numbers. function am3(i,x,w,j,c,n) &#123; var xl = x&amp;0x3fff, xh = x&gt;&gt;14; while(--n &gt;= 0) &#123; var l = this[i]&amp;0x3fff; var h = this[i++]&gt;&gt;14; var m = xh*l+h*xl; l = xl*l+((m&amp;0x3fff)&lt;&lt;14)+w[j]+c; c = (l&gt;&gt;28)+(m&gt;&gt;14)+xh*h; w[j++] = l&amp;0xfffffff; &#125; return c; &#125; // Mozilla/Netscape seems to prefer am3 BigInteger.prototype.am = am3; dbits = 28; BigInteger.prototype.DB = dbits; BigInteger.prototype.DM = ((1&lt;&lt;dbits)-1); BigInteger.prototype.DV = (1&lt;&lt;dbits); var BI_FP = 52; BigInteger.prototype.FV = Math.pow(2,BI_FP); BigInteger.prototype.F1 = BI_FP-dbits; BigInteger.prototype.F2 = 2*dbits-BI_FP; // Digit conversions var BI_RM = &quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;; var BI_RC = new Array(); var rr,vv; rr = &quot;0&quot;.charCodeAt(0); for(vv = 0; vv &lt;= 9; ++vv) BI_RC[rr++] = vv; rr = &quot;a&quot;.charCodeAt(0); for(vv = 10; vv &lt; 36; ++vv) BI_RC[rr++] = vv; rr = &quot;A&quot;.charCodeAt(0); for(vv = 10; vv &lt; 36; ++vv) BI_RC[rr++] = vv; function int2char(n) &#123; return BI_RM.charAt(n); &#125; function intAt(s,i) &#123; var c = BI_RC[s.charCodeAt(i)]; return (c==null)?-1:c; &#125; // (protected) copy this to r function bnpCopyTo(r) &#123; for(var i = this.t-1; i &gt;= 0; --i) r[i] = this[i]; r.t = this.t; r.s = this.s; &#125; // (protected) set from integer value x, -DV &lt;= x &lt; DV function bnpFromInt(x) &#123; this.t = 1; this.s = (x&lt;0)?-1:0; if(x &gt; 0) this[0] = x; else if(x &lt; -1) this[0] = x+DV; else this.t = 0; &#125; // return bigint initialized to value function nbv(i) &#123; var r = nbi(); r.fromInt(i); return r; &#125; // (protected) set from string and radix function bnpFromString(s,b) &#123; var k; if(b == 16) k = 4; else if(b == 8) k = 3; else if(b == 256) k = 8; // byte array else if(b == 2) k = 1; else if(b == 32) k = 5; else if(b == 4) k = 2; else &#123; this.fromRadix(s,b); return; &#125; this.t = 0; this.s = 0; var i = s.length, mi = false, sh = 0; while(--i &gt;= 0) &#123; var x = (k==8)?s[i]&amp;0xff:intAt(s,i); if(x &lt; 0) &#123; if(s.charAt(i) == &quot;-&quot;) mi = true; continue; &#125; mi = false; if(sh == 0) this[this.t++] = x; else if(sh+k &gt; this.DB) &#123; this[this.t-1] |= (x&amp;((1&lt;&lt;(this.DB-sh))-1))&lt;&lt;sh; this[this.t++] = (x&gt;&gt;(this.DB-sh)); &#125; else this[this.t-1] |= x&lt;&lt;sh; sh += k; if(sh &gt;= this.DB) sh -= this.DB; &#125; if(k == 8 &amp;&amp; (s[0]&amp;0x80) != 0) &#123; this.s = -1; if(sh &gt; 0) this[this.t-1] |= ((1&lt;&lt;(this.DB-sh))-1)&lt;&lt;sh; &#125; this.clamp(); if(mi) BigInteger.ZERO.subTo(this,this); &#125; // (protected) clamp off excess high words function bnpClamp() &#123; var c = this.s&amp;this.DM; while(this.t &gt; 0 &amp;&amp; this[this.t-1] == c) --this.t; &#125; // (public) return string representation in given radix function bnToString(b) &#123; if(this.s &lt; 0) return &quot;-&quot;+this.negate().toString(b); var k; if(b == 16) k = 4; else if(b == 8) k = 3; else if(b == 2) k = 1; else if(b == 32) k = 5; else if(b == 4) k = 2; else return this.toRadix(b); var km = (1&lt;&lt;k)-1, d, m = false, r = &quot;&quot;, i = this.t; var p = this.DB-(i*this.DB)%k; if(i-- &gt; 0) &#123; if(p &lt; this.DB &amp;&amp; (d = this[i]&gt;&gt;p) &gt; 0) &#123; m = true; r = int2char(d); &#125; while(i &gt;= 0) &#123; if(p &lt; k) &#123; d = (this[i]&amp;((1&lt;&lt;p)-1))&lt;&lt;(k-p); d |= this[--i]&gt;&gt;(p+=this.DB-k); &#125; else &#123; d = (this[i]&gt;&gt;(p-=k))&amp;km; if(p &lt;= 0) &#123; p += this.DB; --i; &#125; &#125; if(d &gt; 0) m = true; if(m) r += int2char(d); &#125; &#125; return m?r:&quot;0&quot;; &#125; // (public) -this function bnNegate() &#123; var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; &#125; // (public) |this| function bnAbs() &#123; return (this.s&lt;0)?this.negate():this; &#125; // (public) return + if this &gt; a, - if this &lt; a, 0 if equal function bnCompareTo(a) &#123; var r = this.s-a.s; if(r != 0) return r; var i = this.t; r = i-a.t; if(r != 0) return r; while(--i &gt;= 0) if((r=this[i]-a[i]) != 0) return r; return 0; &#125; // returns bit length of the integer x function nbits(x) &#123; var r = 1, t; if((t=x&gt;&gt;&gt;16) != 0) &#123; x = t; r += 16; &#125; if((t=x&gt;&gt;8) != 0) &#123; x = t; r += 8; &#125; if((t=x&gt;&gt;4) != 0) &#123; x = t; r += 4; &#125; if((t=x&gt;&gt;2) != 0) &#123; x = t; r += 2; &#125; if((t=x&gt;&gt;1) != 0) &#123; x = t; r += 1; &#125; return r; &#125; // (public) return the number of bits in &quot;this&quot; function bnBitLength() &#123; if(this.t &lt;= 0) return 0; return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&amp;this.DM)); &#125; // (protected) r = this &lt;&lt; n*DB function bnpDLShiftTo(n,r) &#123; var i; for(i = this.t-1; i &gt;= 0; --i) r[i+n] = this[i]; for(i = n-1; i &gt;= 0; --i) r[i] = 0; r.t = this.t+n; r.s = this.s; &#125; // (protected) r = this &gt;&gt; n*DB function bnpDRShiftTo(n,r) &#123; for(var i = n; i &lt; this.t; ++i) r[i-n] = this[i]; r.t = Math.max(this.t-n,0); r.s = this.s; &#125; // (protected) r = this &lt;&lt; n function bnpLShiftTo(n,r) &#123; var bs = n%this.DB; var cbs = this.DB-bs; var bm = (1&lt;&lt;cbs)-1; var ds = Math.floor(n/this.DB), c = (this.s&lt;&lt;bs)&amp;this.DM, i; for(i = this.t-1; i &gt;= 0; --i) &#123; r[i+ds+1] = (this[i]&gt;&gt;cbs)|c; c = (this[i]&amp;bm)&lt;&lt;bs; &#125; for(i = ds-1; i &gt;= 0; --i) r[i] = 0; r[ds] = c; r.t = this.t+ds+1; r.s = this.s; r.clamp(); &#125; // (protected) r = this &gt;&gt; n function bnpRShiftTo(n,r) &#123; r.s = this.s; var ds = Math.floor(n/this.DB); if(ds &gt;= this.t) &#123; r.t = 0; return; &#125; var bs = n%this.DB; var cbs = this.DB-bs; var bm = (1&lt;&lt;bs)-1; r[0] = this[ds]&gt;&gt;bs; for(var i = ds+1; i &lt; this.t; ++i) &#123; r[i-ds-1] |= (this[i]&amp;bm)&lt;&lt;cbs; r[i-ds] = this[i]&gt;&gt;bs; &#125; if(bs &gt; 0) r[this.t-ds-1] |= (this.s&amp;bm)&lt;&lt;cbs; r.t = this.t-ds; r.clamp(); &#125; // (protected) r = this - a function bnpSubTo(a,r) &#123; var i = 0, c = 0, m = Math.min(a.t,this.t); while(i &lt; m) &#123; c += this[i]-a[i]; r[i++] = c&amp;this.DM; c &gt;&gt;= this.DB; &#125; if(a.t &lt; this.t) &#123; c -= a.s; while(i &lt; this.t) &#123; c += this[i]; r[i++] = c&amp;this.DM; c &gt;&gt;= this.DB; &#125; c += this.s; &#125; else &#123; c += this.s; while(i &lt; a.t) &#123; c -= a[i]; r[i++] = c&amp;this.DM; c &gt;&gt;= this.DB; &#125; c -= a.s; &#125; r.s = (c&lt;0)?-1:0; if(c &lt; -1) r[i++] = this.DV+c; else if(c &gt; 0) r[i++] = c; r.t = i; r.clamp(); &#125; // (protected) r = this * a, r != this,a (HAC 14.12) // &quot;this&quot; should be the larger one if appropriate. function bnpMultiplyTo(a,r) &#123; var x = this.abs(), y = a.abs(); var i = x.t; r.t = i+y.t; while(--i &gt;= 0) r[i] = 0; for(i = 0; i &lt; y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t); r.s = 0; r.clamp(); if(this.s != a.s) BigInteger.ZERO.subTo(r,r); &#125; // (protected) r = this^2, r != this (HAC 14.16) function bnpSquareTo(r) &#123; var x = this.abs(); var i = r.t = 2*x.t; while(--i &gt;= 0) r[i] = 0; for(i = 0; i &lt; x.t-1; ++i) &#123; var c = x.am(i,x[i],r,2*i,0,1); if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) &gt;= x.DV) &#123; r[i+x.t] -= x.DV; r[i+x.t+1] = 1; &#125; &#125; if(r.t &gt; 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1); r.s = 0; r.clamp(); &#125; // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20) // r != q, this != m. q or r may be null. function bnpDivRemTo(m,q,r) &#123; var pm = m.abs(); if(pm.t &lt;= 0) return; var pt = this.abs(); if(pt.t &lt; pm.t) &#123; if(q != null) q.fromInt(0); if(r != null) this.copyTo(r); return; &#125; if(r == null) r = nbi(); var y = nbi(), ts = this.s, ms = m.s; var nsh = this.DB-nbits(pm[pm.t-1]); // normalize modulus if(nsh &gt; 0) &#123; pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); &#125; else &#123; pm.copyTo(y); pt.copyTo(r); &#125; var ys = y.t; var y0 = y[ys-1]; if(y0 == 0) return; var yt = y0*(1&lt;&lt;this.F1)+((ys&gt;1)?y[ys-2]&gt;&gt;this.F2:0); var d1 = this.FV/yt, d2 = (1&lt;&lt;this.F1)/yt, e = 1&lt;&lt;this.F2; var i = r.t, j = i-ys, t = (q==null)?nbi():q; y.dlShiftTo(j,t); if(r.compareTo(t) &gt;= 0) &#123; r[r.t++] = 1; r.subTo(t,r); &#125; BigInteger.ONE.dlShiftTo(ys,t); t.subTo(y,y); // &quot;negative&quot; y so we can replace sub with am later while(y.t &lt; ys) y[y.t++] = 0; while(--j &gt;= 0) &#123; // Estimate quotient digit var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2); if((r[i]+=y.am(0,qd,r,j,0,ys)) &lt; qd) &#123; // Try it out y.dlShiftTo(j,t); r.subTo(t,r); while(r[i] &lt; --qd) r.subTo(t,r); &#125; &#125; if(q != null) &#123; r.drShiftTo(ys,q); if(ts != ms) BigInteger.ZERO.subTo(q,q); &#125; r.t = ys; r.clamp(); if(nsh &gt; 0) r.rShiftTo(nsh,r); // Denormalize remainder if(ts &lt; 0) BigInteger.ZERO.subTo(r,r); &#125; // (public) this mod a function bnMod(a) &#123; var r = nbi(); this.abs().divRemTo(a,null,r); if(this.s &lt; 0 &amp;&amp; r.compareTo(BigInteger.ZERO) &gt; 0) a.subTo(r,r); return r; &#125; // Modular reduction using &quot;classic&quot; algorithm function Classic(m) &#123; this.m = m; &#125; function cConvert(x) &#123; if(x.s &lt; 0 || x.compareTo(this.m) &gt;= 0) return x.mod(this.m); else return x; &#125; function cRevert(x) &#123; return x; &#125; function cReduce(x) &#123; x.divRemTo(this.m,null,x); &#125; function cMulTo(x,y,r) &#123; x.multiplyTo(y,r); this.reduce(r); &#125; function cSqrTo(x,r) &#123; x.squareTo(r); this.reduce(r); &#125; Classic.prototype.convert = cConvert; Classic.prototype.revert = cRevert; Classic.prototype.reduce = cReduce; Classic.prototype.mulTo = cMulTo; Classic.prototype.sqrTo = cSqrTo; // (protected) return &quot;-1/this % 2^DB&quot;; useful for Mont. reduction // justification: // xy == 1 (mod m) // xy = 1+km // xy(2-xy) = (1+km)(1-km) // x[y(2-xy)] = 1-k^2m^2 // x[y(2-xy)] == 1 (mod m^2) // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2 // should reduce x and y(2-xy) by m^2 at each step to keep size bounded. // JS multiply &quot;overflows&quot; differently from C/C++, so care is needed here. function bnpInvDigit() &#123; if(this.t &lt; 1) return 0; var x = this[0]; if((x&amp;1) == 0) return 0; var y = x&amp;3; // y == 1/x mod 2^2 y = (y*(2-(x&amp;0xf)*y))&amp;0xf; // y == 1/x mod 2^4 y = (y*(2-(x&amp;0xff)*y))&amp;0xff; // y == 1/x mod 2^8 y = (y*(2-(((x&amp;0xffff)*y)&amp;0xffff)))&amp;0xffff; // y == 1/x mod 2^16 // last step - calculate inverse mod DV directly; // assumes 16 &lt; DB &lt;= 32 and assumes ability to handle 48-bit ints y = (y*(2-x*y%this.DV))%this.DV; // y == 1/x mod 2^dbits // we really want the negative inverse, and -DV &lt; y &lt; DV return (y&gt;0)?this.DV-y:-y; &#125; // Montgomery reduction function Montgomery(m) &#123; this.m = m; this.mp = m.invDigit(); this.mpl = this.mp&amp;0x7fff; this.mph = this.mp&gt;&gt;15; this.um = (1&lt;&lt;(m.DB-15))-1; this.mt2 = 2*m.t; &#125; // xR mod m function montConvert(x) &#123; var r = nbi(); x.abs().dlShiftTo(this.m.t,r); r.divRemTo(this.m,null,r); if(x.s &lt; 0 &amp;&amp; r.compareTo(BigInteger.ZERO) &gt; 0) this.m.subTo(r,r); return r; &#125; // x/R mod m function montRevert(x) &#123; var r = nbi(); x.copyTo(r); this.reduce(r); return r; &#125; // x = x/R mod m (HAC 14.32) function montReduce(x) &#123; while(x.t &lt;= this.mt2) // pad x so am has enough room later x[x.t++] = 0; for(var i = 0; i &lt; this.m.t; ++i) &#123; // faster way of calculating u0 = x[i]*mp mod DV var j = x[i]&amp;0x7fff; var u0 = (j*this.mpl+(((j*this.mph+(x[i]&gt;&gt;15)*this.mpl)&amp;this.um)&lt;&lt;15))&amp;x.DM; // use am to combine the multiply-shift-add into one call j = i+this.m.t; x[j] += this.m.am(0,u0,x,i,0,this.m.t); // propagate carry while(x[j] &gt;= x.DV) &#123; x[j] -= x.DV; x[++j]++; &#125; &#125; x.clamp(); x.drShiftTo(this.m.t,x); if(x.compareTo(this.m) &gt;= 0) x.subTo(this.m,x); &#125; // r = &quot;x^2/R mod m&quot;; x != r function montSqrTo(x,r) &#123; x.squareTo(r); this.reduce(r); &#125; // r = &quot;xy/R mod m&quot;; x,y != r function montMulTo(x,y,r) &#123; x.multiplyTo(y,r); this.reduce(r); &#125; Montgomery.prototype.convert = montConvert; Montgomery.prototype.revert = montRevert; Montgomery.prototype.reduce = montReduce; Montgomery.prototype.mulTo = montMulTo; Montgomery.prototype.sqrTo = montSqrTo; // (protected) true iff this is even function bnpIsEven() &#123; return ((this.t&gt;0)?(this[0]&amp;1):this.s) == 0; &#125; // (protected) this^e, e &lt; 2^32, doing sqr and mul with &quot;r&quot; (HAC 14.79) function bnpExp(e,z) &#123; if(e &gt; 0xffffffff || e &lt; 1) return BigInteger.ONE; var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1; g.copyTo(r); while(--i &gt;= 0) &#123; z.sqrTo(r,r2); if((e&amp;(1&lt;&lt;i)) &gt; 0) z.mulTo(r2,g,r); else &#123; var t = r; r = r2; r2 = t; &#125; &#125; return z.revert(r); &#125; // (public) this^e % m, 0 &lt;= e &lt; 2^32 function bnModPowInt(e,m) &#123; var z; if(e &lt; 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m); return this.exp(e,z); &#125; // protected BigInteger.prototype.copyTo = bnpCopyTo; BigInteger.prototype.fromInt = bnpFromInt; BigInteger.prototype.fromString = bnpFromString; BigInteger.prototype.clamp = bnpClamp; BigInteger.prototype.dlShiftTo = bnpDLShiftTo; BigInteger.prototype.drShiftTo = bnpDRShiftTo; BigInteger.prototype.lShiftTo = bnpLShiftTo; BigInteger.prototype.rShiftTo = bnpRShiftTo; BigInteger.prototype.subTo = bnpSubTo; BigInteger.prototype.multiplyTo = bnpMultiplyTo; BigInteger.prototype.squareTo = bnpSquareTo; BigInteger.prototype.divRemTo = bnpDivRemTo; BigInteger.prototype.invDigit = bnpInvDigit; BigInteger.prototype.isEven = bnpIsEven; BigInteger.prototype.exp = bnpExp; // public BigInteger.prototype.toString = bnToString; BigInteger.prototype.negate = bnNegate; BigInteger.prototype.abs = bnAbs; BigInteger.prototype.compareTo = bnCompareTo; BigInteger.prototype.bitLength = bnBitLength; BigInteger.prototype.mod = bnMod; BigInteger.prototype.modPowInt = bnModPowInt; // &quot;constants&quot; BigInteger.ZERO = nbv(0); BigInteger.ONE = nbv(1);/********************* jsbn.js end ************************//********************* prng4.js start ************************/ // prng4.js - uses Arcfour as a PRNG function Arcfour() &#123; this.i = 0; this.j = 0; this.S = new Array(); &#125; // Initialize arcfour context from key, an array of ints, each from [0..255] function ARC4init(key) &#123; var i, j, t; for(i = 0; i &lt; 256; ++i) this.S[i] = i; j = 0; for(i = 0; i &lt; 256; ++i) &#123; j = (j + this.S[i] + key[i % key.length]) &amp; 255; t = this.S[i]; this.S[i] = this.S[j]; this.S[j] = t; &#125; this.i = 0; this.j = 0; &#125; function ARC4next() &#123; var t; this.i = (this.i + 1) &amp; 255; this.j = (this.j + this.S[this.i]) &amp; 255; t = this.S[this.i]; this.S[this.i] = this.S[this.j]; this.S[this.j] = t; return this.S[(t + this.S[this.i]) &amp; 255]; &#125; Arcfour.prototype.init = ARC4init; Arcfour.prototype.next = ARC4next; // Plug in your RNG constructor here function prng_newstate() &#123; return new Arcfour(); &#125; // Pool size must be a multiple of 4 and greater than 32. // An array of bytes the size of the pool will be passed to init() var rng_psize = 256;/********************* prng4.js end ************************//********************* rng.js start ************************/ // Random number generator - requires a PRNG backend, e.g. prng4.js // For best results, put code like // &lt;body onClick=&#x27;rng_seed_time();&#x27; onKeyPress=&#x27;rng_seed_time();&#x27;&gt; // in your main HTML document. var rng_state; var rng_pool; var rng_pptr; // Mix in a 32-bit integer into the pool function rng_seed_int(x) &#123; rng_pool[rng_pptr++] ^= x &amp; 255; rng_pool[rng_pptr++] ^= (x &gt;&gt; 8) &amp; 255; rng_pool[rng_pptr++] ^= (x &gt;&gt; 16) &amp; 255; rng_pool[rng_pptr++] ^= (x &gt;&gt; 24) &amp; 255; if(rng_pptr &gt;= rng_psize) rng_pptr -= rng_psize; &#125; // Mix in the current time (w/milliseconds) into the pool function rng_seed_time() &#123; rng_seed_int(new Date().getTime()); &#125; // Initialize the pool with junk if needed. if(rng_pool == null) &#123; rng_pool = new Array(); rng_pptr = 0; var t; while(rng_pptr &lt; rng_psize) &#123; // extract some randomness from Math.random() t = Math.floor(65536 * Math.random()); rng_pool[rng_pptr++] = t &gt;&gt;&gt; 8; rng_pool[rng_pptr++] = t &amp; 255; &#125; rng_pptr = 0; rng_seed_time(); //rng_seed_int(window.screenX); //rng_seed_int(window.screenY); &#125; function rng_get_byte() &#123; if(rng_state == null) &#123; rng_seed_time(); rng_state = prng_newstate(); rng_state.init(rng_pool); for(rng_pptr = 0; rng_pptr &lt; rng_pool.length; ++rng_pptr) rng_pool[rng_pptr] = 0; rng_pptr = 0; //rng_pool = null; &#125; // TODO: allow reseeding after first request return rng_state.next(); &#125; function rng_get_bytes(ba) &#123; var i; for(i = 0; i &lt; ba.length; ++i) ba[i] = rng_get_byte(); &#125; function SecureRandom() &#123;&#125; SecureRandom.prototype.nextBytes = rng_get_bytes; /********************* rng.js end ************************//********************* rsa.js start ************************/ // Depends on jsbn.js and rng.js // Version 1.1: support utf-8 encoding in pkcs1pad2 // convert a (hex) string to a bignum object function parseBigInt(str,r) &#123; return new BigInteger(str,r); &#125; function linebrk(s,n) &#123; var ret = &quot;&quot;; var i = 0; while(i + n &lt; s.length) &#123; ret += s.substring(i,i+n) + &quot;\\n&quot;; i += n; &#125; return ret + s.substring(i,s.length); &#125; function byte2Hex(b) &#123; if(b &lt; 0x10) return &quot;0&quot; + b.toString(16); else return b.toString(16); &#125; // PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint function pkcs1pad2(s,n) &#123; if(n &lt; s.length + 11) &#123; // TODO: fix for utf-8 alert(&quot;Message too long for RSA&quot;); return null; &#125; var ba = new Array(); var i = s.length - 1; while(i &gt;= 0 &amp;&amp; n &gt; 0) &#123; var c = s.charCodeAt(i--); if(c &lt; 128) &#123; // encode using utf-8 ba[--n] = c; &#125; else if((c &gt; 127) &amp;&amp; (c &lt; 2048)) &#123; ba[--n] = (c &amp; 63) | 128; ba[--n] = (c &gt;&gt; 6) | 192; &#125; else &#123; ba[--n] = (c &amp; 63) | 128; ba[--n] = ((c &gt;&gt; 6) &amp; 63) | 128; ba[--n] = (c &gt;&gt; 12) | 224; &#125; &#125; ba[--n] = 0; var rng = new SecureRandom(); var x = new Array(); while(n &gt; 2) &#123; // random non-zero pad x[0] = 0; while(x[0] == 0) rng.nextBytes(x); ba[--n] = x[0]; &#125; ba[--n] = 2; ba[--n] = 0; return new BigInteger(ba); &#125; // &quot;empty&quot; RSA key constructor function RSAKey() &#123; this.n = null; this.e = 0; this.d = null; this.p = null; this.q = null; this.dmp1 = null; this.dmq1 = null; this.coeff = null; &#125; // Set the public key fields N and e from hex strings function RSASetPublic(N,E) &#123; if(N != null &amp;&amp; E != null &amp;&amp; N.length &gt; 0 &amp;&amp; E.length &gt; 0) &#123; this.n = parseBigInt(N,16); this.e = parseInt(E,16); &#125; else alert(&quot;Invalid RSA public key&quot;); &#125; // Perform raw public operation on &quot;x&quot;: return x^e (mod n) function RSADoPublic(x) &#123; return x.modPowInt(this.e, this.n); &#125; // Return the PKCS#1 RSA encryption of &quot;text&quot; as an even-length hex string function RSAEncrypt(text) &#123; var m = pkcs1pad2(text,(this.n.bitLength()+7)&gt;&gt;3); if(m == null) return null; var c = this.doPublic(m); if(c == null) return null; var h = c.toString(16); if((h.length &amp; 1) == 0) return h; else return &quot;0&quot; + h; &#125; // Return the PKCS#1 RSA encryption of &quot;text&quot; as a Base64-encoded string //function RSAEncryptB64(text) &#123; // var h = this.encrypt(text); // if(h) return hex2b64(h); else return null; //&#125; // protected RSAKey.prototype.doPublic = RSADoPublic; // public RSAKey.prototype.setPublic = RSASetPublic; RSAKey.prototype.encrypt = RSAEncrypt; //RSAKey.prototype.encrypt_b64 = RSAEncryptB64; //暴露RSAKey this.RSAKey = RSAKey;//example:// var rsa = new RSAKey();// rsa.setPublic(encode_key, key_plus);// password = rsa.encrypt(password);&#125;).call(sinaSSOEncoder);// function getpass(pwd,servicetime,nonce,rsaPubkey)&#123;// var RSAKey=new sinaSSOEncoder.RSAKey();// RSAKey.setPublic(rsaPubkey,&#x27;10001&#x27;);// var password=RSAKey.encrypt([servicetime,nonce].join(&#x27;\\t&#x27;)+&#x27;\\n&#x27;+pwd);// return password;// &#125;function GetRSA(servertime,nonce,password)&#123; var key=&quot;EB2A38568661887FA180BDDB5CABD5F21C7BFD59C090CB2D245A87AC253062882729293E5506350508E7F9AA3BB77F4333231490F915F6D63C55FE2F08A49B353F444AD3993CACC02DB784ABBB8E42A9B1BBFFFB38BE18D78E87A0E41B9B8F73A928EE0CCEE1F6739884B9777E4FE9E88A1BBE495927AC4A799B3181D6442443&quot;; var RSAKey = new sinaSSOEncoder.RSAKey(); RSAKey.setPublic(key, &#x27;10001&#x27;); return(RSAKey.encrypt([servertime,nonce].join(&quot;\\t&quot;) + &quot;\\n&quot; + password));&#125;exports.GetRSA = GetRSA; baiduIndex.js 1234567891011121314151617181920212223242526272829303132333435363738function Dec(input, key)&#123; input = escape(input); var int_key = &quot;&quot;; for(var I=0;I&lt;key.length;I++) &#123; int_key += key.charCodeAt(I).toString(); &#125; var app = input.substr(input.length - 13,input.length); var app1 = app; app = app ^ 99998999; var str = input.substr(0,input.length - 13); input = str; int_key = int_key + app1; var ret = &quot;&quot;; for(var I=0;I&lt;input.length;I+=2) &#123; var sig = input.substr(I,2); sig = parseInt(sig,16); var i = (I/2) % int_key.length; var xor_key = int_key.substr(i,1); sig = sig ^ xor_key; ret += String.fromCharCode(sig); &#125; return unescape(ret);&#125;function execEval(input, key)&#123; return Dec(input,key);&#125;exports.execEval = execEval; 大家认真看的话，除了index.js文件，会发现每个文件最后都会有个exports的调用，这个按照我自己的理解是，使用exports可以使得引用他的文件直接调用里面的方法。 到这里我的web服务就基本上搭建完毕了。 在index.js文件中的 1234handle[&quot;/start&quot;] = requestHandlers.start;handle[&quot;/upload&quot;] = requestHandlers.upload;handle[&quot;/weibo&quot;] = requestHandlers.weibo;handle[&quot;/baiduindex&quot;] = requestHandlers.baiduindex; 这里其实就是给出了，url的访问地址 比如我如果要访问的话，我会这样写 http://10.211.55.5:8006/start, http://10.211.55.5:8006/upload, http://10.211.55.5:8006/weibo, http://10.211.55.5:8006/baiduindex。 后面也是可以加上参数的，然后对应的处理文件上，加上自己的处理函数，来接受不同的参数，进行自己的一些逻辑操作。 下面可以测试一下了。 在根目录下，执行 1node ./index.js 然后再浏览器上输入url地址，就可以访问了","tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://blog.gowhich.com/tags/Nodejs/"}]},{"title":"iOS运行时xcode出现\"nib but the view outlet was not set.\"错误","date":"2025-06-10T02:21:31.000Z","path":"2025/06/10/iOS运行时xcode出现-nib-but-the-view-outlet-was-not-set-错误.html","text":"出现的问题如标题： 问题原因是： xib 中, 没有对File’s Owner 的Outlets view 进行绑定, 导致在父视图中插入子视图时出错, 在IB中拖拽Files’ Owner到view, 添加绑定后, 运行成功!总结一下创建视图和绑定的步骤: 创建控制器. File-&gt;New File-&gt;Iphone OS-&gt;Cocoa Touch Class-&gt;UIViewController subclass; 创建xib. File-&gt;New File-&gt;Iphone OS-&gt;User Interface-&gt;View XIB 绑定controller和view. 用Interface Builder打开xxx.xib, 点击Files’ Owner, 在Identity Inspector里面的Class Identity, 选择Step 1创建的控制器类, 接着拖拽File’s Owner到View中, 选择Outlets-&gt;view.先选中file’s owner(这个很重要) 资源来自：http://blog.csdn.net/thebesttome/article/details/7799893","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS SearchBar的使用方法","date":"2025-06-10T02:12:44.000Z","path":"2025/06/10/iOS-SearchBar的使用方法.html","text":"属性 作用 UIBarStyle barStyle 控件的样式 id delegate 设置控件的委托 NSString *text 控件上面的显示的文字 NSString *prompt 显示在顶部的单行文字，通常作为一个提示行 NSString *placeholder 半透明的提示文字，输入搜索内容消失 BOOL showsBookmarkButton 是否在控件的右端显示一个书的按钮(没有文字的时候) BOOL showsCancelButton 是否显示cancel按钮 BOOL showsSearchResultsButton 是否在控件的右端显示搜索结果按钮(没有文字的时候) BOOL searchResultsButtonSelected 搜索结果按钮是否被选中 UIColor *tintColor bar的颜色(具有渐变效果) BOOL translucent 指定控件是否会有透视效果 UITextAutocapitalizationType autocapitalizationType 设置在什么的情况下自动大写 UITextAutocorrectionType autocorrectionType 对于文本对象自动校正风格 UIKeyboardType keyboardType 键盘的样式 NSArray *scopeButtonTitles 搜索栏下部的选择栏，数组里面的内容是按钮的标题 NSInteger selectedScopeButtonIndex 搜索栏下部的选择栏按钮的个数 BOOL showsScopeBar 控制搜索栏下部的选择栏是否显示出来 代理列表：编辑代理– searchBar:textDidChange:– searchBar:shouldChangeTextInRange:replacementText:– searchBarShouldBeginEditing:– searchBarTextDidBeginEditing:– searchBarShouldEndEditing:– searchBarTextDidEndEditing: 点击按钮– searchBarBookmarkButtonClicked:– searchBarCancelButtonClicked:– searchBarSearchButtonClicked:– searchBarResultsListButtonClicked: 范围代理– searchBar:selectedScopeButtonIndexDidChange: searchBar使用小技巧searchBar的范围控件showsScopeBar，官方学名叫Scope Buttons。首先就要设置这个属性：self.searchBar.showsScopeBar = YES;然后要给他添加按钮。比如说，这样：self.searchBar.scopeButtonTitles = [NSArray arrayWithObjects:@&quot;BOY&quot;,@&quot;GIRL&quot;,@&quot;ALL&quot;,nil]; 还有一个很重要的事情就是我们要实现这个代理UISearchBarDelegate里的这个方法searchBar:selectedScopeButtonIndexDidChange:。告诉表格，你选择的范围是啥。还有要是设置默认选择哪个按钮的话，要设置这个属性,像这样就是默认选中第1个啦。self.searchBar.selectedScopeButtonIndex = 0; 在实现搜索功能时，界面使用UISearchBar比较好，它实现了很多搜索时使用到的东西，但是默认的风格可能和现有的风格不一致，所以需要我们想办法去修改一下默认的外观。 修改UISearchBar的背景颜色UISearchBar是由两个subView组成的，一个是UISearchBarBackGround,另一个是UITextField. 要IB中没有直接操作背景的属性。方法是直接将 UISearchBarBackGround移去第一种解决方案： 12345678910seachBar=[[UISearchBar alloc] init]; seachBar.backgroundColor=[UIColor clearColor]; for (UIView *subview in seachBar.subviews) &#123; if ([subview isKindOfClass:NSClassFromString(@&quot;UISearchBarBackground&quot;)]) &#123; [subview removeFromSuperview]; break; &#125; &#125; 第二种解决的方法： 1[[searchbar.subviews objectAtIndex:0]removeFromSuperview]; 为UISearchBar添加背景图片1234567891011121314UISearchBar* m_searchBar = [[UISearchBar alloc] initWithFrame:CGRectMake(0, 44, 320, 41)]; m_searchBar.delegate = self; m_searchBar.barStyle = UIBarStyleBlackTranslucent; m_searchBar.autocorrectionType = UITextAutocorrectionTypeNo; m_searchBar.autocapitalizationType = UITextAutocapitalizationTypeNone; m_searchBar.placeholder = _(@&quot;Search&quot;); m_searchBar.keyboardType = UIKeyboardTypeDefault; //为UISearchBar添加背景图片 UIView *segment = [m_searchBar.subviews objectAtIndex:0]; UIImageView *bgImage = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&quot;Images/search_bar_bg.png&quot;]]; [segment addSubview: bgImage]; //&lt;---背景图片 [self.view addSubview:m_searchBar]; [m_searchBar release]; 取消UISearchBar调用的键盘1[searchBar resignFirstResponder]; 第一种方法 123456789UISearchBar *mySearchBar = [[UISearchBar alloc] initWithFrame:CGRectMake(0.0, 0.0, self.view.bounds.size.width, 45)]; mySearchBar.delegate = self; mySearchBar.showsCancelButton = NO; mySearchBar.barStyle=UIBarStyleDefault; mySearchBar.placeholder=@&quot;Enter Name or Categary&quot;; mySearchBar.keyboardType=UIKeyboardTypeNamePhonePad; [self.view addSubview:mySearchBar]; [mySearchBar release]; 第二种方法，在tableview上添加： 12345678910111213141516//add Table UITableView *myBeaconsTableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, self.view.bounds.size.width, self.view.bounds.size.height-40) style:UITableViewStylePlain]; myBeaconsTableView.backgroundColor = [UIColor whiteColor]; myBeaconsTableView.delegate=self; myBeaconsTableView.dataSource=self; [myBeaconsTableView setRowHeight:40]; // Add searchbar searchBar = [[UISearchBar alloc] initWithFrame:CGRectMake(0.0, 0.0, self.view.bounds.size.width, 40)]; searchBar.placeholder=@&quot;Enter Name&quot;; searchBar.delegate = self; myBeaconsTableView.tableHeaderView = searchBar; searchBar.autocorrectionType = UITextAutocorrectionTypeNo; searchBar.autocapitalizationType = UITextAutocapitalizationTypeNone; [searchBar release]; [self.view addSubview:myBeaconsTableView]; [myBeaconsTableView release];","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS NSLog的定义","date":"2025-06-10T02:01:36.000Z","path":"2025/06/10/iOS-NSLog的定义.html","text":"1void NSLog(NSString *format, …); 基本上，NSLog很像printf，同样会在console中输出显示结果。不同的是，传递进去的格式化字符是NSString的对象，而不是char *这种字符串指针。 实例： NSLog可以如下面的方法使用： 123NSLog (@&quot;this is a test&quot;);NSLog (@&quot;string is :%@&quot;, string);NSLog (@&quot;x=%d, y=%d&quot;, 10, 20); 但是下面的写法是不行的： 12int i = 12345;NSLog( @&quot;%@&quot;, i ); 原因是， %@需要显示对象，而int i明显不是一个对象，要想正确显示，要写成： 12int i = 12345;NSLog( @&quot;%d&quot;, i )； 格式： NSLog的格式如下所示： %@ 对象 %d, %i 整数 %u 无符整形 %f 浮点&#x2F;双字 %x, %X 二进制整数 %o 八进制整数 %zu size_t%p 指针 %e 浮点&#x2F;双字 （科学计算） %g 浮点&#x2F;双字 %s C 字符串 %.*s Pascal字符串 %c 字符 %C unicha r%lld 64位长整数 （long long）%llu 无符64位长整数 %Lf 64位双字","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"MySQL创建字段的空格问题","date":"2025-06-09T10:10:19.000Z","path":"2025/06/09/MySQL创建字段的空格问题.html","text":"下面举例子中空格我用【X】来表示 请看这条sql语句 123INSERT INTO teleplay_tieba_daily (`t_t_id`,`sum`,`post_sum`,`subject_sum`,`member_sum`,`check_sum`,`yesterday_fans_num`, `yesterday_post_num`, `yesterday_subject_num`,`yesterday_member_num`, `yesterday_check_num`,`spider_date`) VALUES (236,1790,24728,1837,1790,17,0,0,0,0,0,&#x27;2013-04-22&#x27;),(240,239,6824,1082,239,5,0,0,0,0,0,&#x27;2013-04-22&#x27;),(5109,171,300,90,171,4,0,0,0,0,0,&#x27;2013-04-22&#x27;), (5139,97,2462,294,97,1,0,0,0,0,0,&#x27;2013-04-22&#x27;),(5153,36,1215,181,36,0,0,0,0,0,0,&#x27;2013-04-22&#x27;),(5276,26,759,115,26,0,0,0,0,0,0,&#x27;2013-04-22&#x27;),(5358,53,320,93,53,0,0,0,0,0,0,&#x27;2013-04-22&#x27;),(5387,3156,85687,4389,3156,54,0,0,0,0,0,&#x27;2013-04-22&#x27;),(5429,1181,13811,2430,1181,14,0,0,0,0,0,&#x27;2013-04-22&#x27;),(5480,46,749,117,46,0,0,0,0,0,0,&#x27;2013-04-22&#x27;) 按道理说是没有问题的，但是给出的错误是： Unknown column ‘yesterday_check_num’ in ‘field list’注意，是字段没有 反复看了一下，通过借助phpmyadmin的选择字段的方式添加数据，执行后，居然成功了 123INSERT INTO teleplay_tieba_daily (`t_t_id`,`sum`,`post_sum`,`subject_sum`,`member_sum`,`check_sum`,`yesterday_fans_num`, `yesterday_post_num`,`yesterday_subject_num`, `yesterday_member_num`,`【x】yesterday_check_num`,`spider_date`) VALUES (236,1790,24728,1837,1790,17,0,0,0,0,0,&#x27;2013-04-22&#x27;),(240,239,6824,1082,239,5,0,0,0,0,0,&#x27;2013-04-22&#x27;),(5109,171,300,90,171,4,0,0,0,0,0,&#x27;2013-04-22&#x27;),(5139,97,2462,294,97,1,0,0,0,0,0,&#x27;2013-04-22&#x27;), (5153,36,1215,181,36,0,0,0,0,0,0,&#x27;2013-04-22&#x27;),(5276,26,759,115,26,0,0,0,0,0,0,&#x27;2013-04-22&#x27;),(5358,53,320,93,53,0,0,0,0,0,0,&#x27;2013-04-22&#x27;),(5387,3156,85687,4389,3156,54,0,0,0,0,0,&#x27;2013-04-22&#x27;),(5429,1181,13811,2430,1181,14,0,0,0,0,0,&#x27;2013-04-22&#x27;),(5480,46,749,117,46,0,0,0,0,0,0,&#x27;2013-04-22&#x27;) 发现字段的真相是’【x】yesterday_check_num’，但是我想，我最初在创建字段的时候，为什么mysql没有把左右两边的空格过滤掉，这是漏洞还是mysql故意要这样设计的呢？如果有一天一个像我一样的程序员，也做了类似的事情，后面的程序员做sql插入的时候，估计会很困惑。因为这个问题，不去仔仔细细的查找，根本找不出原因。 另外程序员在处理输入的字符的时候都会将两边的空格去掉才对","tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://blog.gowhich.com/tags/MySQL/"}]},{"title":"Yii框架中CGridView修改值的类型，处理值的方式","date":"2025-06-09T09:41:16.000Z","path":"2025/06/09/Yii框架中CGridView修改值的类型，处理值的方式.html","text":"表中的每一行代表一个数据项的数据,和一个列通常代表一个属性的物品(一些列可能对应于复杂的表达式的属性或静态文本)。 CGridView既支持排 序和分页的数据项。排序和分页可以在AJAX模式或正常的页面请求。使用CGridView的一个好处是,当用户浏览器禁用JavaScript,排序和 分页自动退化普通页面请求和仍然正常运行。 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;?php$this-&gt;widget(&#x27;zii.widgets.grid.CGridView&#x27;, [ &#x27;id&#x27; =&gt; &#x27;chapter-grid&#x27;, &#x27;dataProvider&#x27; =&gt; $model-&gt;search(), //数据结果集 &#x27;filter&#x27; =&gt; $model, &#x27;columns&#x27; =&gt; [ &#x27;id&#x27;, //锚点&lt;a href=&quot;http://www.gulianqiang.com/&quot;&gt;&lt;/a&gt; [ &#x27;name&#x27; =&gt; &#x27;name&#x27;, &#x27;type&#x27; =&gt; &#x27;raw&#x27;, &#x27;value&#x27; =&gt; &#x27;CHtml::link($data-&gt;name,&quot;/book/$data-&gt;id&quot;)&#x27;, ], //图片 [ &#x27;name&#x27; =&gt; &#x27;image&#x27;, &#x27;type&#x27; =&gt; &#x27;image&#x27;, &#x27;value&#x27; =&gt; &#x27;LImages::getPath(&quot;book&quot;).$data-&gt;image&#x27;, //图片相对路径 ], //下拉列表 [ &#x27;name&#x27; =&gt; &#x27;type&#x27;, &#x27;value&#x27; =&gt; &#x27;Lookup::item(&quot;chapterType&quot;,$data-&gt;type)&#x27;, &#x27;filter&#x27; =&gt; Lookup::items(&#x27;chapterType&#x27;), ], //内容截取 [ &#x27;name&#x27; =&gt; &#x27;content&#x27;, &#x27;type&#x27; =&gt; &#x27;html&#x27;, &#x27;value&#x27; =&gt; &#x27;mb_substr(htmlspecialchars_decode($data-&gt;content),0,100,&quot;utf-8&quot;)&#x27;, ], //时间 [ &#x27;name&#x27; =&gt; &#x27;create_time&#x27;, &#x27;type&#x27; =&gt; &#x27;datetime&#x27;, ], // 根据相关信息读数据库 [ &#x27;name&#x27; =&gt; &#x27;user_id&#x27;, &#x27;value&#x27; =&gt; &#x27;User::model()-&gt;findbyPk($data-&gt;user_id)-&gt;username&#x27;, &#x27;filter&#x27; =&gt; false, ], [ &#x27;class&#x27; =&gt; &#x27;CButtonColumn&#x27;, ], ],]); 我的使用代码： 其实也是可以加入自己的方法的 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?php$this-&gt;widget(&#x27;zii.widgets.grid.CGridView&#x27;, [ &#x27;id&#x27; =&gt; &#x27;link-grid&#x27;, &#x27;dataProvider&#x27; =&gt; $model-&gt;search(), &#x27;summaryCssClass&#x27; =&gt; &#x27;hide&#x27;, &#x27;itemsCssClass&#x27; =&gt; &#x27;table table-bordered&#x27;, &#x27;emptyText&#x27; =&gt; &#x27;搜索结果为空&#x27;, &#x27;pagerCssClass&#x27; =&gt; &#x27;pagination&#x27;, &#x27;filterCssClass&#x27; =&gt; &#x27;&#x27;, &#x27;pager&#x27; =&gt; [ &#x27;class&#x27; =&gt; &#x27;CLinkPager&#x27;, &#x27;nextPageLabel&#x27; =&gt; &#x27;下一页&#x27;, &#x27;prevPageLabel&#x27; =&gt; &#x27;上一页&#x27;, &#x27;firstPageLabel&#x27; =&gt; &#x27;最前&#x27;, &#x27;lastPageLabel&#x27; =&gt; &#x27;最后&#x27;, &#x27;htmlOptions&#x27; =&gt; [&#x27;class&#x27; =&gt; &#x27;&#x27;], &#x27;header&#x27; =&gt; &#x27;&#x27;, &#x27;hiddenPageCssClass&#x27; =&gt; &#x27;&#x27;, &#x27;selectedPageCssClass&#x27; =&gt; &#x27;active&#x27;, &#x27;previousPageCssClass&#x27; =&gt; &#x27;&#x27;, &#x27;nextPageCssClass&#x27; =&gt; &#x27;&#x27;, ], &#x27;filter&#x27; =&gt; $model, &#x27;columns&#x27; =&gt; [ &#x27;title&#x27; =&gt; [ &#x27;name&#x27; =&gt; &#x27;title&#x27;, &#x27;type&#x27; =&gt; &#x27;raw&#x27;, &#x27;value&#x27; =&gt; &#x27;Helper::truncate_utf8_string($data-&gt;title, 20,\\&#x27;......\\&#x27;)&#x27;, ], &#x27;url&#x27; =&gt; [ &#x27;name&#x27; =&gt; &#x27;url&#x27;, &#x27;type&#x27; =&gt; &#x27;raw&#x27;, &#x27;value&#x27; =&gt; &#x27;Helper::truncate_utf8_string($data-&gt;url, 20,\\&#x27;......\\&#x27;)&#x27;, ], &#x27;create_date&#x27;, [ &#x27;class&#x27; =&gt; &#x27;CButtonColumn&#x27;, ], ],]); 以上已经提供常用的数据显示类型。基本可以将使用Yii框架开发web应用使用CGridView的情况都列出。 参考资料：http://www.gulianqiang.com/yii/158.html","tags":[{"name":"Yii","slug":"Yii","permalink":"https://blog.gowhich.com/tags/Yii/"}]},{"title":"Memcache-PHP中操作Memcache","date":"2025-06-09T08:40:31.000Z","path":"2025/06/09/Memcache-PHP中操作Memcache.html","text":"简介memcache模块是一个高效的守护进程，提供用于内存缓存的过程式程序和面向对象的方便的接口，特别是对于设计动态web程序时减少对数据库的访问。 memcache也提供用于通信对话（session_handler）的处理。 更多Memcache 模块相关信息可以到 http://www.danga.com/memcached/ 查阅。 memcache在php.ini中的配置项列表memcache在php.ini中的配置项列表 名称 默认值 是否可变 改变日志 memcache.allow_failover “1” PHP_INI_ALL Available since memcache 2.0.2. memcache.max_failover_attempts “20” PHP_INI_ALL Available since memcache 2.1.0. memcache.chunk_size “8192” PHP_INI_ALL Available since memcache 2.0.2. memcache.default_port “11211” PHP_INI_ALL Available since memcache 2.0.2. memcache.hash_strategy “standard” PHP_INI_ALL Available since memcache 2.2.0. memcache.hash_function “crc32” PHP_INI_ALL Available since memcache 2.2.0. session.save_handler “files” PHP_INI_ALL Supported since memcache 2.1.2 session.save_path “” PHP_INI_ALL Supported since memcache 2.1.2 有关 PHP_INI_* 常量进一步的细节与定义参见PHP手册php.ini 配置选项。 以下是配置项的简要解释 memcache.allow_failover Boolean 在错误时是否透明的故障转移到其他服务器上处理（注：故障转移是动词）。 memcache.max_failover_attempts integer 定义服务器的数量类设置和获取数据，只联合 memcache.allow_failover 一同使用。 memcache.chunk_size integer 数据将会被分成指定大小（chunk_size）的块来传输，这个值（chunk_size）越小，写操作的请求就越多，如果发现其他的无法解释的减速，请试着将这个值增大到32768. memcache.default_port string 当连接memcache服务器的时候，如果没有指定端口这个默认的tcp端口将被用。 memcache.hash_strategy string 控制在映射 key 到服务器时使用哪种策略。设置这个值一致能使hash 算法始终如一的使用于服务器接受添加或者删除池中变量时将不会被重新映射。设置这个值以标准的结果在旧的策略被使用时。 memcache.hash_function string 控制哪种 hsah 函数被应用于 key映射 到服务器过程中，默认值“crc32”使用 CRC32 算法，而“fnv”则表示使用 FNV-1a 算法。 session.save_handler string 通过设置这个值为memcache来确定使用 memcache 用于通信对话的处理（session handler）。 session.save_path string 定义用于通话存储的各服务器链接的分隔符号，例如：“tcp:&#x2F;&#x2F;host1:11211, tcp:&#x2F;&#x2F;host2:11211”。每 服务器个链接可以包含被接受于该服务器的参数，比较类似使用 Memcache::addServer() 来添加的服务器，例如：“tcp:&#x2F;&#x2F;host1:11211?persistent&#x3D;1&amp;weight&#x3D;1&amp;timeout&#x3D;1&amp; amp; amp;retry_interval&#x3D;15”。 memcache常量列表memcache常量列表 名称 类型 描述 MEMCACHE_COMPRESSED integer 用于调整在使用 Memcache::set(), Memcache::add() 和 Memcache::replace() 几个函数时的压缩比率。 MEMCACHE_HAVE_SESSION integer 如果通信对话的处理（session handler）被允许使用其值为 1，其他情况值为 0。 Memcache Functions 函数列表Memcache::connect说明 bool Memcache::connect ( string $host [, int $port [, int $timeout ]] ) 连接memcache服务器 参数 - - $host(string) 服务器域名或ip $port(int) 服务器tcp端口号，默认值是11211 $timeout 连接memcache进程的失效时间，在修改它的默认值1的时候要三思，以免失去所有memcache缓存的优势导致连接变得很慢。 返回值如果成功则返回true，失败则返回false 范例12345/* procedural API */$memcache_obj = memcache_connect(‘memcache_host‘, 11211);/* OO API */$memcache = new Memcache;$memcache-&gt;connect(‘memcache_host‘, 11211); Memcache::pconnect说明 bool Memcache::pconnect ( string $host [, int $port [, int $timeout ]] )以长连接方式连接服务器 参数 - - $host(string) 服务器域名或ip $port(int) 服务器tcp端口号，默认值是11211 $timeout 连接memcache进程的失效时间，在修改它的默认值1的时候要三思，以免失去所有memcache缓存的优势导致连接变得很慢。 返回值如果成功则返回true，失败则返回false 范例12345/* procedural API */$memcache_obj = memcache_pconnect(‘memcache_host‘, 11211);/* OO API */$memcache_obj = new Memcache;$memcache_obj-&gt;pconnect(‘memcache_host‘, 11211); Memcache::close说明 bool Memcache::close ( void ) 关闭对象 (对常连接不起作用) 返回值如果成功则返回true，失败则返回false 范例123456789/* procedural API */$memcache_obj = memcache_connect(‘memcache_host‘, 11211);/* do something here .. */memcache_close($memcache_obj);/* OO API */$memcache_obj = new Memcache;$memcache_obj-&gt;connect(‘memcache_host‘, 11211);/* do something here .. */$memcache_obj-&gt;close(); Memcache::addServer(#2-4)说明 bool Memcache::addServer ( string $host [, int $port [, bool $persistent [, int $weight [, int $timeout [, int $retry_interval [, bool $status [, callback $failure_callback ]]]]]]] )向对象添加一个服务器（注：addServer没有连接到服务器的动作，所以在memcache进程没有启动的时候，执行addServer成功也会返回true） 参数 - - host 服务器域名或 IP port 端口号，默认为 11211 persistent 是否使用常连接，默认为 TRUE weight 权重，在多个服务器设置中占的比重 timeout 连接服务器失效的秒数，修改默认值 1 时要三思，有可能失去所有缓存方面的优势导致连接变得很慢 retry_interval 服务器连接失败时的重试频率，默认是 15 秒一次，如果设置为 -1 将禁止自动重试，当扩展中加载了 dynamically via dl() 时，无论本参数还是常连接设置参数都会失效。 每一个失败的服务器在失效前都有独自的生存期，选择后端请求时会被跳过而不服务于请求。一个过期的连接将成功的重新连接或者被标记为失败的连接等待下一次 重试。这种效果就是说每一个 web server 的子进程在服务于页面时的重试连接都跟他们自己的重试频率有关。 |status | 控制服务器是否被标记为 online，设置这个参数为 FALSE 并设置 retry_interval 为 -1 可以使连接失败的服务器被放到一个描述不响应请求的服务器池子中，对这个服务器的请求将失败，接受设置为失败服务器的设置，默认参数为 TRUE，代表该服务器可以被定义为 online。|failure_callback| 失败时的回调函数，函数的两个参数为失败服务器的 hostname 和 port 返回值成功返回 TRUE，失败返回 FALSE。注：在测试addServer函数的时候我们主要测试了其参数retry_interval和status 范例retry_interval参数的测试123$mem = new Memcache;$is_add = $mem-&gt;addServer(‘localhost‘, 11211, true, 1, 1, 15, true); // retrt_interval=15$is_set = $mem-&gt;set(‘key1‘, ‘中华人民共和国‘); 上面的例子中如果localhost服务器down掉或是memcache守护进程当掉，执行请求的时候连接服务器失败时算起15秒后会自动重试连 接服务器，但是在这15秒内不会去连接这个服务器，就是只要有请求，没15秒就会尝试连接服务器，但是每个服务器连接重试是独立的。比如说我一次添加了两 个服务器一个是localhost，一个是172.16.100.60，它们分别是从各自连接失败那个时间算起，只要对各自服务器有请求就会每隔15秒去 连接各自的服务器的。 retry_interval和status结合使用的情况12345&lt;?php$mem = new Memcache;$is_add = $mem-&gt;addServer(‘localhost‘, 11211, true, 1, 1, -1, false); // retrt_interval=-1, status=false$is_set = $mem-&gt;set(‘key1‘, ‘中华人民共和国‘);?&gt; 在上面的retrt_interval&#x3D;-1, status&#x3D;false这种情况下，将连接失败的服务器放到一个不响应请求的一个池子中，因此对key分配的算法也就没有影响了，而他是立即返回错误失败还是故障转移还要看memcache.allow_failover的设置，执行set， add， replace，get等请求的时候都会失败返回false，即使memcache进程运行正常。 status参数的测试除了与retry_interval结合使用，status单独使用的情况会对函数memcache::getServerStatu获得的结果产生影响无论memcache进程的正常运行还是当掉，status为true的时候getServerStatus的结果都是true，反之则为false但是在memcache进程正常运行的情况下，对set，add，replace，get等函数都没有影响。 Memcache::add说明 bool Memcache::add ( string $key , mixed $var [, int $flag [, int $expire ]] )添加一个要缓存的数据如果作为这个缓存的数据的键在服务器上还不存在的情况下, 参数 - - key 缓存数据的键 其长度不能超过250个字符 var 值，整型将直接存储，其他类型将被序列化存储 ，其值最大为1M flag 是否使用 zlib 压缩 ,当flag&#x3D;MEMCACHE_COMPRESSED的时侯，数据很小的时候不会采用zlib压缩，只有数据达到一定大小才对数据进行zlib压缩。（没有具体的测试数据进行压缩的最小值是多少） expire 过期时间，0 为永不过期，可使用 unix 时间戳格式或距离当前时间的秒数，设为秒数时不能大于 2592000（30 天） 返回值成功返回 TRUE，失败返回 FALSE，如果这个键已经存在，其他方面memcache:;add()的行为与memcache::set相似 范例1234567&lt;?php$memcache_obj = memcache_connect(&quot;localhost&quot;, 11211);/* procedural API */memcache_add($memcache_obj, ‘var_key‘, ‘test variable‘, FALSE, 30);/* OO API */$memcache_obj-&gt;add(‘var_key‘, ‘test variable‘, FALSE, 30);?&gt; Memcache::replace说明 bool Memcache::replace ( string $key , mixed $var [, int $flag [, int $expire ]] )替换一个指定 已存在key 的的缓存变量内容 参数 - - key 缓存数据的键， 其长度不能超过250个字符 var 值，整型将直接存储，其他类型将被序列化存储，其值最大为1M flag 是否使用 zlib 压缩 ,当flag&#x3D;MEMCACHE_COMPRESSED的时侯，数据很小的时候不会采用zlib压缩，只有数据达到一定大小才对数据进行zlib压缩。（没有具体的测试数据进行压缩的最小值是多少） expire 过期时间，0 为永不过期，可使用 unix 时间戳格式或距离当前时间的秒数，设为秒数时不能大于 2592000（30 天） 返回值成功返回 TRUE，失败返回 FALSE。 范例1234567&lt;?php$memcache_obj = memcache_connect(‘memcache_host‘, 11211);/* procedural API */memcache_replace($memcache_obj, &quot;test_key&quot;, &quot;some variable&quot;, FALSE, 30);/* OO API */$memcache_obj-&gt;replace(&quot;test_key&quot;, &quot;some variable&quot;, FALSE, 30);?&gt; Memcache::set说明 bool Memcache::set ( string $key , mixed $var [, int $flag [, int $expire ]] )设置一个指定 key 的缓存变量内容 参数 - - key 缓存数据的键， 其长度不能超过250个字符 var 值，整型将直接存储，其他类型将被序列化存储，其值最大为1M flag 是否使用 zlib 压缩 ,当flag&#x3D;MEMCACHE_COMPRESSED的时侯，数据很小的时候不会采用zlib压缩，只有数据达到一定大小才对数据进行zlib压缩。（没有具体的测试数据进行压缩的最小值是多少） expire 过期时间，0 为永不过期，可使用 unix 时间戳格式或距离当前时间的秒数，设为秒数时不能大于 2592000（30 天） 返回值成功返回 TRUE，失败返回 FALSE。 范例123456789101112&lt;?php/* procedural API *//* connect to memcached server */$memcache_obj = memcache_connect(‘memcache_host‘, 11211);/*set value of item with key ‘var_key‘using 0 as flag value, compression is not usedexpire time is 30 second*/memcache_set($memcache_obj, ‘var_key‘, ‘some variable‘, 0, 30);echo memcache_get($memcache_obj, ‘var_key‘);?&gt; 123456789101112&lt;?php/* OO API */$memcache_obj = new Memcache;/* connect to memcached server */$memcache_obj-&gt;connect(‘memcache_host‘, 11211);/*set value of item with key ‘var_key‘, using on-the-fly compressionexpire time is 50 seconds*/$memcache_obj-&gt;set(‘var_key‘, ‘some really big variable‘, MEMCACHE_COMPRESSED, 50);echo $memcache_obj-&gt;get(‘var_key‘);?&gt; Memcache::get说明 string Memcache::get ( string $key [, int &amp;$flags ] )array Memcache::get ( array $keys [, array &amp;$flags ] )获取某个 key 的变量缓存值 参数 - - key 缓存值的键 flags 如果是传址某个变量，获取缓存值被set或是add的flag结果将被存于该变量 返回值返回缓存的指定 key 的变量内容或者是在失败或该变量的值不存在时返回 FALSE如果传出的key的数组中的key都不存在，返回的结果是一个空数组，反之则返回key与缓存值相关联的关联数组 范例1234567891011121314151617181920212223&lt;?php/* procedural API */$memcache_obj = memcache_connect(‘memcache_host‘, 11211);$var = memcache_get($memcache_obj, ‘some_key‘);/* OO API */$memcache_obj = new Memcache;$memcache_obj-&gt;connect(‘memcache_host‘, 11211);$var = $memcache_obj-&gt;get(‘some_key‘);/*You also can use array of keys as a parameter.If such item wasn‘t found at the server, the resultarray simply will not include such key.*//* procedural API */$memcache_obj = memcache_connect(‘memcache_host‘, 11211);$var = memcache_get($memcache_obj, Array(‘some_key‘, ‘another_key‘));//如果some_key，another_key不存在 $var = array();//如果some_key，another_key存在 $var = array(‘some_key‘=&gt;‘缓存值‘, ‘another_key‘=&gt;‘缓存值‘);/* OO API */$memcache_obj = new Memcache;$memcache_obj-&gt;connect(‘memcache_host‘, 11211);$var = $memcache_obj-&gt;get(Array(‘some_key‘, ‘second_key‘));?&gt; Memcache::delete说明 bool Memcache::delete ( string $key [, int $timeout ] ) 删除某一个变量的缓存 参数 - - key 缓存的键 键值不能为null和‘’，当它等于前面两个值的时候php会有警告错误。 timeout 删除这项的时间，如果它等于0，这项将被立刻删除反之如果它等于30秒，那么这项被删除在30秒内 返回值成功返回 TRUE，失败返回 FALSE。 范例12345678910&lt;?php/* procedural API */$memcache_obj = memcache_connect(‘memcache_host‘, 11211);/* after 10 seconds item will be deleted by the server */memcache_delete($memcache_obj, ‘key_to_delete‘, 10);/* OO API */$memcache_obj = new Memcache;$memcache_obj-&gt;connect(‘memcache_host‘, 11211);$memcache_obj-&gt;delete(‘key_to_delete‘, 10);?&gt; Memcache::flush说明 bool Memcache::flush ( void ) 清空所有缓存内容，不是真的删除缓存的内容，只是使所有变量的缓存过期，使内存中的内容被重写 返回值成功返回 TRUE，失败返回 FALSE。 范例12345678910&lt;?php/* procedural API */$memcache_obj = memcache_connect(‘memcache_host‘, 11211);memcache_flush($memcache_obj);/* OO API */$memcache_obj = new Memcache;$memcache_obj-&gt;connect(‘memcache_host‘, 11211);$memcache_obj-&gt;flush();?&gt; Memcache::getExtendedStats说明 array Memcache::getExtendedStats ([ string $type [, int $slabid [, int $limit ]]] ) 获取所有服务器扩展静态信息 参数 - - type 静态信息类型，有效值包括{reset, malloc, maps, cachedump, slabs, items, sizes}，依照一定规则协议这个可选参数是为了方便开发人员查看不同类别的信息而输入的标题 slabid 用于按指定类型联合设置 cache 堆为有效的片到堆中。缓存堆被被命令绑定到服务器上并被严格的用于调试用途 limit 用于按指定类型联合设置 cache 堆为输入的数字所限制的大小到堆，默认值为 100 返回值返回一个由服务器扩展静态信息二维数组，失败时返回 FALSE 范例1234567&lt;?php$memcache_obj = new Memcache;$memcache_obj-&gt;addServer(‘memcache_host‘, 11211);$memcache_obj-&gt;addServer(‘failed_host‘, 11211);$stats = $memcache_obj-&gt;getExtendedStats(); print_r($stats);?&gt; 输出结果 123456789101112131415161718192021222324Array([memcache_host:11211] =&gt; Array([pid] =&gt; 3756[uptime] =&gt; 603011[time] =&gt; 1133810435[version] =&gt; 1.1.12[rusage_user] =&gt; 0.451931[rusage_system] =&gt; 0.634903[curr_items] =&gt; 2483[total_items] =&gt; 3079[bytes] =&gt; 2718136[curr_connections] =&gt; 2[total_connections] =&gt; 807[connection_structures] =&gt; 13[cmd_get] =&gt; 9748[cmd_set] =&gt; 3096[get_hits] =&gt; 5976[get_misses] =&gt; 3772[bytes_read] =&gt; 3448968[bytes_written] =&gt; 2318883[limit_maxbytes] =&gt; 33554432),[failed_host:11211] =&gt;) Memcache::getStats说明 array Memcache::getStats ([ string $type [, int $slabid [, int $limit ]]] ) 获取最后添加服务器静态信息 参数 - - type 静态信息类型，有效值包括{reset, malloc, maps, cachedump, slabs, items, sizes}，依照一定规则协议这个可选参数是为了方便开发人员查看不同类别的信息而输入的标题 slabid 用于按指定类型联合设置 cache 堆为有效的片到堆中。缓存堆被被命令绑定到服务器上并被严格的用于调试用途 limit 用于按指定类型联合设置 cache 堆为输入的数字所限制的大小到堆，默认值为 100 返回值返回一个服务器静态信息数组，失败时返回 FALSE Memcache::getServerStatus说明 int Memcache::getServerStatus ( string $host [, int $port ] ) 通过输入的 host 及 port 来获取相应的服务器信息 参数 - - host 服务器域名或 IP port 端口号，默认为 11211 返回值返回服务器状态，0 为失败，其他情况返回非 0 数字 范例123456789&lt;?php/* OO API */$memcache = new Memcache;$memcache-&gt;addServer(‘memcache_host‘, 11211);echo $memcache-&gt;getServerStatus(‘memcache_host‘, 11211);/* procedural API */$memcache = memcache_connect(‘memcache_host‘, 11211);echo memcache_get_server_status($memcache, ‘memcache_host‘, 11211);?&gt; Memcache::getVersion说明 string Memcache::getVersion ( void ) 获取服务器的版本号信息 返回值成功返回服务器的版本号字符串，失败返回 FALSE 范例123456789&lt;?php/* OO API */$memcache = new Memcache;$memcache-&gt;connect(‘memcache_host‘, 11211);echo $memcache-&gt;getVersion();/* procedural API */$memcache = memcache_connect(‘memcache_host‘, 11211);echo memcache_get_version($memcache);?&gt; Memcache::setCompressThreshold bool Memcache::setCompressThreshold ( int $threshold [, float $min_savings ] )设置压缩极限 参数 - - threshold 设置控制自动压缩的变量长度的最小值 min_saving 指定的最低压缩比率，值必须介于 0 - 1 之间，默认为 0.2 代表 20% 的压缩比率 返回值成功返回 TRUE，失败返回 FALSE。 范例123456789&lt;?php/* OO API */$memcache_obj = new Memcache;$memcache_obj-&gt;addServer(‘memcache_host‘, 11211);$memcache_obj-&gt;setCompressThreshold(20000, 0.2);/* procedural API */$memcache_obj = memcache_connect(‘memcache_host‘, 11211);memcache_set_compress_threshold($memcache_obj, 20000, 0.2);?&gt; Memcache::setServerParams说明 bool Memcache::setServerParams ( string $host [, int $port [, int $timeout [, int $retry_interval [, bool $status [, callback $failure_callback ]]]]] )Memcache version 2.1.0 后增加的函数，运行时设置服务器参数 参数 - - host 服务器域名或 IP port 端口号，默认为 11211 timeout 超时连接失效的秒数，修改默认值 1 时要三思，有可能失去所有缓存方面的优势导致连接变得很慢 retry_interval 服务器连接失败时的重试频率，默认是 15 秒一次，如果设置为 -1 将禁止自动重试，当扩展中加载了 dynamically via dl() 时，无论本参数还是常连接设置参数都会失效。 每一个失败的服务器在失效前都有独自的生存期，选择后端请求时会被跳过而不服务于请求。一个过期的连接将成功的重新连接或者被标记为失败的连接等待下一次 重试。这种效果就是说每一个 web server 的子进程在服务于页面时的重试连接都跟他们自己的重试频率有关。 status 控制服务器是否被标记为 online，设置这个参数为 FALSE 并设置 retry_interval 为 -1 可以使连接失败的服务器被放到一个描述不响应请求的服务器池子中，对这个服务器的请求将失败，接受设置为失败服务器的设置，默认参数为 TRUE，代表该服务器可以被定义为 online。 failure_callback 失败时的回调函数，函数的两个参数为失败服务器的 hostname 和 port 返回值成功返回 TRUE，失败返回 FALSE。 范例1234567891011121314&lt;?phpfunction _callback_memcache_failure($host, $port)&#123; print &quot;memcache ‘$host:$port‘ failed&quot;;&#125;/* OO API */$memcache = new Memcache;// Add the server in offline mode$memcache-&gt;addServer(‘memcache_host‘, 11211, FALSE, 1, 1, -1, FALSE);// Bring the server back online$memcache-&gt;setServerParams(‘memcache_host‘, 11211, 1, 15, TRUE, ‘_callback_memcache_failure‘);/* procedural API */$memcache_obj = memcache_connect(‘memcache_host‘, 11211);memcache_set_server_params($memcache_obj, ‘memcache_host‘, 11211, 1, 15, TRUE, ‘_callback_memcache_failure‘);?&gt; Memcache::increment说明 int Memcache::increment ( string $key [, int $value ] )给指定 key 的缓存变量一个增值，如果该变量不是数字时不会被转化为数字，这个增值将会加到该变量原有的数字之上，变量不存在不会新增变量，对于压缩存储的变量不要使用本函数因为相应的取值方法会失败。 参数 - - key 缓存值的键 value 值，整型将直接存储，其他类型将被序列化存储 返回值成功返回新的变量值，失败返回 FALSE。 范例1234567891011&lt;?php/* procedural API */$memcache_obj = memcache_connect(‘memcache_host‘, 11211);/* increment counter by 2 */$current_value = memcache_increment($memcache_obj, ‘counter‘, 2);/* OO API */$memcache_obj = new Memcache;$memcache_obj-&gt;connect(‘memcache_host‘, 11211);/* increment counter by 3 */$current_value = $memcache_obj-&gt;increment(‘counter‘, 3);?&gt; Memcache::decrement说明 int Memcache::decrement ( string $key [, int $value ] )给指定 key 的缓存变量一个递减值，与 increment 操作类似，将在原有变量基础上减去这个值，该项的值将会在转化为数字后减去，新项的值不会小于 0，对于压缩存储的变量不要使用本函数因为相应的取值方法会失败。 参数 - - key 缓存值的键 value 值，整型将直接存储，其他类型将被序列化存储 返回值成功返回新的变量值，失败返回 FALSE。 范例1234567891011&lt;?php/* procedural API */$memcache_obj = memcache_connect(‘memcache_host‘, 11211);/* decrement item by 2 */$new_value = memcache_decrement($memcache_obj, ‘test_item‘, 2);/* OO API */$memcache_obj = new Memcache;$memcache_obj-&gt;connect(‘memcache_host‘, 11211);/* decrement item by 3 */$new_value = $memcache_obj-&gt;decrement(‘test_item‘, 3);?&gt; memcache_debug说明 bool memcache_debug ( bool $on_off ) 设置 memcache 的调试器是否开启，值为 TRUE 或 FALSE。 受影响于 php 安装时是否使用了 –enable-debug 选项，如果使用了该函数才会返回 TRUE，其他情况将始终返回 FALSE。 参数 - - on_off 设置调试模式是否开启，TRUE 为开启，FALSE 为关闭 返回值php 安装时如果使使用了 –enable-debug 选项返回 TRUE，否则将返回 FALSE。 参考资料来源：http://www.cnblogs.com/qiantuwuliang/archive/2011/03/07/1974499.html","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"},{"name":"Memcache","slug":"Memcache","permalink":"https://blog.gowhich.com/tags/Memcache/"}]},{"title":"Memcache的客户端连接","date":"2025-06-09T08:30:09.000Z","path":"2025/06/09/Memcache的客户端连接.html","text":"许多语言都实现了连接memcached的客户端，其中以Perl、PHP为主。 仅仅memcached网站上列出的语言就有 Perl PHP Python Ruby C# C&#x2F;C++ Lua 等等。 memcached客户端API：http://www.danga.com/memcached/apis.bml这里介绍通过mixi正在使用的Perl库链接memcached的方法。 使用Cache::MemcachedPerl的memcached客户端有 Cache::Memcached Cache::Memcached::Fast Cache::Memcached::libmemcached 等几个CPAN模块。这里介绍的Cache::Memcached是memcached的作者Brad Fitzpatric的作品， 应该算是memcached的客户端中应用最为广泛的模块了。 Cache::Memcached – search.cpan.org: http://search.cpan.org/dist/Cache-Memcached/ 使用Cache::Memcached连接memcached下面的源代码为通过Cache::Memcached连接刚才启动的memcached的例子。 1234567891011121314151617#!/usr/bin/perluse strict;use warnings;use Cache::Memcached;my $key = &quot;foo&quot;;my $value = &quot;bar&quot;;my $expires = 3600; # 1 hourmy $memcached = Cache::Memcached-&gt;new(&#123; servers =&gt; [&quot;127.0.0.1:11211&quot;], compress_threshold =&gt; 10_000&#125;);$memcached-&gt;add($key, $value, $expires);my $ret = $memcached-&gt;get($key);print &quot;$ret\\n&quot;; 在这里，为Cache::Memcached指定了memcached服务器的IP地址和一个选项，以生成实例。 Cache::Memcached常用的选项如下所示。 选项 说明 servers 用数组指定memcached服务器和端口 compress_threshold 数据压缩时使用的值 namespace 指定添加到键的前缀 另外，Cache::Memcached通过Storable模块可以将Perl的复杂数据序列化之后再保存， 因此散列、数组、对象等都可以直接保存到memcached中。 保存数据向memcached保存数据的方法有 add replace set 它们的使用方法都相同： 12345my $add = $memcached-&gt;add( &#x27;键&#x27;, &#x27;值&#x27;, &#x27;期限&#x27; );my $replace = $memcached-&gt;replace( &#x27;键&#x27;, &#x27;值&#x27;, &#x27;期限&#x27; );my $set = $memcached-&gt;set( &#x27;键&#x27;, &#x27;值&#x27;, &#x27;期限&#x27; );my $val = $memcached-&gt;get(&#x27;键&#x27;);my $val = $memcached-&gt;get_multi(&#x27;键1&#x27;, &#x27;键2&#x27;, &#x27;键3&#x27;, &#x27;键4&#x27;, &#x27;键5&#x27;); 一次取得多条数据时使用getmulti。getmulti可以非同步地同时取得多个键值， 其速度要比循环调用get快数十倍。 删除数据删除数据使用delete方法，不过它有个独特的功能。 1$memcached-&gt;delete(&#x27;键&#x27;, &#x27;阻塞时间(秒)&#x27;); 删除第一个参数指定的键的数据。第二个参数指定一个时间值，可以禁止使用同样的键保存新数据。 此功能可以用于防止缓存数据的不完整。但是要注意，set函数忽视该阻塞，照常保存数据 增一和减一操作可以将memcached上特定的键值作为计数器使用。 12my $ret = $memcached-&gt;incr(&#x27;键&#x27;);$memcached-&gt;add(&#x27;键&#x27;, 0) unless defined $ret; 增一和减一是原子操作，但未设置初始值时，不会自动赋成0。因此， 应当进行错误检查，必要时加入初始化操作。而且，服务器端也不会对 超过2 SUP(32)时的行为进行检查。","tags":[{"name":"Memcache","slug":"Memcache","permalink":"https://blog.gowhich.com/tags/Memcache/"}]},{"title":"Memcache基础介绍","date":"2025-06-09T08:22:04.000Z","path":"2025/06/09/Memcache基础介绍.html","text":"memcached 是以LiveJournal 旗下Danga Interactive 公司的Brad Fitzpatric 为首开发的一款软件。现在已成为 mixi、 hatena、 Facebook、 Vox、LiveJournal等众多服务中 提高Web应用扩展性的重要因素。 许多Web应用都将数据保存到RDBMS中，应用服务器从中读取数据并在浏览器中显示。 但随着数据量的增大、访问的集中，就会出现RDBMS的负担加重、数据库响应恶化、 网站显示延迟等重大影响。 这时就该memcached大显身手了。memcached是高性能的分布式内存缓存服务器。 一般的使用目的是，通过缓存数据库查询结果，减少数据库访问次数，以提高动态Web应用的速度、 提高可扩展性。 memcached的特征memcached作为高速运行的分布式缓存服务器，具有以下的特点。 协议简单 基于libevent的事件处理 内置内存存储方式 memcached不互相通信的分布式 协议简单memcached的服务器客户端通信并不使用复杂的XML等格式， 而使用简单的基于文本行的协议。因此，通过telnet 也能在memcached上保存数据、取得数据。下面是例子。 12345678910$ telnet localhost 11211Trying 127.0.0.1...Connected to localhost.localdomain (127.0.0.1).Escape character is &#x27;^]&#x27;.set foo 0 0 3 （保存命令）bar （数据）STORED （结果）get foo （取得命令）VALUE foo 0 3 （数据）bar （数据） 协议文档位于memcached的源代码内，也可以参考以下的URL。 http://code.sixapart.com/svn/memcached/trunk/server/doc/protocol.txt 基于libevent的事件处理libevent是个程序库，它将Linux的epoll、BSD类操作系统的kqueue等事件处理功能 封装成统一的接口。即使对服务器的连接数增加，也能发挥O(1)的性能。 memcached使用这个libevent库，因此能在Linux、BSD、Solaris等操作系统上发挥其高性能。 可以参考Dan Kegel的The C10K Problem。 libevent: http://www.monkey.org/~provos/libevent/The C10K Problem: http://www.kegel.com/c10k.html 内置内存存储方式为了提高性能，memcached中保存的数据都存储在memcached内置的内存存储空间中。 由于数据仅存在于内存中，因此重启memcached、重启操作系统会导致全部数据消失。 另外，内容容量达到指定值之后，就基于LRU(Least Recently Used)算法自动删除不使用的缓存。 memcached本身是为缓存而设计的服务器，因此并没有过多考虑数据的永久性问题。 memcached不互相通信的分布式memcached尽管是“分布式”缓存服务器，但服务器端并没有分布式功能。 各个memcached不会互相通信以共享信息。那么，怎样进行分布式呢？ 这完全取决于客户端的实现。 接下来简单介绍一下memcached的使用方法。 安装memcachedmemcached的安装比较简单，这里稍加说明。 memcached支持许多平台。 * Linux * FreeBSD * Solaris (memcached 1.2.5以上版本) * Mac OS X 另外也能安装在Windows上。这里使用Fedora Core 8进行说明。 memcached的安装运行memcached需要本文开头介绍的libevent库。Fedora 8中有现成的rpm包， 通过yum命令安装即可。 $ sudo yum install libevent libevent-devel memcached的源代码可以从memcached网站上下载。本文执笔时的最新版本为1.2.5。 Fedora 8虽然也包含了memcached的rpm，但版本比较老。因为源代码安装并不困难， 这里就不使用rpm了。 下载memcached：http://www.danga.com/memcached/download.bml memcached安装与一般应用程序相同，configure、make、make install就行了。 123456$ wget http://www.danga.com/memcached/dist/memcached-1.2.5.tar.gz$ tar zxf memcached-1.2.5.tar.gz$ cd memcached-1.2.5$ ./configure$ make$ sudo make install 默认情况下memcached安装到&#x2F;usr&#x2F;local&#x2F;bin下。 memcached的启动从终端输入以下命令，启动memcached。 123456789101112131415$ /usr/local/bin/memcached -p 11211 -m 64m -vvslab class 1: chunk size 88 perslab 11915slab class 2: chunk size 112 perslab 9362slab class 3: chunk size 144 perslab 7281中间省略...slab class 38: chunk size 391224 perslab 2slab class 39: chunk size 489032 perslab 2&lt;23 server listening&lt;24 send buffer was 110592, now 268435456&lt;24 server listening (udp)&lt;24 server listening (udp)&lt;24 server listening (udp)&lt;24 server listening (udp) 这里显示了调试信息。这样就在前台启动了memcached，监听TCP端口11211 最大内存使用量为64M。 作为daemon后台启动时，只需 1$ /usr/local/bin/memcached -p 11211 -m 64m -d 这里使用的memcached启动选项的内容如下。 选项 说明-p 使用的TCP端口。默认为11211-m 最大内存大小。默认为64M-vv 用very vrebose模式启动，调试信息和错误输出到控制台-d 作为daemon在后台启动 上面四个是常用的启动选项，其他还有很多，通过 1$ /usr/local/bin/memcached -h 命令可以显示。许多选项可以改变memcached的各种行为， 推荐读一读。","tags":[{"name":"Memcache","slug":"Memcache","permalink":"https://blog.gowhich.com/tags/Memcache/"}]},{"title":"Nodejs的安装、测试及hello world","date":"2025-06-09T08:19:55.000Z","path":"2025/06/09/Nodejs的安装-测试及hello-world.html","text":"安装：现在地址：http://www.nodejs.org/download/ 可以根据自己的系统类型，选择对应的安装文件，进行安装 测试写一个简单的hello world 123456var http = require(&#x27;http&#x27;);http.createServer(function (request, response) &#123; response.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/plain&#x27;&#125;); response.end(&#x27;Hello World\\n&#x27;);&#125;).listen(8124);console.log(&#x27;Server running at http://127.0.0.1:8124/&#x27;); 使用浏览器，输入url地址http://127.0.0.1:8124/，可以看到输出Hello World字符串，如果没有说明出现问题了。","tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://blog.gowhich.com/tags/Nodejs/"}]},{"title":"CSS opacity透明度继承问题","date":"2025-06-09T08:18:15.000Z","path":"2025/06/09/CSS-opacity透明度继承问题.html","text":"元素透明的做法，大概如下 1#div.opacity&#123; filter:alpha(opacity:80);opacity:0.8; &#125; 但是结果导致的问题是，里面所有的元素都开始透明了 通过搜索，搜集资料，我发现了一个解决问题的方法 HTML文件代码如下： 1234567891011&lt;div class=&#x27;well activity-outer&#x27;&gt; &lt;div class=&#x27;activity-opacity&#x27;&gt;&lt;/div&gt; &lt;div class=&#x27;activity-inner&#x27;&gt; &lt;h4&gt;活动细则:&lt;/h4&gt; &lt;div class=&#x27;detail&#x27;&gt; &lt;p style=&#x27;margin:0;padding:0;text-indent:1em&#x27;&gt;1. 手机拍摄黑龙江卫视乱世佳人照片并上传, 选择上传到“天心恋”和“重心恋”其中一组&lt;/p&gt; &lt;p style=&#x27;margin:0;padding:0;text-indent:1em&#x27;&gt;2. 普通观众点击支持，看哪些照片（带黑龙江卫视台标）获得支持多,优先获得奖品&lt;/p&gt; &lt;p style=&#x27;margin:0;padding:0;text-indent:1em&#x27;&gt;3. 本活动在和黑龙江卫视播出最后一期结束&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; CSS文件代码如下： 12345678910111213141516171819202122div.activity-outer&#123;padding:0;background-color:transparent;border:0&#125;div.activity-opacity,div.activity-inner&#123; height:100px; width:938px; left:0; position:relative; top:0; border-radius: 4px 4px 4px 4px; border-color:#ccc;&#125;div.activity-opacity&#123; background-color:#ccc; filter:alpha(opacity:80); opacity:.8;&#125;div.activity-inner&#123; margin-top: -119px; padding: 14px 4px 0 10px; color:white&#125; 以上两个文件的代码，是我做的网站的一个摘录，主css文件采用的是bootstrap这个css框架，记录一下。","tags":[{"name":"CSS","slug":"CSS","permalink":"https://blog.gowhich.com/tags/CSS/"}]},{"title":"Yii Relational Active Record（关联查询）relations","date":"2025-06-09T04:03:20.000Z","path":"2025/06/09/Yii-Relational-Active-Record（关联查询）relations.html","text":"在使用关联AR之前，首先要在数据库中建立关联的数据表之间的主键-外键关联，AR需要通过分析数据库中的定义数据表关联的元信息，来决定如何连接数据。 如何声明关联在使用AR进行关联查询之前，我们需要告诉AR各个AR类之间有怎样的关联。AR类之间的关联直接反映着数据库中这个类所代表的数据表之间的关联。从关系数据库的角度来说，两个数据表A，B之间可能的关联有三种：一对多，一对一，多对多。而在AR中，关联有以下四种：BELONGS_TO: 如果数据表A和B的关系是一对多，那我们就说B属于A（B belongs to A）。HAS_MANY: 如果数据表A和B的关系是多对一，那我们就说B有多个A（B has many A）。HAS_ONE: 这是‘HAS_MANY’关系中的一个特例，当A最多有一个的时候，我们说B有一个A （B has one A）。MANY_MANY: 这个相当于关系数据库中的多对多关系。因为绝大多数关系数据库并不直接支持多对多的关系，这时通常都需要一个单独的关联表，把多对多的关系分解为两个一对多的关系。用AR的方式去理解的话，我们可以认为 MANY_MANY关系是由BELONGS_TO和HAS_MANY组成的。在AR中声明关联，是通过覆盖（Override）父类CActiveRecord中的relations()方法来实现的。这个方法返回一个包含了关系定义的数组，数组中的每一组键值代表一个关联：&#39;VarName&#39;=&gt;array(&#39;RelationType&#39;, &#39;ClassName&#39;, &#39;ForeignKey&#39;, ...additional options)这里的VarName是这个关联的名称；RelationType指定了这个关联的类型，有四个常量代表了四种关联的类型：self::BELONGS_TO，self::HAS_ONE，self::HAS_MANY和self::MANY_MANYClassName是这个关系关联到的AR类的类名；ForeignKey指定了这个关联是通过哪个外键联系起来的。后面的additionaloptions可以加入一些额外的设置，后面会做介绍。 下面的代码演示了如何定义User和Post之间的关联。 1234567891011121314151617181920212223242526272829303132333435363738&lt;?phpclass Post extends CActiveRecord&#123; public function relations() &#123; return [ &#x27;author&#x27; =&gt; [ self::BELONGS_TO, &#x27;User&#x27;, &#x27;authorID&#x27;, ], &#x27;categories&#x27; =&gt; [ self::MANY_MANY, &#x27;Category&#x27;, &#x27;PostCategory(postID, categoryID)&#x27;, ], ]; &#125;&#125;class User extends CActiveRecord&#123; public function relations() &#123; return [ &#x27;posts&#x27; =&gt; [ self::HAS_MANY, &#x27;Post&#x27;, &#x27;authorID&#x27;, ], &#x27;profile&#x27; =&gt; [ self::HAS_ONE, &#x27;Profile&#x27;, &#x27;ownerID&#x27;, ], ]; &#125;&#125; 说明: 有时外键可能由两个或更多字段组成，在这里可以将多个字段名由逗号或空格分隔，一并写在这里。对于多对多的关系，关联表必须在外键中注明，例如在Post类的categories关联中，外键就需要写成PostCategory(postID, categoryID)。在AR类中声明关联时，每个关联会作为一个属性添加到AR类中，属性名就是关联的名称。在进行关联查询时，这些属性就会被设置为关联到的AR类的实例，例如在查询取得一个Post实例时，它的$author属性就是代表Post作者的一个User类的实例。 关联查询进行关联查询最简单的方式就是访问一个关联AR对象的某个关联属性。如果这个属性之前没有被访问过，这时就会启动一个关联查询，通过当前AR对象的主键连接相关的表，来取得关联对象的值，然后将这些数据保存在对象的属性中。这种方式叫做“延迟加载”，也就是只有等到访问到某个属性时，才会真正到数据库中把这些关联的数据取出来。下面的例子描述了延迟加载的过程： 1234// retrieve the post whose ID is 10$post=Post::model()-&gt;findByPk(10);// retrieve the post&#x27;s author: a relational query will be performed here$author=$post-&gt;author; 在不同的关联情况下，如果没有查询到结果，其返回的值也不同：BELONGS_TO 和 HAS_ONE 关联，无结果时返回null; HAS_MANY 和 MANY_MANY, 无结果时返回空数组。延迟加载方法使用非常方便，但在某些情况下并不高效。例如，若我们要取得N个post的作者信息，使用延迟方法将执行N次连接查询。此时我们应当使用所谓的急切加载方法。急切加载方法检索主要的 AR 实例及其相关的 AR 实例. 这通过使用 with() 方法加上 find 或 findAll 方法完成。例如，$posts=Post::model()-&gt;with(&#39;author&#39;)-&gt;findAll();上面的代码将返回一个由 Post 实例组成的数组. 不同于延迟加载方法，每个Post 实例中的author 属性在我们访问此属性之前已经被关联的User 实例填充。不是为每个post 执行一个连接查询, 急切加载方法在一个单独的连接查询中取出所有的 post 以及它们的author!我们可以在with()方法中指定多个关联名字。例如, 下面的代码将取回 posts 以及它们的作者和分类: $posts=Post::model()-&gt;with(&#39;author&#39;,&#39;categories&#39;)-&gt;findAll();我们也可以使用嵌套的急切加载。不使用一个关联名字列表, 我们将关联名字以分层的方式传递到 with() 方法, 如下, 12345$posts = Post::model()-&gt;with( &#x27;author.profile&#x27;, &#x27;author.posts&#x27;, &#x27;categories&#x27;)-&gt;findAll(); 上面的代码将取回所有的 posts 以及它们的作者和分类。它也将取出每个作者的profile和 posts.急切加载也可以通过指定 CDbCriteria::with 属性被执行, 如下: 1234567$criteria = new CDbCriteria;$criteria-&gt;with = [ &#x27;author.profile&#x27;, &#x27;author.posts&#x27;, &#x27;categories&#x27;,];$posts = Post::model()-&gt;findAll($criteria); 或 1$posts = Post::model()-&gt;findAll([&#x27;with&#x27; =&gt; [&#x27;author.profile&#x27;, &#x27;author.posts&#x27;, &#x27;categories&#x27;]]; 关联查询选项之前我们提到额外的参数可以被指定在关联声明中。这些选项，指定为 name-value 对，被用来定制关联查询。它们被概述如下： select: 为关联 AR 类查询的字段列表。默认是 ‘*’, 意味着所有字段。查询的字段名字可用别名表达式来消除歧义（例如：COUNT(??.name) AS nameCount）。condition: WHERE 子语句。默认为空。注意, 列要使用别名引用（例如：??.id&#x3D;10）。params: 被绑定到 SQL 语句的参数. 应当为一个由 name-value 对组成的数组（）。on: ON 子语句. 这里指定的条件将使用 and 操作符被追加到连接条件中。此选项中的字段名应被消除歧义。此选项不适用于 MANY_MANY 关联。order: ORDER BY 子语句。默认为空。注意, 列要使用别名引用（例如：??.age DESC）。with: 应当和此对象一同载入的子关联对象列表. 注意, 不恰当的使用可能会形成一个无穷的关联循环。joinType: 此关联的连接类型。默认是 LEFT OUTER JOIN。aliasToken：列前缀占位符。默认是“??.”。alias: 关联的数据表的别名。默认是 null, 意味着表的别名和关联的名字相同。together: 是否关联的数据表被强制与主表和其他表连接。此选项只对于HAS_MANY 和 MANY_MANY 关联有意义。若此选项被设置为 false, ……(此处原文出错!).默认为空。此选项中的字段名以被消除歧义。having: HAVING 子语句。默认是空。注意, 列要使用别名引用。index: 返回的数组索引类型。确定返回的数组是关键字索引数组还是数字索引数组。不设置此选项, 将使用数字索引数组。此选项只对于HAS_MANY 和 MANY_MANY 有意义 此外, 下面的选项在延迟加载中对特定关联是可用的: group: GROUP BY子句。默认为空。注意, 列要使用别名引用(例如：??.age)。 本选项仅应用于HAS_MANY 和 MANY_MANY 关联。having: HAVING子句。默认为空。注意, 列要使用别名引用(例如：??.age)。本选项仅应用于HAS_MANY 和 MANY_MANY 关联。limit: 限制查询的行数。本选项不能用于BELONGS_TO关联。offset: 偏移。本选项不能用于BELONGS_TO关联。 下面我们改变在 User 中的 posts 关联声明,通过使用上面的一些选项: 1234567891011121314&lt;?phpclass User extends CActiveRecord&#123; public function relations() &#123; return [ &#x27;posts&#x27; =&gt; [self::HAS_MANY, &#x27;Post&#x27;, &#x27;author_id&#x27;, &#x27;order&#x27; =&gt; &#x27;posts.create_time DESC&#x27;, &#x27;with&#x27; =&gt; &#x27;categories&#x27;, ], &#x27;profile&#x27; =&gt; [self::HAS_ONE, &#x27;Profile&#x27;, &#x27;owner_id&#x27;], ]; &#125;&#125; 现在若我们访问 $author-&gt;posts, 我们将得到用户的根据发表时间降序排列的 posts. 每个 post 实例也载入了它的分类。 为字段名消除歧义当一个字段的名字出现在被连接在一起的两个或更多表中，需要消除歧义(disambiguated)。可以通过使用表的别名作为字段名的前缀实现。在关联AR查询中，主表的别名确定为 t，而一个关联表的别名和相应的关联的名字相同(默认情况下)。 例如，在下面的语句中，Post 的别名是 t ，而 Comment 的别名是 comments:$posts=Post::model()-&gt;with(&#39;comments&#39;)-&gt;findAll();现在假设 Post 和 Comment 都有一个字段 create_time , 我们希望取出 posts 及它们的 comments,排序方式是先根据 posts 的创建时间,然后根据 comment 的创建时间。我们需要消除create_time 字段的歧义，如下: 12345$posts = Post::model() -&gt;with(&#x27;comments&#x27;) -&gt;findAll([ &#x27;order&#x27; =&gt; &#x27;t.create_time, comments.create_time&#x27;;, ]); 默认情况下,Yii 自动为每个关联表产生一个表别名，我们必须使用此前缀 ??. 来指向这个自动产生的别名。 主表的别名是表自身的名字。 动态关联查询选项我们使用 with()和 with 均可使用动态关联查询选项。 动态选项将覆盖在 relations() 方法中指定的已存在的选项。例如，使用上面的 User 模型， 若我们想要使用急切加载方法以升序来取出属于一个作者的 posts(关联中的order 选项指定为降序)， 我们可以这样做: 12345678User::model()-&gt;with( [ &#x27;posts&#x27; =&gt; [ &#x27;order&#x27; =&gt; &#x27;posts.create_time ASC&#x27;, ], &#x27;profile&#x27;, ])-&gt;findAll(); 动态查询选项也可以在使用延迟加载方法时使用以执行关联查询。 要这样做，我们应当调用一个方法，它的名字和关联的名字相同，并传递动态查询选项 作为此方法的参数。例如，下面的代码返回一个用户的 status 为 1 的 posts : 12$user = User::model()-&gt;findByPk(1);$posts = $user-&gt;posts([&#x27;condition&#x27; =&gt; &#x27;status=1&#x27;]); 关联查询的性能如上所述，急切加载方法主要用于当我们需要访问许多关联对象时。 通过连接所有所需的表它产生一个大而复杂的 SQL 语句。一个大的 SQL 语句在许多情况下是首选的。然而在一些情况下它并不高效。考虑一个例子，若我们需要找出最新的文章以及它们的评论。假设每个文章有 10 条评论，使用一个大的 SQL 语句，我们将取回很多多余的 post数据， 因为每个post 将被它的每条评论反复使用。现在让我们尝试另外的方法：我们首先查询最新的文章，然后查询它们的评论。用新的方法，我们需要执行执行两条 SQL 语句。有点是在查询结果中没有多余的数据。因此哪种方法更加高效？没有绝对的答案。执行一条大的 SQL 语句也许更加高效，因为它需要更少的花销来解析和执行 SQL 语句。另一方面，使用单条 SQL语句，我们得到更多冗余的数据，因此需要更多时间来阅读和处理它们。因为这个原因，Yii 提供了 together 查询选项以便我们在需要时选择两种方法之一。默认下， Yii 使用第一种方式，即产生一个单独的 SQL语句来执行急切加载。我们可以在关联声明中设置 together 选项为 false 以便一些表被连接在单独的 SQL语句中。例如，为了使用第二种方法来查询最新的文章及它们的评论，我们可以在 Post 类中声明 comments 关联如下, 123456function relations()&#123; return [ &#x27;comments&#x27; =&gt; [self::HAS_MANY, &#x27;Comment&#x27;, &#x27;post_id&#x27;, &#x27;together&#x27; =&gt; false], ];&#125; 当我们执行急切加载时，我们也可以动态地设置此选项: 1$posts = Post::model()-&gt;with([&#x27;comments&#x27; =&gt; [&#x27;together&#x27; =&gt; false]])-&gt;findAll(); 统计查询除了上面描述的关联查询，Yii 也支持所谓的统计查询(或聚合查询)。 它指的是检索关联对象的聚合信息，例如每个 post的评论的数量，每个产品的平均等级等。统计查询只被 HAS_MANY(例如，一个 post 有很多评论) 或 MANY_MANY (例如，一个 post 属于很多分类和一个 category 有很多 post) 关联对象执行。执行统计查询非常类似于之前描述的关联查询。我们首先需要在 CActiveRecord 的 relations() 方法中声明统计查询。 12345678910class Post extends CActiveRecord&#123; public function relations() &#123; return [ &#x27;commentCount&#x27; =&gt; [self::STAT, &#x27;Comment&#x27;, &#x27;post_id&#x27;], &#x27;categoryCount&#x27; =&gt; [self::STAT, &#x27;Category&#x27;, &#x27;post_category(post_id,category_id)&#x27;], ]; &#125;&#125; 在上面，我们声明了两个统计查询：commentCount 计算属于一个 post 的评论的数量，categoryCount 计算一个 post所属分类的数量。注意 Post 和 Comment 之间的关联类型是 HAS_MANY， 而 Post 和 Category 之间的关联类型是 MANY_MANY (使用连接表 PostCategory)。如我们所看到的，声明非常类似于之间小节中的关联。唯一的不同是这里的关联类型是STAT。有了上面的声明，我们可以检索使用表达式 $post-&gt;commentCount 检索一个 post 的评论的数量。当我们首次访问此属性，一个 SQL 语句将被隐含地执行并检索 对应的结果。我们已经知道，这是所谓的 lazy loading方法。若我们需要得到多个post 的评论数目，我们也可以使用 eager loading 方法:$posts=Post::model()-&gt;with(&#39;commentCount&#39;, &#39;categoryCount&#39;)-&gt;findAll();上面的语句将执行三个 SQL 语句以取回所有的 post 及它们的评论数目和分类数目。使用延迟加载方法， 若有 N 个 post ,我们使用 2N+1 条 SQL 查询完成。默认情况下，一个统计查询将计算 COUNT 表达式(and thus the comment count and category countin the above example).当我们在 relations()中声明它时，通过 指定额外的选项，可以定制它。可用的选项简介如下。select: 统计表达式。默认是 COUNT()，意味着子对象的个数。defaultValue: 没有接收一个统计查询结果时被赋予的值。例如，若一个 post 没有任何评论，它的 commentCount 将接收此值。此选项的默认值是 0。condition: WHERE 子语句。默认是空。params: 被绑定到产生的SQL 语句中的参数。它应当是一个 name-value 对组成的数组。order: ORDER BY 子语句。默认是空。group: GROUP BY 子语句。默认是空。having: HAVING 子语句。默认是空。 关联查询命名空间关联查询也可以和 命名空间一起执行。有两种形式。第一种形式，命名空间被应用到主模型。第二种形式，命名空间被应用到关联模型。下面的代码展示了如何应用命名空间到主模型。$posts=Post::model()-&gt;published()-&gt;recently()-&gt;with(&#39;comments&#39;)-&gt;findAll();这非常类似于非关联的查询。唯一的不同是我们在命名空间后使用了 with() 调用。 此查询应当返回最近发布的 post和它们的评论。下面的代码展示了如何应用命名空间到关联模型。$posts=Post::model()-&gt;with(&#39;comments:recently:approved&#39;)-&gt;findAll();上面的查询将返回所有的 post 及它们审核后的评论。注意 comments 指的是关联名字，而 recently 和 approved 指的是 在 Comment 模型类中声明的命名空间。关联名字和命名空间应当由冒号分隔。命名空间也可以在 CActiveRecord::relations() 中声明的关联规则的 with 选项中指定。在下面的例子中， 若我们访问 $user-&gt;posts，它将返回此post 的所有审核后的评论。 123456789class User extends CActiveRecord&#123; public function relations() &#123; return [ &#x27;posts&#x27; =&gt; [self::HAS_MANY, &#x27;Post&#x27;, &#x27;author_id&#x27;, &#x27;with&#x27; =&gt; &#x27;comments:approved&#x27;], ]; &#125;&#125; 注意: 应用到关联模型的命名空间必须在 CActiveRecord::scopes 中指定。结果，它们不能被参数化。","tags":[{"name":"Yii","slug":"Yii","permalink":"https://blog.gowhich.com/tags/Yii/"}]},{"title":"PHP下载远程图片的方法","date":"2025-06-09T03:56:59.000Z","path":"2025/06/09/PHP下载远程图片的方法.html","text":"获取远程文件大小及信息的函数12345678910111213141516171819202122&lt;?phpfunction getFileSize($url)&#123; $url = parse_url($url); if ($fp = @fsockopen($url[’host’], empty($url[’port’]) ? 80 : $url[’port’], $error)) &#123; fputs($fp, &quot;GET &quot; . (empty($url[’path’]) ? ’ / ’ : $url[’path’]) . &quot; HTTP/1.1\\r\\n&quot;); fputs($fp, &quot;Host:$url[host]\\r\\n\\r\\n&quot;); while (!feof($fp)) &#123; $tmp = fgets($fp); if (trim($tmp) == ’’) &#123; break; &#125; else if (preg_match(’ / Content - Length:( . * ) / si’, $tmp, $arr)) &#123; return trim($arr[1]); &#125; &#125; return null; &#125; else &#123; return null; &#125;&#125;echo getFileSize(&quot;http://www.dianpub.com/download/xml.rar&quot;); 图片12345678910111213141516171819202122232425262728293031&lt;?php//记录程序开始的时间$BeginTime = getmicrotime();function GrabImage($url, $filename = &quot;&quot;)&#123; if (&quot;&quot; == $url): return false; if (&quot;&quot; == $filename) &#123; $ext = strrchr($url, &quot;.&quot;); if (&quot;.gif&quot; != $ext &amp;&amp; &quot;.jpg&quot; != $ext): return false; $filename = date(&quot;dMYHis&quot;) . $ext; &#125; ob_start(); readfile($url); $img = ob_get_contents(); ob_end_clean(); $size = strlen($img); $fp2 = @fopen($filename, &quot;a&quot;); fwrite($fp2, $img); fclose($fp2); return $filename;&#125;$img = GrabImage(&quot;http://www.dianpub.com/images/_1978837_detector_ap100.jpg&quot;, &quot;&quot;);if ($img): echo &#x27;&lt;pre&gt;&lt;img src=&quot;&#x27; . $img . &#x27;&quot;&gt;&lt;/pre&gt;&#x27;;else:echo &quot;false&quot;;//记录程序运行结束的时间$EndTime = getmicrotime();//返回运行时间exit($EndTime - $BeginTime); 全文下载图片12345678910111213141516171819202122232425262728&lt;?phpif (!empty($saveremoteimg)) &#123; $body = stripslashes($body); $img_array = []; preg_match_all(&quot;/(src|SRC)=[\\&quot;|&#x27;| ]&#123;0,&#125;(http:\\/\\/(.*)\\.(gif|jpg|jpeg|bmp|png))/isU&quot;, $body, $img_array); $img_array = array_unique($img_array[2]); set_time_limit(0); $imgUrl = $img_dir . &quot;/&quot; . strftime(&quot;%Y%m%d&quot;, time()); $imgPath = $base_dir . $imgUrl; $milliSecond = strftime(&quot;%H%M%S&quot;, time()); if (!is_dir($imgPath)) &#123; @mkdir($imgPath, 0777); &#125; foreach ($img_array as $key =&gt; $value) &#123; $value = trim($value); $get_file = @file_get_contents($value); $rndFileName = $imgPath . &quot;/&quot; . $milliSecond . $key . &quot;.&quot; . substr($value, -3, 3); $fileurl = $imgUrl . &quot;/&quot; . $milliSecond . $key . &quot;.&quot; . substr($value, -3, 3); if ($get_file) &#123; $fp = @fopen($rndFileName, &quot;w&quot;); @fwrite($fp, $get_file); @fclose($fp); &#125; $body = ereg_replace($value, $fileurl, $body); &#125; $body = addslashes($body);&#125; PHP远程文件下载类（支持断点续传）1）功能:支持断点续传的下载,能计算传输率,能控制传输率 简易使用方法: 12345&lt;?php$object = new httpdownload();$object-&gt;set_byfile($file);//服务器文件名,包括路径$object-&gt;filename = $filename;//下载另存为的文件名$object-&gt;download(); 类文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288&lt;?phpclass httpdownload&#123; public $data = null; public $data_len = 0; public $data_mod = 0; public $data_type = 0; public $data_section = 0; //section download public $sentSize = 0; public $handler = [&#x27;auth&#x27; =&gt; null]; public $use_resume = true; public $use_autoexit = false; public $use_auth = false; public $filename = null; public $mime = null; public $bufsize = 2048; public $seek_start = 0; public $seek_end = -1; public $totalsizeref = 0; public $bandwidth = 0; public $speed = 0; public function initialize() &#123; global $HTTP_SERVER_VARS; if ($this-&gt;use_auth) &#123; if (!$this-&gt;_auth()) &#123; header(&#x27;WWW-Authenticate: Basic realm=&quot;Please enter your username and password&quot;&#x27;); header(&#x27;HTTP/1.0 401 Unauthorized&#x27;); header(&#x27;status: 401 Unauthorized&#x27;); if ($this-&gt;use_autoexit) &#123; exit(); &#125; return false; &#125; &#125; if (null == $this-&gt;mime) &#123; $this-&gt;mime = &quot;application/octet-stream&quot;; &#125; //default mime if (isset($_SERVER[&#x27;HTTP_RANGE&#x27;]) || isset($HTTP_SERVER_VARS[&#x27;HTTP_RANGE&#x27;])) &#123; if (isset($HTTP_SERVER_VARS[&#x27;HTTP_RANGE&#x27;])) &#123; $seek_range = substr($HTTP_SERVER_VARS[&#x27;HTTP_RANGE&#x27;], strlen(&#x27;bytes=&#x27;)); &#125; else &#123; $seek_range = substr($_SERVER[&#x27;HTTP_RANGE&#x27;], strlen(&#x27;bytes=&#x27;)); &#125; $range = explode(&#x27;-&#x27;, $seek_range); if ($range[0] &gt; 0) &#123; $this-&gt;seek_start = intval($range[0]); &#125; if ($range[1] &gt; 0) &#123; $this-&gt;seek_end = intval($range[1]); &#125; else &#123; $this-&gt;seek_end = -1; &#125; if (!$this-&gt;use_resume) &#123; $this-&gt;seek_start = 0; //header(&quot;HTTP/1.0 404 Bad Request&quot;); //header(&quot;Status: 400 Bad Request&quot;); //exit; //return false; &#125; else &#123; $this-&gt;data_section = 1; &#125; &#125; else &#123; $this-&gt;seek_start = 0; $this-&gt;seek_end = -1; &#125; $this-&gt;sentSize = 0; return true; &#125; public function header($size, $seek_start = null, $seek_end = null) &#123; header(&#x27;Content-type: &#x27; . $this-&gt;mime); header(&#x27;Content-Disposition: attachment; filename=&quot;&#x27; . $this-&gt;filename . &#x27;&quot;&#x27;); header(&#x27;Last-Modified: &#x27; . date(&#x27;D, d M Y H:i:s \\G\\M\\T&#x27;, $this-&gt;data_mod)); if ($this-&gt;data_section &amp;&amp; $this-&gt;use_resume) &#123; header(&quot;HTTP/1.0 206 Partial Content&quot;); header(&quot;Status: 206 Partial Content&quot;); header(&#x27;Accept-Ranges: bytes&#x27;); header(&quot;Content-Range: bytes $seek_start-$seek_end/$size&quot;); header(&quot;Content-Length: &quot; . ($seek_end - $seek_start + 1)); &#125; else &#123; header(&quot;Content-Length: $size&quot;); &#125; &#125; public function download_ex($size) &#123; if (!$this-&gt;initialize()) &#123; return false; &#125; ignore_user_abort(true); //Use seek end here if ($this-&gt;seek_start &gt; ($size - 1)) &#123; $this-&gt;seek_start = 0; &#125; if ($this-&gt;seek_end &lt;= 0) &#123; $this-&gt;seek_end = $size - 1; &#125; $this-&gt;header($size, $seek, $this-&gt;seek_end); $this-&gt;data_mod = time(); return true; &#125; public function download() &#123; if (!$this-&gt;initialize()) &#123; return false; &#125; try &#123; error_log(&quot;begin download\\n&quot;, 3, &quot;/usr/local/www/apache22/LOGS/apache22_php.err&quot;); $seek = $this-&gt;seek_start; $speed = $this-&gt;speed; $bufsize = $this-&gt;bufsize; $packet = 1; //do some clean up @ob_end_clean(); $old_status = ignore_user_abort(true); @set_time_limit(0); $this-&gt;bandwidth = 0; $size = $this-&gt;data_len; if (0 == $this-&gt;data_type) //download from a file &#123; &#123; $size = filesize($this-&gt;data); &#125; if ($seek &gt; ($size - 1)) &#123; $seek = 0; &#125; if (null == $this-&gt;filename) &#123; $this-&gt;filename = basename($this-&gt;data); &#125; $res = fopen($this-&gt;data, &#x27;rb&#x27;); if ($seek) &#123; fseek($res, $seek); &#125; if ($this-&gt;seek_end &lt; $seek) &#123; $this-&gt;seek_end = $size - 1; &#125; $this-&gt;header($size, $seek, $this-&gt;seek_end); //always use the last seek $size = $this-&gt;seek_end - $seek + 1; while (!(connection_aborted() || connection_status() == 1) &amp;&amp; $size &gt; 0) &#123; if ($size &lt; $bufsize) &#123; echo fread($res, $size); $this-&gt;bandwidth += $size; $this-&gt;sentSize += $size; &#125; else &#123; echo fread($res, $bufsize); $this-&gt;bandwidth += $bufsize; $this-&gt;sentSize += $bufsize; &#125; $size -= $bufsize; flush(); if ($speed &gt; 0 &amp;&amp; ($this-&gt;bandwidth &gt; $speed * $packet * 1024)) &#123; sleep(1); $packet++; &#125; &#125; fclose($res); if (1 == $this-&gt;data_type) //download from a string &#123; if ($seek &gt; ($size - 1)) &#123; $seek = 0; &#125; if ($this-&gt;seek_end &lt; $seek) &#123; $this-&gt;seek_end = $this-&gt;data_len - 1; &#125; $this-&gt;data = substr($this-&gt;data, $seek, $this-&gt;seek_end - $seek + 1); if (null == $this-&gt;filename) &#123; $this-&gt;filename = time(); &#125; $size = strlen($this-&gt;data); $this-&gt;header($this-&gt;data_len, $seek, $this-&gt;seek_end); while (!connection_aborted() &amp;&amp; $size &gt; 0) &#123; if ($size &lt; $bufsize) &#123; $this-&gt;bandwidth += $size; $this-&gt;sentSize += $size; &#125; else &#123; $this-&gt;bandwidth += $bufsize; $this-&gt;sentSize += $bufsize; &#125; echo substr($this-&gt;data, 0, $bufsize); $this-&gt;data = substr($this-&gt;data, $bufsize); $size -= $bufsize; flush(); if ($speed &gt; 0 &amp;&amp; ($this-&gt;bandwidth &gt; $speed * $packet * 1024)) &#123; sleep(1); $packet++; &#125; &#125; &#125; else if (2 == $this-&gt;data_type) &#123; //just send a redirect header header(&#x27;location: &#x27; . $this-&gt;data); &#125; if ($this-&gt;totalsizeref == $this-&gt;sentSize) &#123; error_log(&quot;end download\\n&quot;, 3, &quot;/usr/local/www/apache22/LOGS/apache22_php.err&quot;); &#125; else &#123; error_log(&quot;download is canceled\\n&quot;, 3, &quot;/usr/local/www/apache22/LOGS/apache22_php.err&quot;); &#125; if ($this-&gt;use_autoexit) &#123; exit(); &#125; //restore old status ignore_user_abort($old_status); set_time_limit(ini_get(&quot;max_execution_time&quot;)); &#125; catch (Exception $e) &#123; error_log(&quot;cancel download\\n&quot; . $e, 3, &quot;/usr/local/www/apache22/LOGS/apache22_php.err&quot;); &#125; return true; &#125; public function set_byfile($dir) &#123; if (is_readable($dir) &amp;&amp; is_file($dir)) &#123; $this-&gt;data_len = 0; $this-&gt;data = $dir; $this-&gt;data_type = 0; $this-&gt;data_mod = filemtime($dir); $this-&gt;totalsizeref = filesize($dir); return true; &#125; else &#123; return false; &#125; &#125; public function set_bydata($data) &#123; if (&#x27;&#x27; == $data) &#123; return false; &#125; $this-&gt;data = $data; $this-&gt;data_len = strlen($data); $this-&gt;data_type = 1; $this-&gt;data_mod = time(); return true; &#125; public function set_byurl($data) &#123; $this-&gt;data = $data; $this-&gt;data_len = 0; $this-&gt;data_type = 2; return true; &#125; public function set_lastmodtime($time) &#123; $time = intval($time); if ($time &lt;= 0) &#123; $time = time(); &#125; $this-&gt;data_mod = $time; &#125; public function _auth() &#123; if (!isset($_SERVER[&#x27;PHP_AUTH_USER&#x27;])) &#123; return false; &#125; if (isset($this-&gt;handler[&#x27;auth&#x27;]) &amp;&amp; function_exists($this-&gt;handler[&#x27;auth&#x27;])) &#123; return $this-&gt;handler[&#x27;auth&#x27;](&#x27;auth&#x27;, $_SERVER[&#x27;PHP_AUTH_USER&#x27;], $_SERVER[&#x27;PHP_AUTH_PW&#x27;]); &#125; else &#123; return true; &#125; //you must use a handler &#125;&#125; PHP使用GD库下载远程图片123456789101112&lt;?php$imgname = &quot;http://imgdujia.kuxun.cn/newpic/929/812929/4.jpg&quot;;$src_im = imagecreatefromjpeg($imgname);$srcW = ImageSX($src_im); //获得图像的宽$srcH = ImageSY($src_im); //获得图像的高$dst_im = ImageCreateTrueColor($srcW, $srcH); //创建新的图像对象imagecopy($dst_im, $src_im, 0, 0, 0, 0, $srcW, $srcH);imagejpeg($dst_im, &quot;newpic.jpg&quot;); //创建缩略图文件echo &quot;&lt;img src=&quot;newpic . jpg&quot; mce_src=&quot;newpic . jpg&quot;&gt;&lt;/img&gt;&quot;; 123456789&lt;?phpheader(&quot;Content-type: image/png&quot;);$im = imagecreatefromjpeg(&quot;http://postimg.mop.com/200602/02/74/122374/200602022335325121.JPG&quot;);$white = imagecolorallocate($im, 0xF9, 0xD7, 0xCD);imagefill($im, 0, 0, $white);$text_color = imagecolorallocate($im, 233, 14, 91);imagestring($im, 1, 5, 5, &quot;A Simple Text String&quot;, $text_color);imagepng($im);imagedestroy($im);","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"NGINX如何开启和配置gzip","date":"2025-06-09T03:52:26.000Z","path":"2025/06/09/NGINX如何开启和配置gzip.html","text":"gzip是GNU zip的缩写，它是一个GNU自由软件的文件压缩程序，可以极大的加速网站.有时压缩比率高到80%,近来测试了一下,最少都有40%以上,还是相当不错的。大道至简，知易行难，悟者大成。 gzip 决定是否开启gzip模块example:gzip on; gzip_buffers 设置gzip申请内存的大小,其作用是按块大小的倍数申请内存空间param2:int(k) 后面单位是kexample: gzip_buffers 4 8k; gzip_comp_level 设置gzip压缩等级，等级越底压缩速度越快文件压缩比越小，反之速度越慢文件压缩比越大param:1-9example:gzip_com_level 1; gzip_min_length 当返回内容大于此值时才会使用gzip进行压缩,以K为单位,当值为0时，所有页面都进行压缩param:intexample:gzip_min_length 1000; gzip_http_version 用于识别http协议的版本，早期的浏览器不支持gzip压缩，用户会看到乱码，所以为了支持前期版本加了此选项,目前此项基本可以忽略param: 1.0|1.1example:gzip_http_version 1.0 gzip_proxied Nginx做为反向代理的时候启用，param:off|expired|no-cache|no-sotre|private|no_last_modified|no_etag|auth|any]expample:gzip_proxied no-cache;off – 关闭所有的代理结果数据压缩expired – 启用压缩，如果header中包含”Expires”头信息no-cache – 启用压缩，如果header中包含”Cache-Control:no-cache”头信息no-store – 启用压缩，如果header中包含”Cache-Control:no-store”头信息private – 启用压缩，如果header中包含”Cache-Control:private”头信息no_last_modified – 启用压缩，如果header中包含”Last_Modified”头信息no_etag – 启用压缩，如果header中包含“ETag”头信息auth – 启用压缩，如果header中包含“Authorization”头信息any – 无条件压缩所有结果数据 gzip_types 设置需要压缩的MIME类型,非设置值不进行压缩param:text&#x2F;html|application&#x2F;x-javascript|text&#x2F;css|application&#x2F;xmlexample:gzip_types text/html; Demo 1234gzip on;gzip_min_length 1000;gzip_buffers 4 8k;gzip_types text/html application/x-javascript text/css application/xml;","tags":[{"name":"NGINX","slug":"NGINX","permalink":"https://blog.gowhich.com/tags/NGINX/"}]},{"title":"iOS代码段分享","date":"2025-06-09T03:49:52.000Z","path":"2025/06/09/iOS代码段分享.html","text":"收集的一些实用的ios代码段 去除顶部状态栏后的分辨率1CGRect frame = [[UIScreen mainScreen] applicationFrame]; 获取当前SIM卡的手机号码（私有API）首先引入官方的CoreTelephony库，然后使用如下函数返回用户手机号码即可： 12extern NSString *CTSettingCopyMyPhoneNumber();NSString *telNum = CTSettingCopyMyPhoneNumber(); 获取当前运营商名称及相关描述信息首先引入官方的CoreTelephony库，然后添加相应的头文件： 12#import &lt;CoreTelephony/CTCarrier.h&gt;#import &lt;CoreTelephony/CTTelephonyNetworkInfo.h&gt; 接着使用CTTelephonyNetworkInfo与CTCarrier这两个类获取运营商相关信息，并将其保存到一个CTCarrier对象中： 1234CTTelephonyNetworkInfo *info = [[CTTelephonyNetworkInfo alloc] init];CTCarrier *carrier = info.subscriberCellularProvider;NSLog(@”description:%@”,[carrier description]);NSLog(@”carrier:%@”, carrier.carrierName); 输出为： 123456789CTCarrier (0x1a0200) &#123;Carrier name: [中国联通]Mobile Country Code: [460]Mobile Network Code:[01]ISO Country Code:[cn]Allows VOIP? [YES]&#125;carrier:中国联通","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS的controller的跳转 pushViewController/presentModalViewController/addSubView","date":"2025-06-09T03:27:58.000Z","path":"2025/06/09/iOS的controller的跳转-pushViewController-presentModalViewController-addSubView.html","text":"用UINavigationController的时候用pushViewController:animated（在调用的函数里面添加如下类似代码） 12teleplayViewController *teleplay = [[teleplayViewController alloc] init];[self.navigationController pushViewController:teleplay animated:YES]; 其他时候用presentModalViewController:animated（在调用的函数里面添加如下类似代码） 1[self presentModalViewController:controller animated:YES]; 同时不要忘记在另一个视图中调用函数dismissViewControllerAnimated（代码类似如下） 1[self dismissViewControllerAnimated:YES completion:NULL]; 切换视图一般用不到addSubview UINavigationController是导航控制器，如果pushViewController的话，会跳转到下一个ViewController，点返回会回到现在这个ViewController； 如果是addSubview的话，其实还是对当前的ViewController操作，只是在当前视图上面又“盖”住了一层视图，其实原来的画面在下面呢，看不到而已。（当然，也可以用insertSubView atIndex那个方法设置放置的层次)","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS搜索栏UISearchBarDelegate委托常用方法","date":"2025-06-06T10:07:30.000Z","path":"2025/06/06/iOS搜索栏UISearchBarDelegate委托常用方法.html","text":"请看下面的实例代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566//点击键盘上的search按钮时调用- (void) searchBarSearchButtonClicked:(UISearchBar *)searchBar&#123; NSString *searchTerm = searchBar.text; [self handleSearchForTerm:searchTerm];&#125;//输入文本实时更新时调用- (void) searchBar:(UISearchBar *)searchBar textDidChange:(NSString *)searchText&#123; if (searchText.length == 0) &#123; [self resetSearch]; [table reloadData]; return; &#125; [self handleSearchForTerm:searchText];&#125;//cancel按钮点击时调用- (void) searchBarCancelButtonClicked:(UISearchBar *)searchBar&#123; isSearching = NO; search.text = @&quot;&quot;; [self resetSearch]; [table reloadData]; [searchBar resignFirstResponder];&#125;//点击搜索框时调用- (void) searchBarTextDidBeginEditing:(UISearchBar *)searchBar&#123; isSearching = YES; [table reloadData];&#125; UISearchBar上按钮的默认文字为Cancel，如果想改为其他文字请调用以下代码 1234567for(id cc in [searchtext subviews])&#123; if([cc isKindOfClass:[UIButton class]])&#123; UIButton *btn = (UIButton *)cc; [btn setTitle:@&quot;取消&quot; forState:UIControlStateNormal]; &#125; &#125;","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS uitableview uitableviewcell简单举例","date":"2025-06-06T10:04:09.000Z","path":"2025/06/06/iOS-uitableview-uitableviewcell简单举例.html","text":"我学过网页制作，多多少少的能理解一下table这个元素，关于ios的uitableview应该也有这些类似的东西，觉得在uitableview中，都能够找与table对应的部分，看下面代码： MasterViewController.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142//// MasterViewController.m// vlinkagePerson//// Created by david on 13-4-14.// Copyright (c) 2013年 david. All rights reserved.//#import &quot;MasterViewController.h&quot;@interface MasterViewController ()@end@implementation MasterViewController@synthesize navbar,navItem,searchButton,attentionButton,personTable,keys,objects,content;- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil&#123; self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]; if (self) &#123; // Custom initialization &#125; return self;&#125;- (void)viewDidLoad&#123; [super viewDidLoad]; // Do any additional setup after loading the view from its nib. self.keys = [NSArray arrayWithObjects:@&quot;mainTitleKey&quot;,@&quot;secondaryTitleKey&quot;,@&quot;imageKey&quot;,nil]; self.objects = [NSArray arrayWithObjects:@&quot;How&quot;,@&quot;Are&quot;,@&quot;You&quot;,nil]; //表格添加内容 self.content = [[NSDictionary alloc] initWithObjects:objects forKeys:keys]; //创建一个导航栏 self.navbar = [[UINavigationBar alloc] initWithFrame:CGRectMake(0, 0, 320, 44)]; //创建一个导航栏集合 self.navItem = [[UINavigationItem alloc] initWithTitle:@&quot;艺人列表&quot;]; //在这个集合Item中添加标题，按钮 //style:设置按钮的风格，一共有三种选择 //action：@selector:设置按钮的点击事件 //创建一个左边按钮 self.searchButton = [[UIBarButtonItem alloc] initWithTitle:@&quot;搜索&quot; style:UIBarButtonItemStylePlain target:self action:@selector(searchEvent)]; //创建一个右边按钮 self.attentionButton = [[UIBarButtonItem alloc] initWithTitle:@&quot;我的关注&quot; style:UIBarButtonItemStylePlain target:self action:@selector(attentionList)]; //把导航栏集合添加到导航栏中，设置动画关闭 [self.navbar pushNavigationItem:self.navItem animated:YES]; //把左右两个按钮添加到导航栏集合中去 [self.navItem setLeftBarButtonItem:self.searchButton]; [self.navItem setRightBarButtonItem:self.attentionButton]; //添加UITableView self.personTable = [[UITableView alloc] initWithFrame:CGRectMake(0, 44, 320, 460) style:UITableViewStyleGrouped]; [self.personTable setDataSource:self]; [self.personTable setDelegate:self]; //将标题栏中的内容全部添加到主视图当中 [self.view addSubview:self.navbar]; //将表格添加到主视图中 [self.view addSubview:self.personTable]; &#125;-(void) searchEvent&#123; &#125;-(void) attentionList&#123; &#125;//Section总数- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)tableView&#123; return self.objects;&#125;//每个section显示的标题//设置caption- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section&#123; return @&quot;大家好&quot;;&#125;//指定有多少个分区(Section)，默认为1//需要多少个table-(NSInteger) numberOfSectionsInTableView:(UITableView *)tableView&#123; return 4;&#125;//指定每个分区中有多少行，默认为1//table的行数-(NSInteger) tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; return 2;&#125;//绘制Cell//为每个表格赋值-(UITableViewCell *) tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@&quot;MyIdentifier&quot;]; if (cell == nil) &#123; cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:@&quot;MyIdentifier&quot;]; cell.selectionStyle = UITableViewCellSelectionStyleNone; &#125; cell.textLabel.text = [self.content objectForKey:@&quot;mainTitleKey&quot;]; cell.detailTextLabel.text = [self.content objectForKey:@&quot;secondaryTitleKey&quot;]; NSString *path = [[NSBundle mainBundle] pathForResource:[self.content objectForKey:@&quot;imageKey&quot;] ofType:@&quot;png&quot;]; UIImage *theImage = [UIImage imageWithContentsOfFile:path]; cell.imageView.image = theImage; return cell;&#125;- (void)didReceiveMemoryWarning&#123; [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated.&#125;@end","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS NSDictionary操作简介","date":"2025-06-06T10:01:44.000Z","path":"2025/06/06/iOS-NSDictionary操作简介.html","text":"iOS NSDictionary 操作代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940- (void)loopThrough &#123; NSArray * keys=[NSArray arrayWithObjects:@&quot;key1“，@&quot;key2&quot;,@&quot;key3&quot;,nill]; NSArray *objects=[NSArray arrayWithOjbects:@&quot;how&quot;,@&quot;are&quot;,@&quot;you&quot;,nill]; NSDictionary *dic=[NSDictionary dictionaryWithObjects:objects,forKeys:keys]; //loop 1 for(id key in dic) &#123; NSLog(@&quot;key:%@,value:%@&quot;，key,[dic objectForKey:key]); &#125; //loop 2 NSEnumerator *enumerator; id key; enumerator=[dic keyEnumerator]; while((key=[enumerator nextObject])) &#123; NSLog(@&quot;key:%@,value:%@&quot;,key,objectForKey:key]); &#125; &#125;-(void)testNsMutableDictionary &#123; NSMutableDictionary *dic=[NSMutableDictionary dictionaryWithCapacity:30]; //dictionaryWithObjectsAndKeys:[NSMuble numberWithInt:1] @&quot;math1&quot;,[NSMuble numberWithInt:2] @&quot;math2&quot;]; [dic setObject:@&quot;one&quot; forKey:@&quot;dog&quot;]; [dic setObject:@&quot;two&quot; forKey:@&quot;cat&quot;]; [dic setValue:[NSString stringWithFormat:@&quot;three&quot;] forKey:@&quot;pig&quot;]; [dic removeObjectForkey:@&quot;cat&quot;]; [dic removeAllObjects]; NSMutableArray arraylist=[[NSMutableArray alloc] init]; [arrarlist addObject:dic]; [dic release]; &#125;","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"用Javascript获取页面元素的位置","date":"2025-06-06T06:28:24.000Z","path":"2025/06/06/用Javascript获取页面元素的位置.html","text":"一、网页的大小和浏览器窗口的大小首先，要明确两个基本概念。 一张网页的全部面积，就是它的大小。通常情况下，网页的大小由内容和CSS样式表决定。 浏览器窗口的大小，则是指在浏览器窗口中看到的那部分网页面积，又叫做viewport（视口）。 很显然，如果网页的内容能够在浏览器窗口中全部显示（也就是不出现滚动条），那么网页的大小和浏览器窗口的大小是相等的。如果不能全部显示，则滚动浏览器窗口，可以显示出网页的各个部分。 二、获取网页的大小网页上的每个元素，都有clientHeight和clientWidth属性。这两个属性指元素的内容部分再加上padding的所占据的视觉面积，不包括border和滚动条占用的空间。 因此，document元素的clientHeight和clientWidth属性，就代表了网页的大小。 12345678910111213function getViewport() &#123; if (document.compatMode == &quot;BackCompat&quot;) &#123; return &#123; width: document.body.clientWidth, height: document.body.clientHeight &#125; &#125; else &#123; return &#123; width: document.documentElement.clientWidth, height: document.documentElement.clientHeight &#125; &#125;&#125; 上面的getViewport函数就可以返回浏览器窗口的高和宽。使用的时候，有三个地方需要注意： 1）这个函数必须在页面加载完成后才能运行，否则document对象还没生成，浏览器会报错。 2）大多数情况下，都是document.documentElement.clientWidth返回正确值。但是，在IE6的quirks模式中，document.body.clientWidth返回正确的值，因此函数中加入了对文档模式的判断。 3）clientWidth和clientHeight都是只读属性，不能对它们赋值。 三、获取网页大小的另一种方法网页上的每个元素还有scrollHeight和scrollWidth属性，指包含滚动条在内的该元素的视觉面积。 那么，document对象的scrollHeight和scrollWidth属性就是网页的大小，意思就是滚动条滚过的所有长度和宽度。 仿照getViewport()函数，可以写出getPagearea()函数。 12345678910111213function getPagearea() &#123; if (document.compatMode == &quot;BackCompat&quot;) &#123; return &#123; width: document.body.scrollWidth, height: document.body.scrollHeight &#125; &#125; else &#123; return &#123; width: document.documentElement.scrollWidth, height: document.documentElement.scrollHeight &#125; &#125;&#125; 但是，这个函数有一个问题。如果网页内容能够在浏览器窗口中全部显示，不出现滚动条，那么网页的clientWidth和scrollWidth应该相 等。但是实际上，不同浏览器有不同的处理，这两个值未必相等。所以，我们需要取它们之中较大的那个值，因此要对getPagearea()函数进行改写。 1234567891011121314151617function getPagearea() &#123; if (document.compatMode == &quot;BackCompat&quot;) &#123; return &#123; width: Math.max(document.body.scrollWidth, document.body.clientWidth), height: Math.max(document.body.scrollHeight, document.body.clientHeight) &#125; &#125; else &#123; return &#123; width: Math.max(document.documentElement.scrollWidth, document.documentElement.clientWidth), height: Math.max(document.documentElement.scrollHeight, document.documentElement.clientHeight) &#125; &#125;&#125; 四、获取网页元素的绝对位置网页元素的绝对位置，指该元素的左上角相对于整张网页左上角的坐标。这个绝对位置要通过计算才能得到。 首先，每个元素都有offsetTop和offsetLeft属性，表示该元素的左上角与父容器（offsetParent对象）左上角的距离。所以，只需要将这两个值进行累加，就可以得到该元素的绝对坐标。 下面两个函数可以用来获取绝对位置的横坐标和纵坐标。 1234567891011121314151617181920212223function getElementLeft(element) &#123; var actualLeft = element.offsetLeft; var current = element.offsetParent; while (current !== null) &#123; actualLeft += current.offsetLeft; current = current.offsetParent; &#125; return actualLeft;&#125;function getElementTop(element) &#123; var actualTop = element.offsetTop; var current = element.offsetParent; while (current !== null) &#123; actualTop += current.offsetTop; current = current.offsetParent; &#125; return actualTop;&#125; 由于在表格和iframe中，offsetParent对象未必等于父容器，所以上面的函数对于表格和iframe中的元素不适用。 五、获取网页元素的相对位置网页元素的相对位置，指该元素左上角相对于浏览器窗口左上角的坐标。 有了绝对位置以后，获得相对位置就很容易了，只要将绝对坐标减去页面的滚动条滚动的距离就可以了。滚动条滚动的垂直距离，是document对象的scrollTop属性；滚动条滚动的水平距离是document对象的scrollLeft属性。 对上一节中的两个函数进行相应的改写： 1234567891011121314151617181920212223242526272829303132333435function getElementViewLeft(element) &#123; var actualLeft = element.offsetLeft; var current = element.offsetParent; while (current !== null) &#123; actualLeft += current.offsetLeft; current = current.offsetParent; &#125; if (document.compatMode == &quot;BackCompat&quot;) &#123; var elementScrollLeft = document.body.scrollLeft; &#125; else &#123; var elementScrollLeft = document.documentElement.scrollLeft; &#125; return actualLeft - elementScrollLeft;&#125;function getElementViewTop(element) &#123; var actualTop = element.offsetTop; var current = element.offsetParent; while (current !== null) &#123; actualTop += current.offsetTop; current = current.offsetParent; &#125; if (document.compatMode == &quot;BackCompat&quot;) &#123; var elementScrollTop = document.body.scrollTop; &#125; else &#123; var elementScrollTop = document.documentElement.scrollTop; &#125; return actualTop - elementScrollTop;&#125; scrollTop和scrollLeft属性是可以赋值的，并且会立即自动滚动网页到相应位置，因此可以利用它们改变网页元素的相对位置。另外，element.scrollIntoView()方法也有类似作用，可以使网页元素出现在浏览器窗口的左上角。 六、获取元素位置的快速方法除了上面的函数以外，还有一种快速方法，可以立刻获得网页元素的位置。 那就是使用getBoundingClientRect()方法。它返回一个对象，其中包含了left、right、top、bottom四个属性，分别对应了该元素的左上角和右下角相对于浏览器窗口（viewport）左上角的距离。 所以，网页元素的相对位置就是 12var X= this.getBoundingClientRect().left;var Y =this.getBoundingClientRect().top; 再加上滚动距离，就可以得到绝对位置 12var X= this.getBoundingClientRect().left+document.documentElement.scrollLeft;var Y =this.getBoundingClientRect().top+document.documentElement.scrollTop; 目前，IE、Firefox 3.0+、Opera 9.5+都支持该方法，而Firefox 2.x、Safari、Chrome、Konqueror不支持。 原文网址：http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html","tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://blog.gowhich.com/tags/Javascript/"}]},{"title":"Ubuntu Server的bashrc配置","date":"2025-06-06T06:25:16.000Z","path":"2025/06/06/Ubuntu-Server的bashrc配置.html","text":"我的配置，感觉很友好，很有好感，喜欢的拿去用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101# ~/.bashrc: executed by bash(1) for non-login shells.# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)# for examples# If not running interactively, don&#x27;t do anything[ -z &quot;$PS1&quot; ] &amp;&amp; return# don&#x27;t put duplicate lines in the history. See bash(1) for more options# ... or force ignoredups and ignorespaceHISTCONTROL=ignoredups:ignorespace# append to the history file, don&#x27;t overwrite itshopt -s histappend# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)HISTSIZE=1000HISTFILESIZE=2000# check the window size after each command and, if necessary,# update the values of LINES and COLUMNS.shopt -s checkwinsize# make less more friendly for non-text input files, see lesspipe(1)[ -x /usr/bin/lesspipe ] &amp;&amp; eval &quot;$(SHELL=/bin/sh lesspipe)&quot;# set variable identifying the chroot you work in (used in the prompt below)if [ -z &quot;$debian_chroot&quot; ] &amp;&amp; [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot)fi# set a fancy prompt (non-color, unless we know we &quot;want&quot; color)case &quot;$TERM&quot; in xterm-color) color_prompt=yes;;esac# uncomment for a colored prompt, if the terminal has the capability; turned# off by default to not distract the user: the focus in a terminal window# should be on the output of commands, not on the prompt#force_color_prompt=yesif [ -n &quot;$force_color_prompt&quot; ]; then if [ -x /usr/bin/tput ] &amp;&amp; tput setaf 1 &gt;&amp;/dev/null; then # We have color support; assume it&#x27;s compliant with Ecma-48 # (ISO/IEC-6429). (Lack of such support is extremely rare, and such # a case would tend to support setf rather than setaf.) color_prompt=yes else color_prompt= fifilocalhost_ip=&#x27;xxx.xxx.xxx.xxx&#x27;if [ &quot;$color_prompt&quot; = yes ]; then PS1=&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\\[\\033[01;32m\\]\\u@$localhost_ip\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ &#x27; #PS1=&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\\[\\033[01;32m\\]\\u@$localhost_ip\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ &#x27;else PS1=&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\\u@$localhost_ip:\\w\\$ &#x27; #PS1=&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\\u@$localhost_ip\\h:\\w\\$ &#x27;fiunset color_prompt force_color_prompt# If this is an xterm set the title to user@host:dircase &quot;$TERM&quot; inxterm*|rxvt*) PS1=&quot;\\[\\e]0;$&#123;debian_chroot:+($debian_chroot)&#125;\\u@\\h: \\w\\a\\]$PS1&quot; ;;*) ;;esac# enable color support of ls and also add handy aliasesif [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors &amp;&amp; eval &quot;$(dircolors -b ~/.dircolors)&quot; || eval &quot;$(dircolors -b)&quot; alias ls=&#x27;ls --color=auto&#x27; #alias dir=&#x27;dir --color=auto&#x27; #alias vdir=&#x27;vdir --color=auto&#x27; alias grep=&#x27;grep --color=auto&#x27; alias fgrep=&#x27;fgrep --color=auto&#x27; alias egrep=&#x27;egrep --color=auto&#x27;fi# some more ls aliasesalias ll=&#x27;ls -alF&#x27;alias la=&#x27;ls -A&#x27;alias l=&#x27;ls -CF&#x27;# Alias definitions.# You may want to put all your additions into a separate file like# ~/.bash_aliases, instead of adding them here directly.# See /usr/share/doc/bash-doc/examples in the bash-doc package.if [ -f ~/.bash_aliases ]; then . ~/.bash_aliasesfi# enable programmable completion features (you don&#x27;t need to enable# this, if it&#x27;s already enabled in /etc/bash.bashrc and /etc/profile# sources /etc/bash.bashrc).#if [ -f /etc/bash_completion ] &amp;&amp; ! shopt -oq posix; then# . /etc/bash_completion#fi","tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://blog.gowhich.com/tags/Ubuntu/"}]},{"title":"iOS创建navigationbar","date":"2025-06-06T03:44:14.000Z","path":"2025/06/06/iOS创建navigationbar.html","text":"使用代码创建自己的navigationbar： 环境: 123xcode:Version 4.6.1 (4H512)simulater:iPhone6.1 直接上代码： MasterViewController.h12345678910111213141516171819202122232425262728//// MasterViewController.h// vlinkagePerson//// Created by david on 13-4-14.// Copyright (c) 2013年 david. All rights reserved.//#import &lt;UIKit/UIKit.h&gt;@interface MasterViewController : UIViewController//导航栏@property (strong, nonatomic) UINavigationBar *navbar;//导航栏集合@property (strong, nonatomic) UINavigationItem *navItem;//左边按钮@property (strong, nonatomic) UIBarButtonItem *searchButton;//右边按钮@property (strong, nonatomic) UIBarButtonItem *attentionButton;//自定义方法//搜索操作-(void) searchEvent;-(void) attentionList;@end MasterViewController.m1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677//// MasterViewController.m// vlinkagePerson//// Created by david on 13-4-14.// Copyright (c) 2013年 david. All rights reserved.//#import &quot;MasterViewController.h&quot;@interface MasterViewController ()@end@implementation MasterViewController@synthesize navbar,navItem,searchButton,attentionButton;- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil&#123; self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]; if (self) &#123; // Custom initialization &#125; return self;&#125;- (void)viewDidLoad&#123; [super viewDidLoad]; // Do any additional setup after loading the view from its nib. //创建一个导航栏 self.navbar = [[UINavigationBar alloc] initWithFrame:CGRectMake(0, 0, 320, 44)]; //创建一个导航栏集合 self.navItem = [[UINavigationItem alloc] initWithTitle:@&quot;艺人列表&quot;]; //在这个集合Item中添加标题，按钮 //style:设置按钮的风格，一共有三种选择 //action：@selector:设置按钮的点击事件 //创建一个左边按钮 self.searchButton = [[UIBarButtonItem alloc] initWithTitle:@&quot;搜索&quot; style:UIBarButtonItemStylePlain target:self action:@selector(searchEvent)]; //创建一个右边按钮 self.attentionButton = [[UIBarButtonItem alloc] initWithTitle:@&quot;我的关注&quot; style:UIBarButtonItemStylePlain target:self action:@selector(attentionList)]; //把导航栏集合添加到导航栏中，设置动画关闭 [self.navbar pushNavigationItem:self.navItem animated:YES]; //把左右两个按钮添加到导航栏集合中去 [self.navItem setLeftBarButtonItem:self.searchButton]; [self.navItem setRightBarButtonItem:self.attentionButton]; //将标题栏中的内容全部添加到主视图当中 [self.view addSubview:self.navbar]; &#125;-(void) searchEvent&#123; &#125;-(void) attentionList&#123; &#125;- (void)didReceiveMemoryWarning&#123; [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated.&#125;@end","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS CGFloat CGPoint CGSize和CGRect","date":"2025-06-06T02:35:44.000Z","path":"2025/06/06/iOS-CGFloat-CGPoint-CGSize和CGRect.html","text":"CGGeometry类定义几何元素的结构和操作几何元素的函数。 1、数据类型：CGFloat: 浮点值的基本类型 CGPoint: 表示一个二维坐标系中的点 CGSize: 表示一个矩形的宽度和高度 CGRect: 表示一个矩形的位置和大小 1234567891011121314151617typedef float CGFloat;// 32-bittypedef double CGFloat;// 64-bitstruct CGPoint &#123; CGFloat x; CGFloat y;&#125;;typedef struct CGPoint CGPoint;struct CGSize &#123; CGFloat width; CGFloat height;&#125;;typedef struct CGSize CGSize;struct CGRect &#123; CGPoint origin; CGSize size;&#125;;typedef struct CGRect CGRect; 注意：CGRect数据结构的高度和宽度可以是负数。例如，一个矩形的原点是[0.0，0.0]和大小是[10.0,10.0]。这个矩形完全等同原点是[10.0，10.0]和大小是[-10.0，-10.0]的矩形。 2、使用值来创建几何元素的方法CGPointMake、CGRectMake、CGSizeMake12345678910111213141516171819202122232425CGPoint CGPointMake ( CGFloat x, CGFloat y );CGSize CGSizeMake ( CGFloat width, CGFloat height );CGRect CGRectMake ( CGFloat x, CGFloat y, CGFloat width, CGFloat height );CGFloat ten=10.0f;CGPoint point = CGPointMake(0.0f, 0.0f);CGSize size = CGSizeMake(10.0f, 10.0f);CGRect rect = CGRectMake(point.x, point.y, size.width, size.height);NSLog(@&quot;ten: %f&quot;, ten);NSLog(@&quot;point: %@&quot;, NSStringFromCGPoint(point));NSLog(@&quot;size: %@&quot;, NSStringFromCGSize(size));NSLog(@&quot;rect: %@&quot;, NSStringFromCGRect(rect));","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"iOS UIScreen（屏幕）UIWindow（画框)UIView(画布)didFinishLaunchingWithOptions的概念","date":"2025-06-06T02:33:47.000Z","path":"2025/06/06/iOS-UIScreen（屏幕）UIWindow（画框-UIView-画布-didFinishLaunchingWithOptions的概念.html","text":"didFinishLaunchingWithOptions 方法：顾名思义。在app开始运行时会调用里面的方法。 12345678910111213141516171819202122232425262728- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&#123; //返回的是带有状态栏的矩形 self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] autorelease]; CGRect bound = [[UIScreen mainScreen]bounds]; //返回的是不带有状态栏的Rect NSLog(@&quot;boundwith:%f boundheight:%f&quot;,bound.size.width,bound.size.height); NSLog(@&quot;boundx:%f boundy:%f&quot;,bound.origin.x,bound.origin.y); //2012-08-03 23:21:45.716 DinkMixer[599:c07] boundwith:320.000000 boundheight:480.000000 //2012-08-03 23:21:45.719 DinkMixer[599:c07] boundx:0.000000 boundy:0.000000 CGRect appBound = [[UIScreen mainScreen]applicationFrame]; //返回的是带有状态栏的Rect NSLog(@&quot;appBoundwith:%f boundheight:%f&quot;,appBound.size.width,appBound.size.height); NSLog(@&quot;appBoundx:%f boundy:%f&quot;,appBound.origin.x,appBound.origin.y); //2012-08-03 23:21:45.720 DinkMixer[599:c07] appBoundwith:320.000000 boundheight:460.000000 //2012-08-03 23:21:45.720 DinkMixer[599:c07] appBoundx:0.000000 boundy:20.000000 //很明显状态栏占用了空间20像素 MasterViewController *masterViewController = [[[MasterViewController alloc] initWithNibName:@&quot;MasterViewController&quot; bundle:nil] autorelease];//根据nib文件的名称来创建一个视图控制器 self.navigationController = [[[UINavigationController alloc] initWithRootViewController:masterViewController] autorelease];//创建一个导航控制器，并指定该导航控制器的根视图控制器为上面建立的masterViewController self.window.rootViewController = self.navigationController;//窗体（window）有一个根视图控制器——这个视图控制器负责配置当窗体显示时最先显示的视图。要让你的视图控制器的内容显示在窗体中，需要去设置窗体的根视图控制器为你的视图控制器。 [self.window makeKeyAndVisible];//这行代码会让包含了视图控制器视图的Window窗口显示在屏幕上。 return YES;&#125;","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"Linux查看文件系统类型","date":"2025-06-06T02:27:33.000Z","path":"2025/06/06/Linux查看文件系统类型.html","text":"1. mount123456789101112131415161718:~$ mount/dev/sda1 on / type ext4 (rw,errors=remount-ro,user_xattr)proc on /proc type proc (rw,noexec,nosuid,nodev)none on /sys type sysfs (rw,noexec,nosuid,nodev)none on /sys/fs/fuse/connections type fusectl (rw)none on /sys/kernel/debug type debugfs (rw)none on /sys/kernel/security type securityfs (rw)none on /dev type devtmpfs (rw,mode=0755)none on /dev/pts type devpts (rw,noexec,nosuid,gid=5,mode=0620)none on /dev/shm type tmpfs (rw,nosuid,nodev)none on /var/run type tmpfs (rw,nosuid,mode=0755)none on /var/lock type tmpfs (rw,noexec,nosuid,nodev)none on /lib/init/rw type tmpfs (rw,nosuid,mode=0755)none on /var/lib/ureadahead/debugfs type debugfs (rw,relatime)none on /proc/fs/vmblock/mountPoint type vmblock (rw)binfmt_misc on /proc/sys/fs/binfmt_misc type binfmt_misc (rw,noexec,nosuid,nodev)gvfs-fuse-daemon on /home/kysnail/.gvfs type fuse.gvfs-fuse-daemon (rw,nosuid,nodev,user=kysnail):~$ 2. df12345678910:~$ df -lhT文件系统 类型 容量 已用 可用 已用% 挂载点/dev/sda1 ext4 19G 11G 7.8G 57% /none devtmpfs 498M 248K 497M 1% /devnone tmpfs 502M 252K 501M 1% /dev/shmnone tmpfs 502M 96K 502M 1% /var/runnone tmpfs 502M 0 502M 0% /var/locknone tmpfs 502M 0 502M 0% /lib/init/rwnone debugfs 19G 11G 7.8G 57% /var/lib/ureadahead/debugfs:~$ 3. fdisk123456789101112131415161718192021222324252627:~$ sudo fdisk /dev/sdaWARNING: DOS-compatible mode is deprecated. It&#x27;s strongly recommended to switch off the mode (command &#x27;c&#x27;) and change display units to sectors (command &#x27;u&#x27;).Command (m for help): cDOS Compatibility flag is not setCommand (m for help): uChanging display/entry units to sectorsCommand (m for help): pDisk /dev/sda: 21.5 GB, 21474836480 bytes heads, 63 sectors/track, 2610 cylinders, total 41943040 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00077544Device Boot Start End Blocks Id System/dev/sda1 * 2048 40105983 20051968 83 Linux/dev/sda2 40108030 41940991 916481 5 Extended/dev/sda5 40108032 41940991 916480 82 Linux swap / SolarisCommand (m for help): q 4. file12345:~$ sudo file -s /dev/sda/dev/sda: x86 boot sector; partition 1: ID=0x83, active, starthead 32, startsector 2048, 40103936 sectors; partition 2: ID=0x5, starthead 254, startsector 40108030, 1832962 sectors, code offset 0x63kysnail@ubunkysnail:~$ sudo file -s /dev/sda1/dev/sda1: Linux rev 1.0 ext4 filesystem data, UUID=4942da40-8a49-4bfd-9dc2-45c906d48413 (needs journal recovery) (extents) (large files) (huge files):~$ 5. parted12345678910111213141516:~$ sudo partedGNU Parted 2.2使用 /dev/sda欢迎使用 GNU Parted! 输入 &#x27;help&#x27;可获得命令列表.(parted) p Model: VMware, VMware Virtual S (scsi)磁盘 /dev/sda: 21.5GBSector size (logical/physical): 512B/512B分区表：msdos数字 开始： End 大小 类型 文件系统 标志 1049kB 20.5GB 20.5GB primary ext4 启动 20.5GB 21.5GB 938MB extended 20.5GB 21.5GB 938MB logical linux-swap(v1)(parted) 6. 查看 fstab12345678910111213# /etc/fstab: static file system information.## Use &#x27;blkid -o value -s UUID&#x27; to print the universally unique identifier# for a device; this may be used with UUID= as a more robust way to name# devices that works even if disks are added and removed. See fstab(5).## &lt;file system&gt; &lt;mount point&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;proc /proc proc nodev,noexec,nosuid 0 0# / was on /dev/sda1 during installationUUID=4942da40-8a49-4bfd-9dc2-45c906d48413 / ext4 errors=remount-ro,user_xattr 0 1# swap was on /dev/sda5 during installationUUID=935fb95d-771f-448e-9d23-4820106e1783 none swap sw 0 0/dev/fd0 /media/floppy0 auto rw,user,noauto,exec,utf8 0 0","tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.gowhich.com/tags/Linux/"}]},{"title":"Can't connect to MySQL server on 'xxx.xxx.xxx.xxx' (61)","date":"2025-06-05T09:37:45.000Z","path":"2025/06/05/Can-t-connect-to-MySQL-server-on-xxx-xxx-xxx-xxx-61.html","text":"我要在本机链接我本机上虚拟机的mysql，我使用mac下的workbench，就就是连接不上，报错信息为：“Can’t connect to MySQL server on ‘10.211.55.5’ (61)”，查了好多资料，有一种方法解决了我的问题： 第一步：查看是都3306端口开启使用ufw（不会安装的，请与我联系）， 1sudo ufw status 或者直接使用命令 1netstat -an | grep 3306 如果结果显示类似： 1tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN 从结果可以看出3306端口只是在IP 127.0.0.1上监听，所以拒绝了其他IP的访问。 第二步：修改配置文件修改文件 &#x2F;etc&#x2F;mysql&#x2F;my.cnf文件，打开文件，找到下面内容： 123# Instead of skip-networking the default is now to listen only on# localhost which is more compatible and is not less secure.bind-address = 127.0.0.1 把上面这一行注释掉或者把127.0.0.1换成合适的IP，建议注释掉。重新启动后，重新使用netstat检测： 12~# netstat -an | grep 3306tcp 0 0 0.0.0.0:3306 0.0.0.0:* LISTEN 第三步： 使用创建的用户登录一下，成功。","tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://blog.gowhich.com/tags/MySQL/"}]},{"title":"Centos下SVN的配置","date":"2025-06-05T09:31:37.000Z","path":"2025/06/05/centos下svn的配置.html","text":"在终端运行svn命令.如果没有安装,系统会提示安装 1.首先需要安装Subversion软件： 1sudo apt-get install subversion 2.建立一个文件夹作为版本库的根目录 1mkdir /var/svnroot/ 这个目录本身不是版本库，只是拿来装版本库的目录 3.进入这个目录，创建版本库 12cd /var/svnroot/svnadmin create mysvn 以后如果有多个项目，可以继续在&#x2F;var&#x2F;svnroot&#x2F;下面create新的版本库 4.配置vlink 12cd /var/svnroot/vlink/conf/ls 将会看到以下文件 1authz passwd svnserve.conf 首先编辑 svnserve.conf 1vim svnserve.conf 其中 anon-access 表示 匿名用户的权限，auth-access 表示经过认证的用户的权限。去掉前面的#注释，顶格写。一般说来像这样就可以了： 12anon-access = noneauth-access = write 然后看到下面有 password-db 这个配置项。 这个是配置使用的密码文件。 1password-db = passwd 为了以后多个版本库同时运行，建议改这个文件到 &#x2F;var&#x2F;svnroot&#x2F;下面。比如： &#x2F;var&#x2F;svnroot&#x2F;passed 1password-db =/var/svnroot/passed 同理，authz-db这个也是，像这样： 1/var/svnroot/authz 然后有个东西叫做realm，这个貌似是连接svn服务器的时候的提示句子。。不过设置成vlink的名字肯定没错。比如 vlink 1realm = vlink 其他的不管。保存退出。 5.编辑 &#x2F;var&#x2F;svnroot&#x2F;passwd这个简单，像这样就可以了： 123[users]username=passwordusername=password 6.启动svnserve 1sudo svnserve -d -r /var/svnroot/ -r 后面的参数是svnroot位置，而不是某个版本库的位置要关闭svnserve可以直接用 kill 结束掉那个进程 7.Configure iptables如果服务器上设置了iptables的话,你需要开启3690端口. 12iptables -A INPUT -p tcp -i eth0 --dport 3690 -j ACCEPT/sbin/iptables -A INPUT -p tcp -i eth0 --dport 3690 -j ACCEPT 查看ipatbles: iptables -L 如果出现下面一行表示设置成功了: 1… ACCEPT tcp – anywhere anywhere tcp dpt:svn 8.测试 在本地 svn co svn://xxx.xxx.xxx.xxx/vlink –username xxx –password xxx如果还有问题的我建议是将svnserve.conf文件中的有关authz注释掉，在测试。我做的时候是有上面的问题，后来师兄注释掉后就好了，具体我也不明白什么原因如何将想要的svn库中文件备份导出和导入呢（这里我没有测试过，大家可以测试一下，我们共同探讨） 9.将原来的Repository导出为一个文件dumpfile 1svnadmin dump path/to/old-repo &gt; dumpfile.svn 10.将dumpfile导入到新的Repository 1svnadmin load path/to/new-repo &lt; dumpfile.svn 11.本机svn的快速迁移方法: 1svnadmin hotcopy old_rep_path new_rep_path 12.将原先服务器的配置文件备份后复制到新服务器中/etc/httpd/conf.d/subversion.conf还有repository目录下的authfile、auth.conf也需要备份后复制到新服务器中 13.linux下重新定位SVN URL方法:如果更换了SVN服务器，就需要重新定位，指向新的SVN URL。重新定位命令：svn switch --relocate 原svn地址 新svn地址如何查看原svn地址？查看原svn路径方法：svn info","tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.gowhich.com/tags/Linux/"},{"name":"Centos","slug":"Centos","permalink":"https://blog.gowhich.com/tags/Centos/"}]},{"title":"iOS存储方式","date":"2025-06-05T03:06:45.000Z","path":"2025/06/05/iOS存储方式.html","text":"第一种:NSKeyedArchiver（加密形式）代码很简单就不多解释了直接上代码： 123456789101112131415161718//=================NSKeyedArchiver========================NSString *saveStr1 = @ &quot;我是&quot; ;NSString *saveStr2 = @ &quot;数据&quot; ;NSArray *array = [NSArray arrayWithObjects:saveStr1, saveStr2, nil];//----Save//这一句是将路径和文件名合成文件完整路径NSString *Path = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];NSString *filename = [Path stringByAppendingPathComponent:@ &quot;saveDatatest&quot; ];[NSKeyedArchiver archiveRootObject:array toFile:filename];//用于测试是否已经保存了数据saveStr1 = @ &quot;hhhhhhiiii&quot; ;saveStr2 =@ &quot;mmmmmmiiii&quot; ;//----Loadarray = [NSKeyedUnarchiver unarchiveObjectWithFile: filename];saveStr1 = [array objectAtIndex:0];saveStr2 = [array objectAtIndex:1];NSLog(@ &quot;str:%@&quot; ,saveStr1);NSLog(@ &quot;astr:%@&quot; ,saveStr2); 第二种:NSUserDefaults举个简单的例子 1234567891011121314151617//=================NSUserDefaults========================NSString *saveStr1 = @ &quot;我是&quot; ;NSString *saveStr2 = @ &quot;数据&quot; ;NSArray *array = [NSArray arrayWithObjects:saveStr1, saveStr2, nil];//SaveNSUserDefaults *saveDefaults = [NSUserDefaults standardUserDefaults];[saveDefaults setObject:array forKey:@ &quot;SaveKey&quot; ];//用于测试是否已经保存了数据saveStr1 = @ &quot;hhhhhhiiii&quot; ;saveStr2 =@ &quot;mmmmmmiiii&quot; ;//---Loadarray = [saveDefaults objectForKey:@ &quot;SaveKey&quot; ];saveStr1 = [array objectAtIndex:0];saveStr2 = [array objectAtIndex:1];NSLog(@ &quot;str:%@&quot; ,saveStr1);NSLog(@ &quot;astr:%@&quot; ,saveStr2); 第三种:Write写入方式举个例子，也很简单的 123456789101112131415161718192021222324252627//=================Write写入方式========================NSString *saveStr1 = @ &quot;我是&quot; ;NSString *saveStr2 = @ &quot;数据&quot; ;NSArray *array = [NSArray arrayWithObjects:saveStr1, saveStr2, nil];//----SaveNSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);NSString *documentsDirectory = [paths objectAtIndex:0];if (!documentsDirectory) &#123; NSLog(@ &quot;没找到&quot; );&#125;NSMutableArray *saveDataArray=nil;NSString *appFile = [documentsDirectory stringByAppendingPathComponent:@ &quot;Savedatas.plist&quot; ];[[NSArray arrayWithObjects:array,nil] writeToFile:appFile atomically:NO];//用于测试是否已经保存了数据saveStr1 = @ &quot;hhhhhhiiii&quot; ;saveStr2 =@ &quot;mmmmmmiiii&quot; ;//----Loadif ([[NSFileManager defaultManager] fileExistsAtPath:appFile])&#123; saveDataArray = [NSMutableArray arrayWithContentsOfFile:appFile];&#125;else&#123; saveDataArray = [NSMutableArray arrayWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@ &quot;Savedatas&quot; ofType:@ &quot;plist&quot; ]];&#125;NSArray *strArray = [saveDataArray objectAtIndex:0];saveStr1 = [strArray objectAtIndex:0];saveStr2 = [strArray objectAtIndex:1];NSLog(@ &quot;str:%@&quot; ,saveStr1);NSLog(@ &quot;astr:%@&quot; ,saveStr2); 第四种:SQLite3在使用sqlite3之前 你需要将libsqlite3.dylib这个类库加入到你的项目中 123456789- (NSString *)dataFilePath&#123; NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsDirectory = [paths objectAtIndex:0]; return [documentsDirectory stringByAppendingPathComponent:kFilename];&#125;NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);NSString *documentsDirectory = [paths objectAtIndex:0]; //首先得到应用程序沙盒中Document文件夹的路径return [documentsDirectory stringByAppendingPathComponent:kFilename]//返回你指定文件的路径 打开数据库 12345sqlite3 *database;if(sqlite3_open([filePath UTF8String], &amp;database)) &#123; sqlite3_close(database); NSAssert(0,@&quot;Failed to open database&quot;);&#125; 创建数据库 123456char *errorMsg;NSString *createSQL = @&quot;CREATE TABLE IF NOT EXISTS FIELDS (ROW INTEGER PRIMARY KEY,FIELD_DATA TEXT);&quot;;if (sqlite3_exec(database, [createSQL UTF8String], NULL, NULL, &amp;errorMsg)!=SQLITE_OK) &#123; sqlite3_close(database); NSAssert1(0,@&quot;Error creating table:%s&quot;,errorMsg);&#125; 数据查询 123456789101112131415161718NSString *query = @&quot;SELECT ROW, FIELD_DATA FROM FIELDS ORDER BY ROW&quot;;sqlite3_stmt *statement;if (sqlite3_prepare_v2(database, [query UTF8String], -1, &amp;statement, nil)==SQLITE_OK) &#123; while (sqlite3_step(statement)==SQLITE_ROW) &#123; int row = sqlite3_column_int(statement, 0); char *rowData = (char *)sqlite3_column_text(statement, 1); //NSString *fieldName = [[NSString alloc] initWithFormat:@&quot;field&amp;d&quot;,row]; //NSString *fieldValue = [[NSString alloc] initWithUTF8String:rowData]; //UITextField *field = [self valueForKey:fieldName]; //field.text = fieldValue; //[fieldName release]; //[fieldValue release]; &#125; sqlite3_finalize(statement);&#125;sqlite3_close(database); 数据插入／更新 12345678910111213141516171819202122232425sqlite3 *database;if (sqlite3_open([[self dataFilePath] UTF8String], &amp;database)) &#123; sqlite3_close(database); NSAssert(0,@&quot;Failed to open database&quot;);&#125; for (int i=1; i&lt;=4; i++) &#123; NSString *fieldName = [[NSString alloc] initWithFormat:@&quot;field%d&quot;,i]; UITextField *field = [self valueForKey:fieldName]; [fieldName release]; char *errorMsg; char *update = &quot;INSERT OR REPLACE INTO FIELDS (ROW,FIELD_DATA) VALUES(?,?);&quot;; //这里插入的值可以用nsstring替换，但是最好的做法是使用绑定，如果遇到特殊字符 这是不二选择 sqlite3_stmt *stmt; if (sqlite3_prepare_v2(database, update, -1, &amp;stmt, nil)==SQLITE_OK) &#123; sqlite3_bind_int(stmt, 1, i); sqlite3_bind_text(stmt, 2, [[field text] UTF8String], -1, NULL); &#125; if (sqlite3_step(stmt)!=SQLITE_DONE) &#123; NSAssert(0,@&quot;Error updating table:%s&quot;,errorMsg); &#125; sqlite3_finalize(stmt);&#125;sqlite3_close(database); #######################可爱分割线############################# 对Write写入方式保存数据和读取数据封装了两个方法： 封装的函数如下： 1234567891011121314151617181920212223242526//保存游戏数据 //参数介绍： // (NSMutableArray *)data ：保存的数据 // (NSString *)fileName ：存储的文件名 -(BOOL) saveGameData:(NSMutableArray *)data saveFileName:(NSString *)fileName &#123; NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsDirectory = [paths objectAtIndex:0]; if (!documentsDirectory) &#123; NSLog(@&quot;Documents directory not found!&quot;); return NO; &#125; NSString *appFile = [documentsDirectory stringByAppendingPathComponent:fileName]; return ([data writeToFile:appFile atomically:YES]); &#125; //读取游戏数据 //参数介绍： // (NSString *)fileName ：需要读取数据的文件名 -(id) loadGameData:(NSString *)fileName &#123; NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsDirectory = [paths objectAtIndex:0]; NSString *appFile = [documentsDirectory stringByAppendingPathComponent:fileName]; NSMutableArray *myData = [[[NSMutableArray alloc] initWithContentsOfFile:appFile] autorelease]; return myData; &#125; 可以使用类似下面的例子进行使用 123456NSString *saveStr1 = @&quot;测试保存读取&quot;; NSString *saveStr2 = @&quot;两个函数&quot;; NSMutableArray *array = [NSMutableArray arrayWithObjects:saveStr1, saveStr2, nil]; [self saveGameData:array saveFileName:@&quot;Himi&quot;]; NSMutableArray*temp =(NSMutableArray*)[self loadGameData:@&quot;Himi&quot;]; NSLog(@&quot;%@--%@&quot;,[temp objectAtIndex:0],[temp objectAtIndex:1]); 有两点需要注意的地方： 1，取出数据的时候需要注意 12NSUserDefaults *saveDefaults = [NSUserDefaults standardUserDefaults]; NSMutableArray *arraySaveData =[saveDefaults objectForKey:@&quot;OhSaveData&quot;]; //NSMutableArray *arraySaveData=[NSMutableArray arrayWithArray:[saveDefaults objectForKey:@&quot;OhSaveData&quot;]]; 第二句代码是通过一个文件名获取你存储的数据，返回数据数组，但是！一定要注意这里返回的数据数组是不可修改的！及时你将读取的数据赋给一个可修改的数组中也一样无法修改其中的数据，所以如果你想将取出的数据进行修改那么这里需要要使用第三行代码来获取 2，修改已经的存储文件 12NSUserDefaults *saveDefaults = [NSUserDefaults standardUserDefaults]; [saveDefaults setObject:arraySaveData forKey:@&quot;已经存在的文件名&quot;];","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"Yii使用model进行设置查询规则/模型/控制器","date":"2025-06-05T02:52:51.000Z","path":"2025/06/05/Yii使用model进行设置查询规则-模型-控制器.html","text":"yii有个查询数据的便利的地方，就是可以在model层设置查询规则，然后在controller层，直接调用，进行数据查询： 举个例子说明一下： 先从model层说起：model名称叫做Blog，继承自CActiveRecord 123456789101112131415function scopes()&#123; return [ &#x27;published&#x27; =&gt; [ &#x27;condition&#x27; =&gt; &#x27;status=1&#x27;, ], &#x27;recently&#x27; =&gt; [ &#x27;order&#x27; =&gt; &#x27;create_date DESC&#x27;, &#x27;limit&#x27; =&gt; 5, ], &#x27;createDateDesc&#x27; =&gt; [ &#x27;order&#x27; =&gt; &#x27;create_date DESC&#x27;, ], ];&#125; 在上面的代码中，继承函数scopes,然后在里面命名自己想要使用的规则名称。 我这里使用了 published，recently，createCateDesc，分别对应sql语句的一部分，这个在调用controller的时候会合并到总的sql语句里面去的。 下面看在controller里面怎么使用 12345678910111213//最近的博文$rawData = Blog::model()-&gt;recently()-&gt;findAll();$rawData = new CArrayDataProvider($rawData, [ &#x27;sort&#x27; =&gt; [ &#x27;attributes&#x27; =&gt; [ &#x27;id&#x27;, &#x27;title&#x27;, ], ], &#x27;pagination&#x27; =&gt; [ &#x27;pageSize&#x27; =&gt; 10, ],]); 我在自己的BlogController控制器，action为actionView的方法中引用了这样一个代码： 注意其中的recently部分 1$rawData=Blog::model()-&gt;recently()-&gt;findAll(); 这个就是我们在model层设置的规则，在这里作为方法被调用了。 是不是很方便呀。 详细的代码我贴到下面： model123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135&lt;?php/** * This is the model class for table &quot;tbl_blog&quot;. * * The followings are the available columns in table &#x27;tbl_blog&#x27;: * @property integer $id * @property string $title * @property string $description * @property string $create_date * @property string $update_date */class Blog extends CActiveRecord&#123; /** * Returns the static model of the specified AR class. * @param string $className active record class name. * @return Blog the static model class */ public static function model($className = __CLASS__) &#123; return parent::model($className); &#125; /** * @return string the associated database table name */ public function tableName() &#123; return &#x27;tbl_blog&#x27;; &#125; /** * @return array validation rules for model attributes. */ public function rules() &#123; // NOTE: you should only define rules for those attributes that // will receive user inputs. return [ [&#x27;title&#x27;, &#x27;required&#x27;, &#x27;message&#x27; =&gt; &#x27;标题不能为空&#x27;], [&#x27;description&#x27;, &#x27;required&#x27;, &#x27;message&#x27; =&gt; &#x27;内容不能为空&#x27;], [&#x27;title&#x27;, &#x27;length&#x27;, &#x27;max&#x27; =&gt; 255], [&#x27;tag&#x27;, &#x27;safe&#x27;], [&#x27;type_id&#x27;, &#x27;safe&#x27;], [&#x27;update_date&#x27;, &#x27;safe&#x27;], // The following rule is used by search(). // Please remove those attributes that should not be searched. [&#x27;id, title, description, create_date, update_date&#x27;, &#x27;safe&#x27;, &#x27;on&#x27; =&gt; &#x27;search&#x27;], ]; &#125; /** * @return array relational rules. */ public function relations() &#123; // NOTE: you may need to adjust the relation name and the related // class name for the relations automatically generated below. return [ ]; &#125; /** * @return array customized attribute labels (name=&gt;label) */ public function attributeLabels() &#123; return [ &#x27;id&#x27; =&gt; &#x27;ID序号&#x27;, &#x27;title&#x27; =&gt; &#x27;标题&#x27;, &#x27;description&#x27; =&gt; &#x27;内容&#x27;, &#x27;tag&#x27; =&gt; &#x27;标签(使用逗号进行分割)&#x27;, &#x27;type_id&#x27; =&gt; &#x27;分类类型&#x27;, &#x27;create_date&#x27; =&gt; &#x27;创建时间&#x27;, &#x27;update_date&#x27; =&gt; &#x27;更新时间&#x27;, ]; &#125; /** * Retrieves a list of models based on the current search/filter conditions. * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions. */ public function search() &#123; // Warning: Please modify the following code to remove attributes that // should not be searched. $criteria = new CDbCriteria(); $criteria-&gt;compare(&#x27;id&#x27;, $this-&gt;id); $criteria-&gt;compare(&#x27;title&#x27;, $this-&gt;title, true); $criteria-&gt;compare(&#x27;description&#x27;, $this-&gt;description, true); $criteria-&gt;compare(&#x27;create_date&#x27;, $this-&gt;create_date, true); $criteria-&gt;compare(&#x27;update_date&#x27;, $this-&gt;update_date, true); $criteria-&gt;scopes = &#x27;createDateDesc&#x27;; return new CActiveDataProvider($this, [ &#x27;criteria&#x27; =&gt; $criteria, ]); &#125; /** * 行为操作 */ public function behaviors() &#123; return [ &#x27;CTimestampBehavior&#x27; =&gt; [ &#x27;class&#x27; =&gt; &#x27;zii.behaviors.CTimestampBehavior&#x27;, &#x27;createAttribute&#x27; =&gt; &#x27;create_date&#x27;, &#x27;updateAttribute&#x27; =&gt; &#x27;update_date&#x27;, &#x27;setUpdateOnCreate&#x27; =&gt; &#x27;true&#x27;, ], ]; &#125; //查询范围 public function scopes() &#123; return [ &#x27;published&#x27; =&gt; [ &#x27;condition&#x27; =&gt; &#x27;status=1&#x27;, ], &#x27;recently&#x27; =&gt; [ &#x27;order&#x27; =&gt; &#x27;create_date DESC&#x27;, &#x27;limit&#x27; =&gt; 5, ], &#x27;createDateDesc&#x27; =&gt; [ &#x27;order&#x27; =&gt; &#x27;create_date DESC&#x27;, ], ]; &#125;&#125; controllerlt;?phpclass BlogController extends Controller&#123; /** * @var string the default layout for the views. Defaults to &#x27;//layouts/column2&#x27;, meaning * using two-column layout. See &#x27;protected/views/layouts/column2.php&#x27;. */ public $layout = &#x27;//layouts/column2&#x27;; /** * @return array action filters */ public function filters() &#123; return [ &#x27;accessControl&#x27;, // perform access control for CRUD operations &#x27;postOnly + delete&#x27;, // we only allow deletion via POST request ]; &#125; /** * Specifies the access control rules. * This method is used by the &#x27;accessControl&#x27; filter. * @return array access control rules */ public function accessRules() &#123; return [ [&#x27;allow&#x27;, // allow all users to perform &#x27;index&#x27; and &#x27;view&#x27; actions &#x27;actions&#x27; =&gt; [&#x27;view&#x27;], &#x27;users&#x27; =&gt; [&#x27;*&#x27;], ], [&#x27;allow&#x27;, // allow authenticated user to perform &#x27;create&#x27; and &#x27;update&#x27; actions &#x27;actions&#x27; =&gt; [&#x27;create&#x27;, &#x27;update&#x27;, &#x27;index&#x27;], &#x27;users&#x27; =&gt; [&#x27;@&#x27;], ], [&#x27;allow&#x27;, // allow admin user to perform &#x27;admin&#x27; and &#x27;delete&#x27; actions &#x27;actions&#x27; =&gt; [&#x27;admin&#x27;, &#x27;delete&#x27;], &#x27;user&#x27; =&gt; [&#x27;admin&#x27;], ], [&#x27;deny&#x27;, // deny all users &#x27;users&#x27; =&gt; [&#x27;*&#x27;], ], ]; &#125; /** * Displays a particular model. * @param integer $id the ID of the model to be displayed */ public function actionView($id) &#123; //最近的博文 $rawData = Blog::model()-&gt;recently()-&gt;findAll(); $rawData = new CArrayDataProvider($rawData, [ &#x27;sort&#x27; =&gt; [ &#x27;attributes&#x27; =&gt; [ &#x27;id&#x27;, &#x27;title&#x27;, ], ], &#x27;pagination&#x27; =&gt; [ &#x27;pageSize&#x27; =&gt; 10, ], ]); $recentBlogMenu = []; foreach ($rawData-&gt;getData() as $key =&gt; $value) &#123; $recentBlogMenu[] = [ &#x27;label&#x27; =&gt; $value-&gt;title, &#x27;url&#x27; =&gt; [&#x27;blog/view&#x27;, &#x27;id&#x27; =&gt; $value-&gt;id], ]; &#125; //博文的分类 $rawData = Type::model()-&gt;findAll(); $rawData = new CArrayDataProvider($rawData, [ &#x27;sort&#x27; =&gt; [ &#x27;attributes&#x27; =&gt; [ &#x27;id&#x27;, &#x27;name&#x27;, ], ], ]); $blogType = []; foreach ($rawData-&gt;getData() as $key =&gt; $value) &#123; $blogType[] = [ &#x27;label&#x27; =&gt; $value-&gt;name, &#x27;url&#x27; =&gt; [&#x27;type/search/&#x27; . $value-&gt;id], ]; &#125; $this-&gt;render(&#x27;view&#x27;, [ &#x27;model&#x27; =&gt; $this-&gt;loadModel($id), &#x27;blogType&#x27; =&gt; $blogType, &#x27;recentBlogMenu&#x27; =&gt; $recentBlogMenu, ]); &#125; /** * Creates a new model. * If creation is successful, the browser will be redirected to the &#x27;view&#x27; page. */ public function actionCreate() &#123; $model = new Blog; // Uncomment the following line if AJAX validation is needed // $this-&gt;performAjaxValidation($model); if (isset($_POST[&#x27;Blog&#x27;])) &#123; $model-&gt;attributes = $_POST[&#x27;Blog&#x27;]; if ($model-&gt;save()) &#123; $this-&gt;redirect([&#x27;view&#x27;, &#x27;id&#x27; =&gt; $model-&gt;id]); &#125; &#125; $rawData = new CActiveDataProvider( &#x27;Type&#x27;, [ &#x27;sort&#x27; =&gt; [ &#x27;attributes&#x27; =&gt; [ &#x27;id&#x27;, &#x27;name&#x27;, ], ], ] ); foreach ($rawData-&gt;getData() as $key =&gt; $value) &#123; $type[$value-&gt;id] = $value-&gt;name; &#125; $this-&gt;render(&#x27;create&#x27;, [ &#x27;model&#x27; =&gt; $model, &#x27;type&#x27; =&gt; $type, ]); &#125; /** * Updates a particular model. * If update is successful, the browser will be redirected to the &#x27;view&#x27; page. * @param integer $id the ID of the model to be updated */ public function actionUpdate($id) &#123; $model = $this-&gt;loadModel($id); // Uncomment the following line if AJAX validation is needed // $this-&gt;performAjaxValidation($model); if (isset($_POST[&#x27;Blog&#x27;])) &#123; $model-&gt;attributes = $_POST[&#x27;Blog&#x27;]; if ($model-&gt;save()) &#123; $this-&gt;redirect([&#x27;view&#x27;, &#x27;id&#x27; =&gt; $model-&gt;id]); &#125; &#125; $rawData = new CActiveDataProvider( &#x27;Type&#x27;, [ &#x27;sort&#x27; =&gt; [ &#x27;attributes&#x27; =&gt; [ &#x27;id&#x27;, &#x27;name&#x27;, ], ], ] ); foreach ($rawData-&gt;getData() as $key =&gt; $value) &#123; $type[$value-&gt;id] = $value-&gt;name; &#125; $this-&gt;render(&#x27;update&#x27;, [ &#x27;model&#x27; =&gt; $model, &#x27;type&#x27; =&gt; $type, ]); &#125; /** * Deletes a particular model. * If deletion is successful, the browser will be redirected to the &#x27;admin&#x27; page. * @param integer $id the ID of the model to be deleted */ public function actionDelete($id) &#123; $this-&gt;loadModel($id)-&gt;delete(); // if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser if (!isset($_GET[&#x27;ajax&#x27;])) &#123; $this-&gt;redirect(isset($_POST[&#x27;returnUrl&#x27;]) ? $_POST[&#x27;returnUrl&#x27;] : [&#x27;admin&#x27;]); &#125; &#125; /** * Lists all models. */ public function actionIndex() &#123; $dataProvider = new CActiveDataProvider( &#x27;Blog&#x27;, [ &#x27;pagination&#x27; =&gt; [&#x27;pageSize&#x27; =&gt; 10], &#x27;criteria&#x27; =&gt; [ &#x27;order&#x27; =&gt; &#x27;create_date DESC&#x27;, ], ] ); $this-&gt;render(&#x27;index&#x27;, [ &#x27;dataProvider&#x27; =&gt; $dataProvider, ]); &#125; /** * Manages all models. */ public function actionAdmin() &#123; $model = new Blog(&#x27;search&#x27;); $model-&gt;unsetAttributes(); // clear any default values if (isset($_GET[&#x27;Blog&#x27;])) &#123; $model-&gt;attributes = $_GET[&#x27;Blog&#x27;]; &#125; $this-&gt;render(&#x27;admin&#x27;, [ &#x27;model&#x27; =&gt; $model, ]); &#125; /** * Returns the data model based on the primary key given in the GET variable. * If the data model is not found, an HTTP exception will be raised. * @param integer the ID of the model to be loaded */ public function loadModel($id) &#123; $model = Blog::model()-&gt;findByPk($id); if (null === $model) &#123; throw new CHttpException(404, &#x27;请求的页面不存在.&#x27;); &#125; return $model; &#125; /** * Performs the AJAX validation. * @param CModel the model to be validated */ protected function performAjaxValidation($model) &#123; if (isset($_POST[&#x27;ajax&#x27;]) &amp;&amp; &#x27;blog-form&#x27; === $_POST[&#x27;ajax&#x27;]) &#123; echo CActiveForm::validate($model); Yii::app()-&gt;end(); &#125; &#125;&#125;","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"},{"name":"Yii","slug":"Yii","permalink":"https://blog.gowhich.com/tags/Yii/"}]},{"title":"Objective-C分类(Category)借用Smalltalk实现中的“分类”概念","date":"2025-06-05T02:26:00.000Z","path":"2025/06/05/Objective-C分类-Category-借用Smalltalk实现中的“分类”概念.html","text":"在Objective-C的设计中，一个主要的考虑即为大型代码框架的维护。结构化编程的经验显示，改进代码的一种主要方法即为将其分解为更小的片段。Objective-C借用并扩展了Smalltalk实现中的“分类”概念，用以帮助达到分解代码的目的。[1] 一个分类可以将方法的实现分解进一系列分离的文件。程序员可以将一组相关的方法放进一个分类，使程序更具可读性。举例来讲，可以在字符串类中增加一个名为“拼写检查”的分类，并将拼写检查的相关代码放进这个分类中。 进一步的，分类中的方法是在运行时被加入类中的，这一特性允许程序员向现存的类中增加方法，而无需持有原有的代码，或是重新编译原有的类。例如若系统提供的字符串类的实现中不包含拼写检查的功能，可以增加这样的功能而无需更改原有的字符串类的代码。 在运行时，分类中的方法与类原有的方法并无区别，其代码可以访问包括私有类成员变量在内的所有成员变量。 若分类声明了与类中原有方法同名的函数，则分类中的方法会被调用。因此分类不仅可以增加类的方法，也可以代替原有的方法。这个特性可以用于修正原有代码中的错误，更可以从根本上改变程序中原有类的行为。若两个分类中的方法同名，则被调用的方法是不可预测的。 其它语言也尝试了通过不同方法增加这一语言特性。TOM在这方面走的更远，不仅允许增加方法，更允许增加成员变量。也有其它语言使用面向声明的解决方案，其中最值得注意的是Self语言。 C#与Visual Basic.NET语言以扩展函数的与不完全类的方式实现了类似的功能。Ruby与一些动态语言则以”monkey patch”的名字称呼这种技术。 使用分类的例子 这个例子创建了Integer类，其本身只定义了integer属性，然后增加了两个分类Arithmetic与Display以扩展类的功能。虽然分类可以访问类的私有成员，但通常利用属性的访问方法来访问是一种更好的做法，可以使得分类与原有类更加独立。这是分类的一种典型应用—另外的应用是利用分类来替换原有类中的方法，虽然用分类而不是继承来替换方法不被认为是一种好的做法。 Integer.h123456789101112#import &lt;objc/Object.h&gt; @interface Integer : Object&#123;@private int integer;&#125; @property (assign, nonatomic) integer; @end Integer.m12345678#import &quot;Integer.h&quot; @implementation Integer @synthesize integer; @end Arithmetic.h1234567#import &quot;Integer.h&quot; @interface Integer (Arithmetic)- (id) add: (Integer *) addend;- (id) sub: (Integer *) subtrahend;@end Arithmetic.m12345678910111213#import &quot;Arithmetic.h&quot;@implementation Integer (Arithmetic)- (id) add: (Integer *) addend&#123; self.integer = self.integer + addend.integer; return self;&#125; - (id) sub: (Integer *) subtrahend&#123; self.integer = self.integer - subtrahend.integer; return self;&#125;@end Display.h12345678 #import &quot;Integer.h&quot;@interface Integer (Display)- (id) showstars;- (id) showint;@end Display.m123456789101112131415161718#import &quot;Display.h&quot;@implementation Integer (Display)- (id) showstars&#123; int i, x = self.integer; for(i=0; i &lt; x; i++) printf(&quot;*&quot;); printf(&quot;\\n&quot;); return self;&#125; - (id) showint&#123; printf(&quot;%d\\n&quot;, self.integer); return self;&#125;@end main.m12345678910111213141516171819202122232425262728 #import &quot;Integer.h&quot;#import &quot;Arithmetic.h&quot;#import &quot;Display.h&quot;int main(void)&#123; Integer *num1 = [Integer new], *num2 = [Integer new]; int x; printf(&quot;Enter an integer: &quot;); scanf(&quot;%d&quot;, &amp;x); num1.integer = x; [num1 showstars]; printf(&quot;Enter an integer: &quot;); scanf(&quot;%d&quot;, &amp;x); num2.integer = x; [num2 showstars]; [num1 add:num2]; [num1 showint]; return 0;&#125; 注释 可以利用以下命令来编译： 1gcc -x objective-c main.m Integer.m Arithmetic.m Display.m -lobjc 在编译时间，可以利用省略#import &quot;Arithmetic.h&quot;与[num1 add:num2]命令，以及Arithmetic.m文件来实验。程序仍然可以运行，这表明了允许动态的、按需的加载分类；若不需要某一分类提供的功能，可以简单的不编译之。 源自：维基百科","tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://blog.gowhich.com/tags/Objective-C/"}]},{"title":"Objective-C与Smalltalk类似的动态类型","date":"2025-06-04T09:14:58.000Z","path":"2025/06/04/Objective-C与Smalltalk类似的动态类型.html","text":"动态类型类似于Smalltalk，Objective-C具备动态类型： 即消息可以发送给任何对象实体，无论该对象实体的公开接口中有没有对应的方法。在C++这种静态类型的语言里，不可能对一个(void*)指针调用任何方 法，编译器会挡下该调用行为。但在Objective-C中，你可以对id发送任何信息(id很像void*，但是被严格限制只能使用在对象上)，编译器 仅会发出“该对象可能无法回应信息”的警告，程序同样可以通过编译，而实际发生的事则取决于运行期该对象的真正形态，若该对象的确可以回应消息，则依旧运 行对应的方法。 这种特性可以增加语言的灵活性，因为它允许对象“捕捉”消息，再将消息转送到另一个可以正确处理该消息的对象，形同消息“转发”给另一个对象。 一个对象收到信息之后，他有三种处理信息的可能手段，第一是回应该消息并运行方法，若无法回应，则可以转发消息给其他对象，若以上两者均无，就要处 理无法回应而抛出的例外。只要进行三者之其一，该消息就算完成任务而被丢弃。若对“nil”（空对象指针）发送消息，该消息通常会被忽略，取决于编译器选 项可能会抛出例外。 虽然Objective-C具备动态类型的能力，但编译期的静态类型检查依旧可以应用到变量上。以下三种声明在运行时效力是完全相同的，但是三种声明提供了一个比一个更明显的类型信息，附加的类型信息让编译器在编译时可以检查变量类型，并对类型不符的变量提出警告。 下面三个方法，差异仅在于参数的形态： 1- setMyValue:(id) foo; id形态表示参数“foo”可以是任何类的实例。 1- setMyValue:(id &lt;aProtocol&gt;) foo; id &lt;aProtocol&gt;表示“foo”可以是任何类的实例，但必须采纳“aProtocol”协议。 1- setMyValue:(NSNumber*) foo; 该声明表示“foo”必须是“NSNumber”的实例。 动态类型是一种强大的特性。在缺少泛型的静态类型语言（如Java 5以前的版本）中实现容器类时，程序员需要写一种针对通用类型对象的容器类，然后在通用类型和实际类型中不停的强制类型转换。无论如何，类型转换会破坏静态类型，例如写入一个“整数”而将其读取为“字符串”会产生运行时错误。这样的问题被泛型解决，但容器类需要其内容对象的类型一致，而对于动态类型语言则完全没有这方面的问题。 [资料：维基百科]","tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://blog.gowhich.com/tags/Objective-C/"}]},{"title":"Objective-C对象发送消息[转发]","date":"2025-06-04T08:54:17.000Z","path":"2025/06/04/Objective-C对象发送消息-转发.html","text":"Objective-C允许对一个对象发送消息，不管它是否能够响应之。除了响应或丢弃消息以外，对象也可以将消息转发到可以响应该消息的对象。转发可以用于简化特定的设计模式，例如观测器模式或代理模式。 Objective-C运行时在Object中定义了一对方法： A.转发方法: 12- (retval_t) forward:(SEL) sel :(arglist_t) args; // with GCC- (id) forward:(SEL) sel :(marg_list) args; // with NeXT/Apple systems B.响应方法: 12- (retval_t) performv:(SEL) sel :(arglist_t) args; // with GCC- (id) performv:(SEL) sel :(marg_list) args; // with NeXT/Apple systems 希望实现转发的对象只需用新的方法覆盖以上方法来定义其转发行为。无需重写响应方法performv::，由于该方法只是单纯的对响应对象发送消息并传递参数。其中，SEL类型是Objective-C中消息的类型。 例子 这里包括了一个演示转发的基本概念的程序示例。(代码来源：维基百科Objective-C) Forwarder.h123456789#import &lt;objc/Object.h&gt; @interface Forwarder : Object&#123; id recipient; //该对象是我们希望转发到的对象。&#125; @property (assign, nonatomic) id recipient; @end Forwarder.m1234567891011121314151617#import &quot;Forwarder.h&quot; @implementation Forwarder @synthesize recipient; - (retval_t) forward: (SEL) sel : (arglist_t) args&#123; /* *检查转发对象是否响应该消息。 *若转发对象不响应该消息，则不会转发，而产生一个错误。 */ if([recipient respondsTo:sel]) return [recipient performv: sel : args]; else return [self error:&quot;Recipient does not respond&quot;];&#125; Recipient.h1234567#import &lt;objc/Object.h&gt; // A simple Recipient object.@interface Recipient : Object- (id) hello;@end Recipient.m123456789101112#import &quot;Recipient.h&quot; @implementation Recipient - (id) hello&#123; printf(&quot;Recipient says hello!\\n&quot;); return self;&#125; @end main.m1234567891011121314151617#import &quot;Forwarder.h&quot;#import &quot;Recipient.h&quot; int main(void)&#123; Forwarder *forwarder = [Forwarder new]; Recipient *recipient = [Recipient new]; forwarder.recipient = recipient; //Set the recipient. /* *转发者不响应hello消息！该消息将被转发到转发对象。 * (若转发对象响应该消息) */ [forwarder hello]; return 0;&#125; 脚注 利用GCC编译时，编译器报告： 1234$ gcc -x objective-c -Wno-import Forwarder.m Recipient.m main.m -lobjcmain.m: In function `main&#x27;:main.m:12: warning: `Forwarder&#x27; does not respond to `hello&#x27; 如前文所提到的，编译器报告Forwarder类不响应hello消息。在这种情况下，由于实现了转发，可以忽略这个警告。 运行该程序产生如下输出： 12$ ./a.outRecipient says hello!","tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://blog.gowhich.com/tags/Objective-C/"}]},{"title":"Golang新版本安装吐槽","date":"2025-06-03T09:14:58.000Z","path":"2025/06/03/Golang新版本安装吐槽.html","text":"我是打算使用一下最新版本的Golang，然后使用下Hugo，结果安装的时候提示要安装上一个版本，我感觉没啥问题，我就安装了要求安装的版本，结果还是有问题继续安装要求安装的版本结果就是一个套着一个，我服了 这个机制头一次见到 123456789101112131415161718192021222324252627282930313233343536373839404142$ gvm install go1.24.3Updating Go source...Installing go1.24.3... * Compiling...ERROR: Failed to compile. Check the logs at /home/durban/.gvm/logs/go-go1.24.3-compile.logERROR: Failed to use installed version# durban @ durban-amd-workspace in ~/Downloads/ubuntu_software [17:13:01] C:130$ tail -f -n 100 ~/.gvm/logs/go-go1.24.3-compile.log Building Go cmd/dist using /home/durban/.gvm/gos/go1.14.15. (go1.14.15 linux/amd64)can&#x27;t load package: package ./cmd/dist: found packages main (build.go) and building_Go_requires_Go_1_22_6_or_later (notgo122.go) in /home/durban/.gvm/gos/go1.24.3/src/cmd/dist# durban @ durban-amd-workspace in ~/Downloads/ubuntu_software [17:13:25] C:130$ gvm install go1.22.6 Installing go1.22.6... * Compiling...ERROR: Failed to compile. Check the logs at /home/durban/.gvm/logs/go-go1.22.6-compile.logERROR: Failed to use installed version# durban @ durban-amd-workspace in ~/Downloads/ubuntu_software [17:13:35] C:1$ tail -f -n 100 ~/.gvm/logs/go-go1.22.6-compile.logBuilding Go cmd/dist using /home/durban/.gvm/gos/go1.14.15. (go1.14.15 linux/amd64)can&#x27;t load package: package ./cmd/dist: found packages main (build.go) and building_Go_requires_Go_1_20_6_or_later (notgo120.go) in /home/durban/.gvm/gos/go1.22.6/src/cmd/dist# durban @ durban-amd-workspace in ~/Downloads/ubuntu_software [17:13:49] C:130$ gvm install go1.20.6 Installing go1.20.6... * Compiling...ERROR: Failed to compile. Check the logs at /home/durban/.gvm/logs/go-go1.20.6-compile.logERROR: Failed to use installed version# durban @ durban-amd-workspace in ~/Downloads/ubuntu_software [17:13:53] C:1$ tail -f -n 100 ~/.gvm/logs/go-go1.20.6-compile.logBuilding Go cmd/dist using /home/durban/.gvm/gos/go1.14.15. (go1.14.15 linux/amd64)can&#x27;t load package: package ./cmd/dist: found packages main (build.go) and building_Go_requires_Go_1_17_13_or_later (notgo117.go) in /home/durban/.gvm/gos/go1.20.6/src/cmd/dist# durban @ durban-amd-workspace in ~/Downloads/ubuntu_software [17:14:02] C:130$ gvm install go1.17.13 Installing go1.17.13... * Compiling...go1.17.13 successfully installed! 笑死人 这个安装逻辑就是按照这个顺序依次安装 1234gvm install go1.17.13gvm install go1.20.6gvm install go1.22.6gvm install go1.24.3 为了体验下新版本我这是招谁了","tags":[{"name":"Golang","slug":"Golang","permalink":"https://blog.gowhich.com/tags/Golang/"}]},{"title":"Objective-C 创建对象","date":"2025-06-03T09:03:50.000Z","path":"2025/06/03/Objective-C-创建对象.html","text":"Objective-C中创建对象的方法：Objective-C 创建对象需通过 alloc 以及 init。alloc的作用是分配内存，init 则是初始化对象。 init 与 alloc 都是定义在 NSObject 里的方法，父对象收到这两个信息并做出正确回应后，新对象才创建完毕。以下为范例： 1MyObject * my = [[MyObject alloc] init]; 在 Objective-C 2.0 里，若创建对象不需要参数，则可直接使用 new 1MyObject * my = [MyObject new]; 这仅仅是语法上的精简，效果完全相同。 若要自己定义初始化的过程，可以重写 init 方法，来添加额外的工作。(用途类似 C++ 的构造函数 constructor) 123456- (id) init &#123; if ( self=[super init] ) &#123; // 必须调用父类的 init // do something here ... &#125; return self;&#125;","tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://blog.gowhich.com/tags/Objective-C/"}]},{"title":"Objective-C 协议(Protocol)","date":"2025-06-03T08:54:11.000Z","path":"2025/06/03/Objective-C-协议-Protocol.html","text":"协议是一组尚未实现的方法列表，任何的类均可采纳该协议并给出方法的具体实现。 Objective-C在NeXT时期曾经试图引入多重继承的概念，但由于协议的出现而没有实现。协议的功能类似于C++中的多重抽象基类继承或是Java与C#语言中的“接口”。在Objective-C中，包括两种定义协议的方式：由编译器保证的“正式协议”，以及为特定目的设定的“非正式协议”。 非正式协议为一个可以选择性实现的一系列方法列表。非正式协议虽名为协议，但实际上是挂于NSObject上的未实现分类 (Unimplemented Category)的一种称谓，Objetive-C语言机制上并没有非正式协议这种东西，OSX 10.6版本之后由于正式协议也可以通过@optional关键字达成相同功用，所以非正式协议已经被废弃不再使用。 正式协议则类似于Java中的”接口”，它是一系列方法的列表，任何类都可以声明自身实现了某个协议。在Objective-C 2.0之前，一个类必须实现它声明符合的协议中的所有方法，否则编译器会报告一个错误，表明这个类没有实现它声明符合的协议中的全部方法。 Objective-C 2.0版本允许标记协议中某些方法为可选的(Optional)，这样编译器就不会强制实现这些可选的方法。 协议经常应用于Cocoa 中的委托及事件触发。例如文本框类通常会包括一个委托 (delegate)对象，该对象可以实现一个协议，该协议中可能包含一个实现文字输入的自动完成方法。若这个委托对象实现了这个方法，那么文本框类就会在适当的时候触发自动完成事件，并调用这个方法用于自动完成功能。 Objective-C中协议的概念与Java中接口的概念并不完全相同，即一个类可以在不声明它符合某个协议的情况下，实现这个协议所包含的方 法，也即实质上符合这个协议，而这种差别对外部代码而言是不可见的。正式协议的声明不提供实现，它只是简单地表明符合该协议的类实现了该协议的方法，保证 调用端可以安全调用方法。 语法 协议以关键字@protocol作为区段起始，@end退出，中间为方法列表。 1234@protocol Locking- (void)lock;- (void)unlock;@end 这是一个协议的例子，多线程编程中经常要确保一份共享资源同时只有一个线程可以使用，会在使用前给该资源挂上锁 ，以上即为一个表明有“锁”的概念的协议，协议中有两个方法，只有名称但尚未实现。 下面的SomeClass宣称他采纳了Locking协议： 123456789101112@interface SomeClass : SomeSuperClass &lt;Locking&gt;@end一旦SomeClass表明他采纳了Locking协议，SomeClass就有义务实现Locking协议中的两个方法。@implementation SomeClass- (void)lock &#123; // 实现lock方法...&#125;- (void)unlock &#123; // 实现unlock方法...&#125;@end 由于SomeClass已经确实遵从了Locking协议，故调用端可以安全的发送lock或unlock信息给SomeClass实体变量，不需担心他没有办法回应信息。 插件是另一个使用抽象定义的例子，可以在不关心插件的实现的情况下定义其希望的行为。","tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://blog.gowhich.com/tags/Objective-C/"}]},{"title":"Objective-C 类型的声明与实现","date":"2025-06-03T08:45:02.000Z","path":"2025/06/03/Objective-C-类型的声明与实现.html","text":"Objective-C 类型要求区分接口（interface）与实现（implementation）为两个程序区块，这是强制性的。 类型的接口通常放置于头文件内，依C语言的惯例以.h作为扩展名；类型的实现则放于以.m为扩展名。 Interface接口区段里头清楚定义了类型的名称，实体变量（instance variable），以及方法。 以关键字@interface作为区段起头，@end退出区段。 12345678910@interface MyObject : NSObject &#123; int memberVar1; // 实体变量 id memberVar2;&#125;+(return_type) class_method; // 类别分类 -(return_type) instance_method1; // 实体方法-(return_type) instance_method2: (int) p1;-(return_type) instance_method3: (int) p1 andPar: (int) p2;@end 方法前面的+&#x2F;-号代表方法的类型：加号（+）代表类型方法（class method），不需要实体就可以调用，近于C++的静态成员函数（static member function）。减号（-）即是一般的实体方法（instance method）。 这里提供了一份意义相近的C++语法对照，如下： 123456789101112class MyObject : public NSObject &#123; protected: int memberVar1; // 实体变量 void * memberVar2; public: static return_type class_method(); // 类别方法 return_type instance_method1(); // 实体方法 return_type instance_method2( int p1 ); return_type instance_method3( int p1, int p2 );&#125; Objective-C定义一个新的方法时，名称内的冒号（:）代表参数传递，不同于C语言以数学函数的括号来传递参数。Objective-C方法的参数也不必全部都附缀于方法名称的尾端，也可以夹杂于名称中间，提高程序可读性。以一个设置颜色RGB值的方法为例: 123- (void) setColorToRed: (float)red Green: (float)green Blue:(float)blue; /* 声明方法 */[myColor setColorToRed: 1.0 Green: 0.8 Blue: 0.2]; /* 调用方法 */ 这个方法的全名是setColorToRed:Green:Blue:。每个冒号后面都带着一个形态为float的参数，分别代表红，绿，蓝三色。 Implementation实现区段则撰写方法实际运行的程序。以关键字@implementation作为区段起头，@end结尾。 1234567891011121314151617@implementation MyObject &#123; int memberVar3; //私有实体变量&#125; +(return_type) class_method &#123; .... //method implementation&#125;-(return_type) instance_method1 &#123; ....&#125;-(return_type) instance_method2: (int) p1 &#123; ....&#125;-(return_type) instance_method3: (int) p1 andPar: (int) p2 &#123; ....&#125;@end 值得一提的是不只interface区段开头可以声明实体变量，implementation区段开头也可以声明实体变量，两者的差别在于成员访问权限， 声明于interface区段内的实体变量默认权限为protected，声明于implementation区段的实体变量则默认为private，基 于面向对象的封装原则，仅供类型内部使用的变量请尽可能声明于implementation区段(.m档)内，不需要曝露于interface(.h档) 中。","tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://blog.gowhich.com/tags/Objective-C/"}]},{"title":"iOS开发是否应该使用ARC","date":"2025-06-03T08:43:01.000Z","path":"2025/06/03/iOS开发是否应该使用ARC.html","text":"关于ARC的介绍文章网上已经很多，苹果的官方文档也不少。担心使用ARC会带来问题的同学主要的理由有以下5点: 1.担心这个技术方案不靠谱。苹果大多数时候的技术方案都是比较靠谱的，但也有一些技术方案有很多坑，例如storyboard。 2.原有的项目在非ARC环境下运行良好，担心迁移成本或引入新的问题。 3.苹果以前手工管理内存需要非常小心，稍微不注意应用程序就崩溃了。有过这段经历的iOS开发老手，心里上还是觉得自己手工管理内存更踏实一些。 4.使用ARC需要了解ARC的一些细节，还需要引入_bridge等新的关键字，学习成本还是有的。 5.以为ARC只能支持iOS5.0以上（这是非常大的误解）。 对于上面提到5点问题，我认为相应的回答如下: 1.ARC是WWDC2011大会时提出的技术，离现在已经快2年了，而且苹果现在将MacOS上的垃圾回收机制废弃(Deprecated)，采用ARC替代，无疑证明了ARC是成熟的了。 2.确实有一些迁移成本，但苹果在Xcode中专门集成了迁移工具，成本已经非常小了。如下图就是Xcode集成的将非ARC工程转换成ARC工程的工具。另外，为了兼容第三方的非ARC开源库，你也可以在工程中随意使用编译参数：-fno-objc-arc ,这个参数允许对部分文件关闭ARC。 3.手工管理内存虽然踏实，但是泄露很容易发生。常常开发完成后，需要使用Instruments来检测泄露。但用了ARC后，基本不会出现泄露了，我在 开发粉笔网iPhone客户端时，由于使用了ARC，花三个月开发完的应用，用instruments检测后，没有发现任何内存泄漏问题。这在没有使用 ARC的工程中是不可想象的。 4.确实有学习成本。但是非常值得学习，能省不少开发精力。 5.虽然ARC是与iOS5一同推出，但是由于ARC的实现机制是在编译期完成，所以使用ARC之后App仍然可以支持iOS4.3。稍微需要注意的是， 如果要在ARC开启的情况下支持iOS4.3，需要将weak关键字换成 __unsafe_unretained，另外还有一些细节需要处理 所以，希望大家都能在项目中使用ARC，一旦你感受到它带来的好处，你就离不开它了。它也能让你从繁琐的内存管理代码中解放出来，将精力更多关注于代码结构、设计模式而不是底层的内存管理。","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.gowhich.com/tags/iOS/"}]},{"title":"Yii Widget的使用","date":"2025-06-03T07:18:28.000Z","path":"2025/06/03/Yii-Widget的使用.html","text":"小插件解决大问题，做网站，最喜欢使用这种东西，不需要重写代码，直接调用，传递参数，就得到想要的模块，yii也有次功能，看代码： 12345678910111213141516$this-&gt;beginWidget(&#x27;CBootStrapPortlet&#x27;, [ &#x27;title&#x27; =&gt; &#x27;博文分类&#x27;, //导航标题 &#x27;htmlOptions&#x27; =&gt; [&#x27;class&#x27; =&gt; &#x27;nav nav-pills nav-stacked&#x27;], //样式定义 &#x27;tagName&#x27; =&gt; &#x27;ul&#x27;, // &#x27;decorationCssClass&#x27; =&gt; &#x27;active&#x27;, &#x27;titleCssClass&#x27; =&gt; &#x27;&#x27;, &#x27;contentCssClass&#x27; =&gt; &#x27;&#x27;,]);$this-&gt;widget(&#x27;CBootStrapMenu&#x27;, [ &#x27;items&#x27; =&gt; $this-&gt;blogType, &#x27;htmlOptions&#x27; =&gt; [&#x27;class&#x27; =&gt; &#x27;&#x27;],]);$this-&gt;endWidget(); 上面的代码是我的列表的小插件，样式我已经定义好了，只要给变量，传递参数就好了s","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"Objective-C 信息传递","date":"2025-06-03T07:14:54.000Z","path":"2025/06/03/Objective-C-信息传递.html","text":"Objective-C最大的特色是承自Smalltalk的信息传递模型（message passing），与今日主流的C++差异甚大。Objective-C里，与其说对象互相调用方法，不如说对象之间互相传递信息更为精确。此二种风格的差异主要在于程序如何看待调用方法&#x2F;传送信息这个动作。C++里类型与方法的关系非常严格清楚，一个方法必定属于一个类型，而且在编译时（compile time）就已经紧密绑定，你不可能去调用一个不存在类型里的方法。但在Objective-C，类型与信息的关系比较松散，调用方法视为对对象发送信息，所有方法都被视为对信息的回应。所有信息处理直到运行时（runtime）才会动态决定，并交由类型自行决定如何处理收到的信息。也就是说，一个类型不保证一定会回应收到的信息，如果类型收到了一个无法处理的信息，程序只会抛出一个Exception，不会出错或当掉。 C++里，送一个信息给对象（或者说调用一个方法）的语法如下: 1obj-&gt;method(argument); Objective-C则写成: 1[obj method: argument]; 此二者并不仅仅是语法上的差异，还有基本行为上的不同。 这里以一个汽车类（car class）的简单例子来解释Objective-C的信息传递特性： 1[car fly]; 典型的C++意义解读是“调用car类型的fly方法”。若car类型里头没有定义fly方法，那编译肯定不会通过。但是Objective-C里，我们应当解读为“发提交一个fly的信息给car对象”，fly是信息，而car是信息的接收者。car收到信息后会决定如何回应这个信息，若car类型内定义有fly方法就运行此段程序，若car内不存在fly方法，这里不会产生编译错误，它仅仅是抛出Exception。 此二种风格各有优劣。C++的编译期绑定使得函数调用非常快速，强制要求所有的方法都必须有对应的动作。缺点是不支持动态绑定（除非手动加上 virtual关键字）。Objective-C天生即是动态绑定，运行期才处理信息，允许传送未知信息给对象。可以送信息给整个对象集合而不需要一一检 查每个对象的型态，天生具备消息转送机制。同时空对象nil也可以接受信息，但是默认不做事，所以送信息给nil也不用担心程序崩溃。 Objective-C的方法调用因为运行期才动态解析信息，一开始信息比C++ virtual成员函数调用速度慢上三倍。但经由IMP高速缓存改善，目前已经比C++的virtual function快上50％。","tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://blog.gowhich.com/tags/Objective-C/"}]},{"title":"Objective-C Hello World实例","date":"2025-06-03T07:12:55.000Z","path":"2025/06/03/Objective-C-Hello-World实例.html","text":"这里示范一个基础的Hello World程序。 12345678910#import&lt;Foundation/Foundation.h&gt; int main(int argc, char *argv[])&#123; NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init]; NSLog(@&quot;Hello World!&quot;); [pool drain]; return 0;&#125; 以上是Xcode的旧版”Hello World”程序代码，在4.3.1 xcode的代码为: 12345678#import &lt;Foundation/Foundation.h&gt; int main(int argc, char *argv[])&#123; @autoreleasepool&#123; NSLog(@&quot;Hello World!&quot;); &#125; return 0;&#125;","tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://blog.gowhich.com/tags/Objective-C/"}]},{"title":"Yii CRUD操作","date":"2025-06-03T07:11:26.000Z","path":"2025/06/03/Yii-CRUD操作.html","text":"对于喜欢操作sql语句的人来说和对于sql语句基础不是很好的，能够明白每个CRUD操作是什么意思很重要，简单的介绍个例子，代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116&lt;?phpclass Post extends CActiveRecord&#123; public $fixtures = [ &#x27;posts&#x27; =&gt; &#x27;Post&#x27;, &#x27;tags&#x27; =&gt; &#x27;Tag&#x27;, ]; public function findPost() &#123; //调用find时，我们使用$condition和$params指定查询条件。 //此处$condition可以是SQL语句中的WHERE字符串，$params则是一个参数数组， //其中的值应绑定到$condation中的占位符。 $post = $this-&gt;posts(&#x27;post1&#x27;); $fPost = Post::model()-&gt;find(&#x27;id=:id&#x27;, [&#x27;:id&#x27; =&gt; $post-&gt;id]); //SELECT * FROM `tbl_post` `t` WHERE `t`.`id`=1 LIMIT 1 $fPost = Post::model()-&gt;find(&#x27;?&#x27;, [$post-&gt;id]); //SELECT * FROM `tbl_post` `t` WHERE &#x27;1&#x27; LIMIT 1 //find返回符合条件的第一条记录，而findAll会返回符合条件的所有行。 $fAllPost = Post::model()-&gt;findAll(&#x27;id=:id&#x27;, [&#x27;:id&#x27; =&gt; $post-&gt;id]); //SELECT * FROM `tbl_post` `t` WHERE id = &#x27;1&#x27; $fAllPost = Post::model()-&gt;findAll(&#x27;?&#x27;, [$post-&gt;id]); //SELECT * FROM `tbl_post` `t` WHERE &#x27;1&#x27; $criteria = new CDbCriteria(); $criteria-&gt;condition = &#x27;id=:id AND title=:title&#x27;; $criteria-&gt;params = [&#x27;:id&#x27; =&gt; $post-&gt;id, &#x27;:title&#x27; =&gt; $post-&gt;title]; $fPost = Post::model()-&gt;find($criteria); //SELECT * FROM `tbl_post` `t` WHERE id = &#x27;1&#x27; AND title = &#x27;post1&#x27; LIMIT 1 $fAllPost = Post::model()-&gt;findAll($criteria); //SELECT * FROM `tbl_post` `t` WHERE id = &#x27;1&#x27; AND title = &#x27;post1&#x27; $fPost = Post::model()-&gt;findByPk($post-&gt;id, &#x27;title=:title&#x27;, [&#x27;:title&#x27; =&gt; $post-&gt;title]); //SELECT * FROM `tbl_post` `t` WHERE `t`.`id`=1 AND (title = &#x27;post1&#x27;) LIMIT 1 $fPost = Post::model()-&gt;findByAttributes([&#x27;id&#x27; =&gt; $post-&gt;id, &#x27;title&#x27; =&gt; $post-&gt;title]); //SELECT * FROM `tbl_post` `t` WHERE `t`.`id`=&#x27;1&#x27; AND `t`.`title`=&#x27;post1&#x27; LIMIT 1 $sql = &#x27;SELECT id, title from &#123;&#123;post&#125;&#125; WHERE id = ? AND title = ?&#x27;; //必须设置表前缀 $fPost = Post::model()-&gt;findBySql($sql, [$post-&gt;id, $post-&gt;title]); $sql = &#x27;SELECT id, title from &#123;&#123;post&#125;&#125; WHERE id = :id AND title = :title&#x27;; $fPost = Post::model()-&gt;findBySql($sql, [&#x27;:id&#x27; =&gt; $post-&gt;id, &#x27;:title&#x27; =&gt; $post-&gt;title]); //如果没有找到符合条件的行，find返回null，findAll返回array()。 &#125; public function countPost() &#123; $post = $this-&gt;posts(&#x27;post1&#x27;); $cPost = Post::model()-&gt;count(&#x27;?&#x27;, [$post-&gt;title]); //SELECT COUNT(*) FROM `tbl_post` `t` WHERE &#x27;post1&#x27; 无意义 $cPost = Post::model()-&gt;countByAttributes([&#x27;title&#x27; =&gt; $post-&gt;title, &#x27;content&#x27; =&gt; $post-&gt;content]); //SELECT COUNT(*) FROM `tbl_post` `t` WHERE `t`.`title`=&#x27;post1&#x27; AND `t`.`content`=&#x27;content1&#x27; $sql = &quot;SELECT title from &#123;&#123;post&#125;&#125; WHERE title LIKE &#x27;%&quot; . $post-&gt;title . &quot;%&#x27;&quot;; $cPost = Post::model()-&gt;countBySql($sql); //至少有一条记录符合查询条件 $ePost = Post::model()-&gt;exists(&#x27;id=?ANDtitle=?&#x27;, [$post-&gt;id, $post-&gt;title]); //SELECT 1 FROM `tbl_post` `t` WHERE id = &#x27;1&#x27; AND title = &#x27;post1&#x27; LIMIT 1 &#125; public function updatePost() &#123; $post = $this-&gt;posts(&#x27;post1&#x27;); $post-&gt;title = &#x27;updatepost1&#x27;; if ($post-&gt;isNewRecord) &#123; $post-&gt;create_time = $post-&gt;update_time = new CDbExpression(&#x27;NOW()&#x27;); //UPDATE `tbl_post` SET `id`=1, `title`=&#x27;update post 1&#x27;, `content`=&#x27;content1&#x27;, `tags`=NULL, `status`=1, `create_time`=NULL, `update_time`=1302161123, `author_id`=1 WHERE `tbl_post`.`id`=1 &#125; else &#123; $post-&gt;update_time = time(); &#125; $post-&gt;save(); //updateAll $sql = &quot;SELECT * FROM &#123;&#123;post&#125;&#125; WHERE title LIKE &#x27;%&quot; . &quot;post&quot; . &quot;%&#x27;&quot;; //SELECT * FROM tbl_post WHERE title LIKE &#x27;%post%&#x27; $post = Post::model()-&gt;findBySql($sql); $post-&gt;updateAll([&#x27;update_time&#x27; =&gt; time()], &#x27;id&lt;=?&#x27;, [&#x27;2&#x27;]); //UPDATE `tbl_post` SET `update_time`=1302161123 WHERE id &lt;= &#x27;2&#x27; $post-&gt;updateByPk($post-&gt;id + 2, [&#x27;title&#x27; =&gt; &#x27;updatepost3&#x27;]); $post-&gt;updateByPk($post-&gt;id, [&#x27;title&#x27; =&gt; &#x27;updatepost3&#x27;], &#x27;id=?&#x27;, [&#x27;3&#x27;]); //updateCounter更新某个字段的数值，一般是计数器(+/-)。 $tag = $this-&gt;tags(&#x27;tag1&#x27;); $uTag = Tag::model()-&gt;updateCounters([&#x27;frequency&#x27; =&gt; &#x27;3&#x27;], &#x27;id=?&#x27;, [&#x27;1&#x27;]); &#125; public function deletePost() &#123; $post = $this-&gt;posts(&#x27;post1&#x27;); $post-&gt;delete(); $this-&gt;assertEquals(1, $post-&gt;id); //删除数据库表中的记录，但是post的这个实例还在。 $post2 = Post::model()-&gt;findByPk($post-&gt;id); $this-&gt;assertEquals(null, $post2); //多条记录 $delete = Post::model()-&gt;deleteAll(&#x27;(id = ? AND title = ?) || (id = \\&#x27;4\\&#x27;) &#x27;, [1, &#x27;post1&#x27;]); $this-&gt;assertEquals(0, $delete); $delete = Post::model()-&gt;deleteAllByAttributes([&#x27;id&#x27; =&gt; &#x27;2&#x27;], &#x27;content=?&#x27;, [&#x27;content2&#x27;]); //DELETE FROM `tbl_post` WHERE `tbl_post`.`id`=&#x27;2&#x27; AND (content = &#x27;content2&#x27;) $this-&gt;assertEquals(1, $delete); &#125;&#125;","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"Yii在IIS下的伪静态处理","date":"2025-06-03T07:09:10.000Z","path":"2025/06/03/Yii在IIS下的伪静态处理.html","text":"Yii在IIS下的伪静态处理是，在根目录建立httpd.ini文件，然后使用IIS的伪静态规则，写入自己需要的规则： 我购买的虚拟主机在香港，因为windows的主机比较多，于是我也中招了，于是四处寻求方法，四处尝试，终于找到了适合Yii的伪静态规则： 代码如下： 12345678910111213[ISAPI_Rewrite]# 3600 = 1 hourCacheClockRate 3600RepeatLimit 32RewriteEngine On#伪静态规则RewriteBase /RewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-dRewriteRule ^(.*)/(.*)$ $1/index.php?$2RewriteRule !\\.(js|ico|gif|jpe?g|bmp|png|css)$ index.php [L]我在虚拟机上测试通过了，哈哈，希望对你也有用","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"Yii-Gii的安装和配置","date":"2025-06-03T07:05:48.000Z","path":"2025/06/03/Yii-Gii的安装和配置.html","text":"Gii 是基于 web 的 Yii framework 代码生成器。 开始配置 可以在你的应用程序配置文件中增加以下代码以使用该模块： 1234567&#x27;modules&#x27; =&gt; [ &#x27;gii&#x27; =&gt; [ &#x27;class&#x27; =&gt; &#x27;system.gii.GiiModule&#x27;, &#x27;username&#x27; =&gt; &#x27;dev&#x27;, &#x27;password&#x27; =&gt; &#x27;yiidev&#x27;, ],], 运行 打开浏览器，输入 http://localhost/yourapp/index.php?r=gii，使用刚才在配置文件中填的 username 和 password 登录。","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"Yii分页设置","date":"2025-06-03T07:03:26.000Z","path":"2025/06/03/Yii分页设置.html","text":"yii自己是带有自动分页功能的。只要在对应的controller里面，类似下面这样鞋代码，就会实现的 1234567$dataProvider = new CActiveDataProvider( &#x27;Blog&#x27;, [ &#x27;pagination&#x27; =&gt; [&#x27;pageSize&#x27; =&gt; 10], &#x27;criteria&#x27; =&gt; [&#x27;order&#x27; =&gt; &#x27;create_date DESC&#x27;], ]); 但是样式还是yii中已经写好的，那么对于我，我要改掉这个样式，使用我提供的样式，可以像我下面这样写 1234567891011121314151617181920&lt;?php$this-&gt;widget(&#x27;zii.widgets.CListView&#x27;, [ &#x27;dataProvider&#x27; =&gt; $dataProvider, &#x27;itemView&#x27; =&gt; &#x27;_view&#x27;, &#x27;summaryCssClass&#x27; =&gt; &#x27;hide&#x27;, &#x27;pagerCssClass&#x27; =&gt; &#x27;pagination&#x27;, &#x27;pager&#x27; =&gt; [ &#x27;class&#x27; =&gt; &#x27;CLinkPager&#x27;, &#x27;nextPageLabel&#x27; =&gt; &#x27;&amp;raquo;&#x27;, &#x27;prevPageLabel&#x27; =&gt; &#x27;&amp;laquo;&#x27;, &#x27;firstPageLabel&#x27; =&gt; &#x27;最前&#x27;, &#x27;lastPageLabel&#x27; =&gt; &#x27;最后&#x27;, &#x27;htmlOptions&#x27; =&gt; [&#x27;class&#x27; =&gt; &#x27;&#x27;], &#x27;header&#x27; =&gt; &#x27;&#x27;, &#x27;hiddenPageCssClass&#x27; =&gt; &#x27;disabled&#x27;, &#x27;selectedPageCssClass&#x27; =&gt; &#x27;active&#x27;, &#x27;previousPageCssClass&#x27; =&gt; &#x27;&#x27;, &#x27;nextPageCssClass&#x27; =&gt; &#x27;&#x27;, ],]); 其实只要添加自己对应的class属性就可以了，因为yii有自己默认的class属性，这个是比较简单。 下次我们可以看看，如何修改侧边下拉框，改为自己的喜欢的样式。","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"Yii CDbCriteria常用方法","date":"2025-06-03T07:01:08.000Z","path":"2025/06/03/Yii-CDbCriteria常用方法.html","text":"Yii的Active Recorder包装了很多。 特别是把SQL中 把where,order,limit,IN&#x2F;not IN,like等常用短句都包含进CDbCriteria这个类中去，这样整个代码会比较规范，一目了然。 1234567891011121314151617181920212223$criteria = newCDbCriteria;$criteria-&gt;addCondition(&quot;id=1&quot;); //查询条件，即where id =1$criteria-&gt;addInCondition(&#x27;id&#x27;, [1, 2, 3, 4, 5]); //代表where id IN (1,23,,4,5,);$criteria-&gt;addNotInCondition(&#x27;id&#x27;, [1, 2, 3, 4, 5]); //与上面正好相法，是NOT IN$criteria-&gt;addCondition(&#x27;id=1&#x27;, &#x27;OR&#x27;); //这是OR条件，多个条件的时候，该条件是OR而非AND$criteria-&gt;addSearchCondition(&#x27;name&#x27;, &#x27;分类&#x27;); //搜索条件，其实代表了。。where name like ‘%分类%’$criteria-&gt;addBetweenCondition(&#x27;id&#x27;, 1, 4); //between1 and 4$criteria-&gt;compare(&#x27;id&#x27;, 1); //这个方法比较特殊，他会根据你的参数自动处理成addCondition或者addInCondition，//即如果第二个参数是数组就会调用addInCondition$criteria-&gt;addCondition(&quot;id = :id&quot;);$criteria-&gt;params[&#x27;:id&#x27;] = 1;$criteria-&gt;select = &#x27;id,parentid,name&#x27;; //代表了要查询的字段，默认select=’*&#x27;;$criteria-&gt;join = &#x27;xxx&#x27;; //连接表$criteria-&gt;with = &#x27;xxx&#x27;; //调用relations$criteria-&gt;limit = 10; //取1条数据，如果小于0，则不作处理$criteria-&gt;offset = 1; //两条合并起来，则表示 limit 10 offset1,或者代表了。limit 1,10$criteria-&gt;order = &#x27;xxx DESC,XXX ASC&#x27;; //排序条件$criteria-&gt;group = &#x27;group 条件&#x27;;$criteria-&gt;having = &#x27;having 条件 &#x27;;$criteria-&gt;distinct = false; //是否唯一查询","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"Yii开启错误日志","date":"2025-06-03T06:56:27.000Z","path":"2025/06/03/Yii开启错误日志.html","text":"生产环境中的 Web 应用常需要具有完善的事件日志功能。在我们的博客应用中，我们想记录它在使用时发生的错误。这些错误可能是程序错误或者是用户对系统的不当使用导致的错误。记录这些错误可以帮助我们完善此博客应用。 为启用错误日志功能，我们修改 应用配置 如下, 1234567891011121314151617181920212223242526return [ &#x27;preload&#x27; =&gt; [&#x27;log&#x27;], // ...... &#x27;components&#x27; =&gt; [ &#x27;log&#x27; =&gt; [ &#x27;class&#x27; =&gt; &#x27;CLogRouter&#x27;, &#x27;routes&#x27; =&gt; [ [ &#x27;class&#x27; =&gt; &#x27;CFileLogRoute&#x27;, &#x27;levels&#x27; =&gt; &#x27;error, warning&#x27;, ], [ &#x27;class&#x27; =&gt; &#x27;CProfileLogRoute&#x27;, //显示页面加载的整个流程，包括mysql语句 &#x27;levels&#x27; =&gt; &#x27;profile&#x27;, ], [ &#x27;class&#x27; =&gt; &#x27;CWebLogRoute&#x27;, &#x27;levels&#x27; =&gt; &#x27;profile,trace&#x27;, ], ], ], //...... ],]; 通过上述配置，如果有错误（error）或警告（warning）发生，其详细信息将被记录并保存到位于&#x2F;wwwroot&#x2F;blog&#x2F;protected&#x2F;runtime目录的文件中。 log组件还提供了更多的高级功能，例如将日志信息发送到一个 Email 列表，在 JavaScript 控制台窗口中显示日志信息等。更多详情，请参考指南。","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"hexo默认处理heading的标题为id的异常解决方案","date":"2025-05-29T09:08:34.000Z","path":"2025/05/29/hexo默认处理heading的标题为id的异常解决方案.html","text":"hexo在处理markdown文档的时候，默认将heading的内容作为了id来处理锚点，如果是英文是没有问题的。 1## 我的标题 处理后的html内容 1&lt;h2 id=&quot;我的标题&quot;&gt;&lt;a href=&quot;#我的标题&quot; class=&quot;headerlink&quot; title=&quot;我的标题&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#我的标题&quot;&gt;我的标题&lt;/a&gt;&lt;/h2&gt; 但是作为标题是中文的话就会有问题，以为在js的代码中，id是中文是不支持的，这会导致很多js库无法正常运行 找了很多资料，其中就有安装hexo-renderer-markdown-it 但是我自己亲自测试下来，还是很复杂，然后也没有解决我的问题，于是我思考这个hexo不会烂到这个程度吧 于是我看到了一种写法 1## [我的标题](#custom-id) 处理后的html内容 1&lt;h2 id=&quot;custom-id&quot;&gt;&lt;a href=&quot;#custom-id&quot; class=&quot;headerlink&quot; title=&quot;我的标题&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#custom-id&quot;&gt;我的标题&lt;/a&gt;&lt;/h2&gt; 哎，可以，就这么轻松的解决了，不需要什么卸载安装什么的","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.gowhich.com/tags/Hexo/"}]},{"title":"Yii简单的基于角色的访问控制","date":"2025-05-29T07:28:14.000Z","path":"2025/05/29/Yii简单的基于角色的访问控制.html","text":"123456789101112131415161718192021function filters()&#123; return [ &#x27;accessControl&#x27;, // perform access control for CRUD operations ];&#125;function accessRules()&#123; return [ [ &#x27;allow&#x27;, &#x27;action&#x27; =&gt; [&#x27;admin&#x27;], &#x27;roles&#x27; =&gt; [&#x27;staff&#x27;, &#x27;devel&#x27;], ], [ &#x27;deny&#x27;, // deny all users &#x27;users&#x27; =&gt; [&#x27;*&#x27;], ], ];&#125; 用户模型在用户表中新增一列，列名 roles。建立相应的模型。在这里它将被命名为 “User”。 当添加用户可以给他们分配角色 “管理员”，“用户”，“员工”等等。 验证在文件 protected&#x2F;components&#x2F;UserIdentity.php 添加如下内容： 123456789101112131415161718192021222324class UserIdentity extends CUserIdentity&#123; private $id; public function authenticate() &#123; $record = User::model()-&gt;findByAttributes([&#x27;email&#x27; =&gt; $this-&gt;username]); if (null === $record) &#123; $this-&gt;errorCode = self::ERROR_USERNAME_INVALID; &#125; else if (md5($this-&gt;password) !== $record-&gt;password) &#123; $this-&gt;errorCode = self::ERROR_PASSWORD_INVALID; &#125; else &#123; $this-&gt;id = $record-&gt;id; $this-&gt;setState(&#x27;roles&#x27;, $record-&gt;roles); $this-&gt;errorCode = self::ERROR_NONE; &#125; return !$this-&gt;errorCode; &#125; public function getId() &#123; return $this-&gt;id; &#125;&#125; 重要的一行是 1$this-&gt;setState(&#x27;roles&#x27;, $record-&gt;roles); 他给会话增加了用户角色。你可以使用如下代码获取用户角色。 1Yii:app()-&gt;user-&gt;getState(&quot;roles&quot;) 或 1Yii::app()-&gt;user-&gt;roles 检查权限:结构在 protected&#x2F;components 文件夹下修改并创建文件 WebUser.php ,然后重写 checkAccess() 方法。 123456789101112131415161718192021222324&lt;?phpclass WebUser extends CWebUser&#123; /** * Overrides a Yii method that is used for roles in controllers (accessRules). * * @param string $operation Name of the operation required (here, a role). * @param mixed $params (opt) Parameters for this operation, usually the object to access. * @return bool Permission granted? */ public function checkAccess($operation, $params = []) &#123; if (empty($this-&gt;id)) &#123; // Not identified =&gt; no rights return false; &#125; $role = $this-&gt;getState(&quot;roles&quot;); if (&#x27;admin&#x27; === $role) &#123; return true; // admin role has access to everything &#125; // allow access if the operation request is the current user&#x27;s role return ($operation === $role); &#125;&#125; 在 checkAccess() 方法中你可以定义自己的逻辑。确保类可以被yii使用配置文件 “protected&#x2F;config&#x2F;main.php” 必须包含以下内容: 123456&#x27;components&#x27; =&gt; [ // ... &#x27;user&#x27; =&gt; [ &#x27;class&#x27; =&gt; &#x27;WebUser&#x27;, ],] 旁注:[CWebUser::checkAccess()] 通常连接yii的验证系统。这里我们使用一个简单的处理角色的系统来替换[CAuthManager] 定义的分级系统。详细教程参加 Role-Based Access Control 检查权限: 使用在你的 PHP 代码中使用 Yii::app()-&gt;user-&gt;checkAccess(&#39;admin&#39;) 来检查当前用户是否有 ‘admin’ 角色。 当用户拥有 “staff” 或 “admin” 角色时，调用 Yii::app()-&gt;user-&gt;checkAccess(&quot;staff&quot;) 将会返回 true。 在控制器中你可以使用 accessRules() 中的 “roles” 属性进行过滤。 见下面的例子。 怎样过滤动作 控制器必须包含以下代码： 123456789101112131415161718192021function filters()&#123; return [ &#x27;accessControl&#x27;, // perform access control for CRUD operations ];&#125;function accessRules()&#123; return [ [ &#x27;allow&#x27;, &#x27;action&#x27; =&gt; [&#x27;admin&#x27;], &#x27;roles&#x27; =&gt; [&#x27;staff&#x27;, &#x27;devel&#x27;], ], [ &#x27;deny&#x27;, // deny all users &#x27;users&#x27; =&gt; [&#x27;*&#x27;], ], ];&#125; 这里对控制器中的 “admin” 动作进行了限制访问: 只有拥有 “staff” 或 “devel” 角色才可以访问。 像API文档中描述的那样 CAccessRule, “roles” 属性实际上调用的是 Yii::app()-&gt;user-&gt;checkAccess() 方法。 怎样根据角色显示不同菜单 你只需使用一个基于用户角色的菜单。例如 12345678910&lt;?php$user = Yii::app()-&gt;user; // just a convenience to shorten expressions$this-&gt;widget(&#x27;zii.widgets.CMenu&#x27;, [ &#x27;items&#x27; =&gt; [ [&#x27;label&#x27; =&gt; &#x27;Users&#x27;, &#x27;url&#x27; =&gt; [&#x27;/manageUser/admin&#x27;], &#x27;visible&#x27; =&gt; $user-&gt;checkAcces(&#x27;staff&#x27;)], [&#x27;label&#x27; =&gt; &#x27;Your Ideas&#x27;, &#x27;url&#x27; =&gt; [&#x27;/userarea/ideaList&#x27;], &#x27;visible&#x27; =&gt; $user-&gt;checkAcces(&#x27;normal&#x27;)], [&#x27;label&#x27; =&gt; &#x27;Login&#x27;, &#x27;url&#x27; =&gt; [&#x27;/site/login&#x27;], &#x27;visible&#x27; =&gt; $user-&gt;isGuest], [&#x27;label&#x27; =&gt; &#x27;Logout (&#x27; . Yii::app()-&gt;user-&gt;name . &#x27;)&#x27;, &#x27;url&#x27; =&gt; [&#x27;/site/logout&#x27;], &#x27;visible&#x27; =&gt; !$user-&gt;isGuest], ],]); 更进一步: 访问上下文一个通常的需求，用户只能够修改自己的数据。在这种情况下，用户的角色是没有任何意义的：将要修改的数据。 这就是为什么 [CWebUser::checkAccess()] 有一个可选的参数 “$param” 。现在假设我们要检查的是一个用户是否有权更新Post记录的权限。我们可以这样写： 123if (Yii::app()-&gt;user-&gt;checkAccess(&#x27;normal&#x27;, $post)) &#123; // .....&#125; 当然 WebUser::checkAccess() 必须被扩展来使用 “$params” 参数。这将取决于你的应用程序的逻辑。比如, 这可能是非常简单的 $post-&gt;userId == $this-&gt;id。","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"Yii扩展类可以放在extensions目录下面","date":"2025-05-29T07:25:04.000Z","path":"2025/05/29/Yii扩展类可以放在extensions目录下面.html","text":"下面举个例子： 如果我想写个截取字符串长度的函数功能，可以在extensions目录下面新建一个文件，命名为Helper.php 代码如下： 123456789101112131415161718192021222324252627&lt;?phpclass Helper extends CController&#123; public static function truncate_utf8_string($string, $length, $etc = &#x27;...&#x27;) &#123; $result = &#x27;&#x27;; $string = html_entity_decode(trim(strip_tags($string)), ENT_QUOTES, &#x27;UTF-8&#x27;); $strlen = strlen($string); for ($i = 0; (($i &lt; $strlen) &amp;&amp; ($length &gt; 0)); $i++)&#123; if ($number = strpos(str_pad(decbin(ord(substr($string, $i, 1))), 8, &#x27;0&#x27;, STR_PAD_LEFT), &#x27;0&#x27;))&#123; if ($length &lt; 1.0)&#123; break; &#125; $result .= substr($string, $i, $number); $length -= 1.0; $i += $number - 1; &#125;else&#123; $result .= substr($string, $i, 1); $length -= 0.5; &#125; &#125; $result = htmlspecialchars($result, ENT_QUOTES, &#x27;UTF-8&#x27;); if ($i &lt; $strlen)&#123; $result .= $etc; &#125; return $result; &#125;&#125; 然后就可以在自己的代码中引用了Helper::truncate_utf8_string(&#39;XXXXXXXXXXX&#39;,10,&#39;.......&#39;); 如果出现问题可以在config/main.php中加入在import引入要加载扩展的目录 类似： 123456&#x27;import&#x27;=&gt; array( &#x27;application.models.*&#x27;, &#x27;application.components.*&#x27;, &#x27;application.extensions.*&#x27;, // 新加 &#x27;application.extensions.yii-mail.*&#x27;,),","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"Yii中urlManager的配置","date":"2025-05-29T06:30:29.000Z","path":"2025/05/29/Yii中urlManager的配置.html","text":"第一步： 在main.php配置文件的component域中添加urlManager模块，并加入urlrules. 引入rule文件，代码如下 123456789$urls = include(dirname(__FILE__) . &#x27;/urlrules.php&#x27;);urlManager配置修改如下&#x27;urlManager&#x27;=&gt;array( &#x27;urlFormat&#x27; =&gt; &#x27;path&#x27;, &#x27;showScriptName&#x27; =&gt; false,//隐藏index.php &#x27;urlSuffix&#x27; =&gt; &#x27;.html&#x27;,//后缀 &#x27;rules&#x27; =&gt; $urls,), 第二步:在同级目录下写urlrules.php.如： 12345return array( &#x27;/index.html&#x27; =&gt; &#x27;site/index&#x27;, //首页 &#x27;search&#x27; =&gt; &#x27;search/index&#x27;，); 第三步，当然是配置服务器的rewrite模块，使得入口为index.php 1)apache下，在网站根目录下建立.htaccess如下: 12345678910Options +FollowSymLinks IndexIgnore */* RewriteEngine on # if a directory or a file exists, use it directly RewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-dRewriteRule . index.php nginx下在php配置模块和location模块添加rewrite如下： 123456789101112131415161718location / &#123; root /home/george/workspace/EclipsePHP/webroot; index index.html index.php index.htm; #try_files $uri $uri/ @rewrite; if (!-f $request_filename)&#123; rewrite (.*) /index.php; &#125;&#125;location ~ \\.php$ &#123; root /home/george/workspace/EclipsePHP/webroot; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /home/george/workspace/EclipsePHP/webroot$fastcgi_script_name; include fastcgi_params; if (!-f $request_filename)&#123; rewrite (.*) /index.php; &#125;&#125; 完了，再看看你的网站的url 是不是漂亮了不少，同行努力！","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"}]},{"title":"ubuntu和centos的时间更新操作","date":"2025-05-29T02:38:04.000Z","path":"2025/05/29/ubuntu和centos的时间更新操作.html","text":"在Ubuntu Server上，设置NTP时间同步非常简单，就如下几步： 第一，可以先进行手动更新一次时间（可选）： sudo ntpdate ntp.ubuntu.com 第二，创建一个定时执行的文件： sudo vim /etc/cron.daily/ntpdate 然后在其中添加一行：ntpdate ntp.ubuntu.com，保存退出。 第三，修改这个定时执行文件的权限，使其变成可执行文件： sudo chmod 755 /etc/cron.daily/ntpdate &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 下面解析一下,第一句是把当前时区调整为上海就是+8区,想改其他时区也可以去看看&#x2F;usr&#x2F;share&#x2F;zoneinfo目录; 然后第二句是利用ntpdate同步标准时间. 没有安装ntpdate的可以yum一下: yum install -y ntpdate 加入定时计划任务，每隔10分钟同步一下时钟 crontab -e 0-59/10 * * * * /usr/sbin/ntpdate us.pool.ntp.org | logger -t NTP 这样，我们就可以来解决在CentOS系统中时间不准确的问题了。 如果执行命令出现一下错误 1.提示：7 Dec 19:24:55 ntpdate[2120]: the NTP socket is in use, exiting 这个是你linux机器上已经存在这个进程，输入：ps -ef | grep ntpd Kill掉ntp的进程 2.提示：No Server suitable for synchronization found 这个是最容易出现的问题，比较常见的是配置好服务器并启动服务器进程后，马上 启动客户进程，那么客户进程就会报错。解决方法是，在大约3-5分钟以后启动进程就行","tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.gowhich.com/tags/Linux/"}]},{"title":"Hello World","date":"2025-05-28T08:10:14.000Z","path":"2025/05/28/hello-world.html","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.gowhich.com/tags/Hexo/"}]},{"title":"开始第一篇记录","date":"2025-05-28T08:10:14.000Z","path":"2025/05/28/开始第一篇记录.html","text":"这是第一篇记录","tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.gowhich.com/tags/PHP/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.gowhich.com/tags/Linux/"}]}]