[{"title":"hexo默认处理heading的标题为id的异常解决方案","date":"2025-05-29T09:08:34.000Z","path":"2025/05/29/hexo默认处理heading的标题为id的异常解决方案.html","text":"hexo在处理markdown文档的时候，默认将heading的内容作为了id来处理锚点，如果是英文是没有问题的。 1## 我的标题 处理后的html内容 1&lt;h2 id=&quot;我的标题&quot;&gt;&lt;a href=&quot;#我的标题&quot; class=&quot;headerlink&quot; title=&quot;我的标题&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#我的标题&quot;&gt;我的标题&lt;/a&gt;&lt;/h2&gt; 但是作为标题是中文的话就会有问题，以为在js的代码中，id是中文是不支持的，这会导致很多js库无法正常运行 找了很多资料，其中就有安装hexo-renderer-markdown-it 但是我自己亲自测试下来，还是很复杂，然后也没有解决我的问题，于是我思考这个hexo不会烂到这个程度吧 于是我看到了一种写法 1## [我的标题](#custom-id) 处理后的html内容 1&lt;h2 id=&quot;custom-id&quot;&gt;&lt;a href=&quot;#custom-id&quot; class=&quot;headerlink&quot; title=&quot;我的标题&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#custom-id&quot;&gt;我的标题&lt;/a&gt;&lt;/h2&gt; 哎，可以，就这么轻松的解决了，不需要什么卸载安装什么的","tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.gowhich.com/tags/hexo/"}]},{"title":"Yii简单的基于角色的访问控制","date":"2025-05-29T07:28:14.000Z","path":"2025/05/29/Yii简单的基于角色的访问控制.html","text":"123456789101112131415161718192021function filters()&#123; return [ &#x27;accessControl&#x27;, // perform access control for CRUD operations ];&#125;function accessRules()&#123; return [ [ &#x27;allow&#x27;, &#x27;action&#x27; =&gt; [&#x27;admin&#x27;], &#x27;roles&#x27; =&gt; [&#x27;staff&#x27;, &#x27;devel&#x27;], ], [ &#x27;deny&#x27;, // deny all users &#x27;users&#x27; =&gt; [&#x27;*&#x27;], ], ];&#125; 用户模型在用户表中新增一列，列名 roles。建立相应的模型。在这里它将被命名为 “User”。 当添加用户可以给他们分配角色 “管理员”，“用户”，“员工”等等。 验证在文件 protected&#x2F;components&#x2F;UserIdentity.php 添加如下内容： 123456789101112131415161718192021222324class UserIdentity extends CUserIdentity&#123; private $id; public function authenticate() &#123; $record = User::model()-&gt;findByAttributes([&#x27;email&#x27; =&gt; $this-&gt;username]); if (null === $record) &#123; $this-&gt;errorCode = self::ERROR_USERNAME_INVALID; &#125; else if (md5($this-&gt;password) !== $record-&gt;password) &#123; $this-&gt;errorCode = self::ERROR_PASSWORD_INVALID; &#125; else &#123; $this-&gt;id = $record-&gt;id; $this-&gt;setState(&#x27;roles&#x27;, $record-&gt;roles); $this-&gt;errorCode = self::ERROR_NONE; &#125; return !$this-&gt;errorCode; &#125; public function getId() &#123; return $this-&gt;id; &#125;&#125; 重要的一行是 1$this-&gt;setState(&#x27;roles&#x27;, $record-&gt;roles); 他给会话增加了用户角色。你可以使用如下代码获取用户角色。 1Yii:app()-&gt;user-&gt;getState(&quot;roles&quot;) 或 1Yii::app()-&gt;user-&gt;roles 检查权限:结构在 protected&#x2F;components 文件夹下修改并创建文件 WebUser.php ,然后重写 checkAccess() 方法。 123456789101112131415161718192021222324&lt;?phpclass WebUser extends CWebUser&#123; /** * Overrides a Yii method that is used for roles in controllers (accessRules). * * @param string $operation Name of the operation required (here, a role). * @param mixed $params (opt) Parameters for this operation, usually the object to access. * @return bool Permission granted? */ public function checkAccess($operation, $params = []) &#123; if (empty($this-&gt;id)) &#123; // Not identified =&gt; no rights return false; &#125; $role = $this-&gt;getState(&quot;roles&quot;); if (&#x27;admin&#x27; === $role) &#123; return true; // admin role has access to everything &#125; // allow access if the operation request is the current user&#x27;s role return ($operation === $role); &#125;&#125; 在 checkAccess() 方法中你可以定义自己的逻辑。确保类可以被yii使用配置文件 “protected&#x2F;config&#x2F;main.php” 必须包含以下内容: 123456&#x27;components&#x27; =&gt; [ // ... &#x27;user&#x27; =&gt; [ &#x27;class&#x27; =&gt; &#x27;WebUser&#x27;, ],] 旁注:[CWebUser::checkAccess()] 通常连接yii的验证系统。这里我们使用一个简单的处理角色的系统来替换[CAuthManager] 定义的分级系统。详细教程参加 Role-Based Access Control 检查权限: 使用在你的 PHP 代码中使用 Yii::app()-&gt;user-&gt;checkAccess(&#39;admin&#39;) 来检查当前用户是否有 ‘admin’ 角色。 当用户拥有 “staff” 或 “admin” 角色时，调用 Yii::app()-&gt;user-&gt;checkAccess(&quot;staff&quot;) 将会返回 true。 在控制器中你可以使用 accessRules() 中的 “roles” 属性进行过滤。 见下面的例子。 怎样过滤动作 控制器必须包含以下代码： 123456789101112131415161718192021function filters()&#123; return [ &#x27;accessControl&#x27;, // perform access control for CRUD operations ];&#125;function accessRules()&#123; return [ [ &#x27;allow&#x27;, &#x27;action&#x27; =&gt; [&#x27;admin&#x27;], &#x27;roles&#x27; =&gt; [&#x27;staff&#x27;, &#x27;devel&#x27;], ], [ &#x27;deny&#x27;, // deny all users &#x27;users&#x27; =&gt; [&#x27;*&#x27;], ], ];&#125; 这里对控制器中的 “admin” 动作进行了限制访问: 只有拥有 “staff” 或 “devel” 角色才可以访问。 像API文档中描述的那样 CAccessRule, “roles” 属性实际上调用的是 Yii::app()-&gt;user-&gt;checkAccess() 方法。 怎样根据角色显示不同菜单 你只需使用一个基于用户角色的菜单。例如 12345678910&lt;?php$user = Yii::app()-&gt;user; // just a convenience to shorten expressions$this-&gt;widget(&#x27;zii.widgets.CMenu&#x27;, [ &#x27;items&#x27; =&gt; [ [&#x27;label&#x27; =&gt; &#x27;Users&#x27;, &#x27;url&#x27; =&gt; [&#x27;/manageUser/admin&#x27;], &#x27;visible&#x27; =&gt; $user-&gt;checkAcces(&#x27;staff&#x27;)], [&#x27;label&#x27; =&gt; &#x27;Your Ideas&#x27;, &#x27;url&#x27; =&gt; [&#x27;/userarea/ideaList&#x27;], &#x27;visible&#x27; =&gt; $user-&gt;checkAcces(&#x27;normal&#x27;)], [&#x27;label&#x27; =&gt; &#x27;Login&#x27;, &#x27;url&#x27; =&gt; [&#x27;/site/login&#x27;], &#x27;visible&#x27; =&gt; $user-&gt;isGuest], [&#x27;label&#x27; =&gt; &#x27;Logout (&#x27; . Yii::app()-&gt;user-&gt;name . &#x27;)&#x27;, &#x27;url&#x27; =&gt; [&#x27;/site/logout&#x27;], &#x27;visible&#x27; =&gt; !$user-&gt;isGuest], ],]); 更进一步: 访问上下文一个通常的需求，用户只能够修改自己的数据。在这种情况下，用户的角色是没有任何意义的：将要修改的数据。 这就是为什么 [CWebUser::checkAccess()] 有一个可选的参数 “$param” 。现在假设我们要检查的是一个用户是否有权更新Post记录的权限。我们可以这样写： 123if (Yii::app()-&gt;user-&gt;checkAccess(&#x27;normal&#x27;, $post)) &#123; // .....&#125; 当然 WebUser::checkAccess() 必须被扩展来使用 “$params” 参数。这将取决于你的应用程序的逻辑。比如, 这可能是非常简单的 $post-&gt;userId == $this-&gt;id。","tags":[{"name":"php","slug":"php","permalink":"https://blog.gowhich.com/tags/php/"}]},{"title":"Yii扩展类可以放在extensions目录下面","date":"2025-05-29T07:25:04.000Z","path":"2025/05/29/Yii扩展类可以放在extensions目录下面.html","text":"下面举个例子： 如果我想写个截取字符串长度的函数功能，可以在extensions目录下面新建一个文件，命名为Helper.php 代码如下： 123456789101112131415161718192021222324252627&lt;?phpclass Helper extends CController&#123; public static function truncate_utf8_string($string, $length, $etc = &#x27;...&#x27;) &#123; $result = &#x27;&#x27;; $string = html_entity_decode(trim(strip_tags($string)), ENT_QUOTES, &#x27;UTF-8&#x27;); $strlen = strlen($string); for ($i = 0; (($i &lt; $strlen) &amp;&amp; ($length &gt; 0)); $i++)&#123; if ($number = strpos(str_pad(decbin(ord(substr($string, $i, 1))), 8, &#x27;0&#x27;, STR_PAD_LEFT), &#x27;0&#x27;))&#123; if ($length &lt; 1.0)&#123; break; &#125; $result .= substr($string, $i, $number); $length -= 1.0; $i += $number - 1; &#125;else&#123; $result .= substr($string, $i, 1); $length -= 0.5; &#125; &#125; $result = htmlspecialchars($result, ENT_QUOTES, &#x27;UTF-8&#x27;); if ($i &lt; $strlen)&#123; $result .= $etc; &#125; return $result; &#125;&#125; 然后就可以在自己的代码中引用了Helper::truncate_utf8_string(&#39;XXXXXXXXXXX&#39;,10,&#39;.......&#39;); 如果出现问题可以在config/main.php中加入在import引入要加载扩展的目录 类似： 123456&#x27;import&#x27;=&gt; array( &#x27;application.models.*&#x27;, &#x27;application.components.*&#x27;, &#x27;application.extensions.*&#x27;, // 新加 &#x27;application.extensions.yii-mail.*&#x27;,),","tags":[{"name":"php","slug":"php","permalink":"https://blog.gowhich.com/tags/php/"}]},{"title":"Yii中urlManager的配置","date":"2025-05-29T06:30:29.000Z","path":"2025/05/29/Yii中urlManager的配置.html","text":"第一步： 在main.php配置文件的component域中添加urlManager模块，并加入urlrules. 引入rule文件，代码如下 123456789$urls = include(dirname(__FILE__) . &#x27;/urlrules.php&#x27;);urlManager配置修改如下&#x27;urlManager&#x27;=&gt;array( &#x27;urlFormat&#x27; =&gt; &#x27;path&#x27;, &#x27;showScriptName&#x27; =&gt; false,//隐藏index.php &#x27;urlSuffix&#x27; =&gt; &#x27;.html&#x27;,//后缀 &#x27;rules&#x27; =&gt; $urls,), 第二步:在同级目录下写urlrules.php.如： 12345return array( &#x27;/index.html&#x27; =&gt; &#x27;site/index&#x27;, //首页 &#x27;search&#x27; =&gt; &#x27;search/index&#x27;，); 第三步，当然是配置服务器的rewrite模块，使得入口为index.php 1)apache下，在网站根目录下建立.htaccess如下: 12345678910Options +FollowSymLinks IndexIgnore */* RewriteEngine on # if a directory or a file exists, use it directly RewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-dRewriteRule . index.php nginx下在php配置模块和location模块添加rewrite如下： 123456789101112131415161718location / &#123; root /home/george/workspace/EclipsePHP/webroot; index index.html index.php index.htm; #try_files $uri $uri/ @rewrite; if (!-f $request_filename)&#123; rewrite (.*) /index.php; &#125;&#125;location ~ \\.php$ &#123; root /home/george/workspace/EclipsePHP/webroot; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /home/george/workspace/EclipsePHP/webroot$fastcgi_script_name; include fastcgi_params; if (!-f $request_filename)&#123; rewrite (.*) /index.php; &#125;&#125; 完了，再看看你的网站的url 是不是漂亮了不少，同行努力！","tags":[{"name":"php","slug":"php","permalink":"https://blog.gowhich.com/tags/php/"}]},{"title":"ubuntu和centos的时间更新操作","date":"2025-05-29T02:38:04.000Z","path":"2025/05/29/ubuntu和centos的时间更新操作.html","text":"在Ubuntu Server上，设置NTP时间同步非常简单，就如下几步： 第一，可以先进行手动更新一次时间（可选）： sudo ntpdate ntp.ubuntu.com 第二，创建一个定时执行的文件： sudo vim /etc/cron.daily/ntpdate 然后在其中添加一行：ntpdate ntp.ubuntu.com，保存退出。 第三，修改这个定时执行文件的权限，使其变成可执行文件： sudo chmod 755 /etc/cron.daily/ntpdate &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 下面解析一下,第一句是把当前时区调整为上海就是+8区,想改其他时区也可以去看看&#x2F;usr&#x2F;share&#x2F;zoneinfo目录; 然后第二句是利用ntpdate同步标准时间. 没有安装ntpdate的可以yum一下: yum install -y ntpdate 加入定时计划任务，每隔10分钟同步一下时钟 crontab -e 0-59/10 * * * * /usr/sbin/ntpdate us.pool.ntp.org | logger -t NTP 这样，我们就可以来解决在CentOS系统中时间不准确的问题了。 如果执行命令出现一下错误 1.提示：7 Dec 19:24:55 ntpdate[2120]: the NTP socket is in use, exiting 这个是你linux机器上已经存在这个进程，输入：ps -ef | grep ntpd Kill掉ntp的进程 2.提示：No Server suitable for synchronization found 这个是最容易出现的问题，比较常见的是配置好服务器并启动服务器进程后，马上 启动客户进程，那么客户进程就会报错。解决方法是，在大约3-5分钟以后启动进程就行","tags":[{"name":"linux","slug":"linux","permalink":"https://blog.gowhich.com/tags/linux/"}]},{"title":"Hello World","date":"2025-05-28T08:10:14.000Z","path":"2025/05/28/hello-world.html","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.gowhich.com/tags/hexo/"}]},{"title":"开始第一篇记录","date":"2025-05-28T08:10:14.000Z","path":"2025/05/28/开始第一篇记录.html","text":"这是第一篇记录","tags":[{"name":"php","slug":"php","permalink":"https://blog.gowhich.com/tags/php/"},{"name":"linux","slug":"linux","permalink":"https://blog.gowhich.com/tags/linux/"}]}]